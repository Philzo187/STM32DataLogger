
Datenlogger_Schaltungstechnik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d64  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006f3c  08006f3c  00016f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f5c  08006f5c  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08006f5c  08006f5c  00016f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f64  08006f64  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f64  08006f64  00016f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f68  08006f68  00016f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08006f6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000165b8  2000002c  08006f98  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200165e4  08006f98  000265e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001726a  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003310  00000000  00000000  000372c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001450  00000000  00000000  0003a5d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001298  00000000  00000000  0003ba28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024320  00000000  00000000  0003ccc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011e6c  00000000  00000000  00060fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7851  00000000  00000000  00072e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014a69d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055e4  00000000  00000000  0014a718  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000002c 	.word	0x2000002c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006f24 	.word	0x08006f24

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000030 	.word	0x20000030
 8000214:	08006f24 	.word	0x08006f24

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b972 	b.w	8000d90 <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9e08      	ldr	r6, [sp, #32]
 8000aca:	4604      	mov	r4, r0
 8000acc:	4688      	mov	r8, r1
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d14b      	bne.n	8000b6a <__udivmoddi4+0xa6>
 8000ad2:	428a      	cmp	r2, r1
 8000ad4:	4615      	mov	r5, r2
 8000ad6:	d967      	bls.n	8000ba8 <__udivmoddi4+0xe4>
 8000ad8:	fab2 f282 	clz	r2, r2
 8000adc:	b14a      	cbz	r2, 8000af2 <__udivmoddi4+0x2e>
 8000ade:	f1c2 0720 	rsb	r7, r2, #32
 8000ae2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ae6:	fa20 f707 	lsr.w	r7, r0, r7
 8000aea:	4095      	lsls	r5, r2
 8000aec:	ea47 0803 	orr.w	r8, r7, r3
 8000af0:	4094      	lsls	r4, r2
 8000af2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000af6:	0c23      	lsrs	r3, r4, #16
 8000af8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000afc:	fa1f fc85 	uxth.w	ip, r5
 8000b00:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b04:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b08:	fb07 f10c 	mul.w	r1, r7, ip
 8000b0c:	4299      	cmp	r1, r3
 8000b0e:	d909      	bls.n	8000b24 <__udivmoddi4+0x60>
 8000b10:	18eb      	adds	r3, r5, r3
 8000b12:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b16:	f080 811b 	bcs.w	8000d50 <__udivmoddi4+0x28c>
 8000b1a:	4299      	cmp	r1, r3
 8000b1c:	f240 8118 	bls.w	8000d50 <__udivmoddi4+0x28c>
 8000b20:	3f02      	subs	r7, #2
 8000b22:	442b      	add	r3, r5
 8000b24:	1a5b      	subs	r3, r3, r1
 8000b26:	b2a4      	uxth	r4, r4
 8000b28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b34:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b38:	45a4      	cmp	ip, r4
 8000b3a:	d909      	bls.n	8000b50 <__udivmoddi4+0x8c>
 8000b3c:	192c      	adds	r4, r5, r4
 8000b3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b42:	f080 8107 	bcs.w	8000d54 <__udivmoddi4+0x290>
 8000b46:	45a4      	cmp	ip, r4
 8000b48:	f240 8104 	bls.w	8000d54 <__udivmoddi4+0x290>
 8000b4c:	3802      	subs	r0, #2
 8000b4e:	442c      	add	r4, r5
 8000b50:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b54:	eba4 040c 	sub.w	r4, r4, ip
 8000b58:	2700      	movs	r7, #0
 8000b5a:	b11e      	cbz	r6, 8000b64 <__udivmoddi4+0xa0>
 8000b5c:	40d4      	lsrs	r4, r2
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e9c6 4300 	strd	r4, r3, [r6]
 8000b64:	4639      	mov	r1, r7
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d909      	bls.n	8000b82 <__udivmoddi4+0xbe>
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	f000 80eb 	beq.w	8000d4a <__udivmoddi4+0x286>
 8000b74:	2700      	movs	r7, #0
 8000b76:	e9c6 0100 	strd	r0, r1, [r6]
 8000b7a:	4638      	mov	r0, r7
 8000b7c:	4639      	mov	r1, r7
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	fab3 f783 	clz	r7, r3
 8000b86:	2f00      	cmp	r7, #0
 8000b88:	d147      	bne.n	8000c1a <__udivmoddi4+0x156>
 8000b8a:	428b      	cmp	r3, r1
 8000b8c:	d302      	bcc.n	8000b94 <__udivmoddi4+0xd0>
 8000b8e:	4282      	cmp	r2, r0
 8000b90:	f200 80fa 	bhi.w	8000d88 <__udivmoddi4+0x2c4>
 8000b94:	1a84      	subs	r4, r0, r2
 8000b96:	eb61 0303 	sbc.w	r3, r1, r3
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	4698      	mov	r8, r3
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	d0e0      	beq.n	8000b64 <__udivmoddi4+0xa0>
 8000ba2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ba6:	e7dd      	b.n	8000b64 <__udivmoddi4+0xa0>
 8000ba8:	b902      	cbnz	r2, 8000bac <__udivmoddi4+0xe8>
 8000baa:	deff      	udf	#255	; 0xff
 8000bac:	fab2 f282 	clz	r2, r2
 8000bb0:	2a00      	cmp	r2, #0
 8000bb2:	f040 808f 	bne.w	8000cd4 <__udivmoddi4+0x210>
 8000bb6:	1b49      	subs	r1, r1, r5
 8000bb8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bbc:	fa1f f885 	uxth.w	r8, r5
 8000bc0:	2701      	movs	r7, #1
 8000bc2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bc6:	0c23      	lsrs	r3, r4, #16
 8000bc8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bcc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd0:	fb08 f10c 	mul.w	r1, r8, ip
 8000bd4:	4299      	cmp	r1, r3
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x124>
 8000bd8:	18eb      	adds	r3, r5, r3
 8000bda:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x122>
 8000be0:	4299      	cmp	r1, r3
 8000be2:	f200 80cd 	bhi.w	8000d80 <__udivmoddi4+0x2bc>
 8000be6:	4684      	mov	ip, r0
 8000be8:	1a59      	subs	r1, r3, r1
 8000bea:	b2a3      	uxth	r3, r4
 8000bec:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bf0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bf4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bf8:	fb08 f800 	mul.w	r8, r8, r0
 8000bfc:	45a0      	cmp	r8, r4
 8000bfe:	d907      	bls.n	8000c10 <__udivmoddi4+0x14c>
 8000c00:	192c      	adds	r4, r5, r4
 8000c02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x14a>
 8000c08:	45a0      	cmp	r8, r4
 8000c0a:	f200 80b6 	bhi.w	8000d7a <__udivmoddi4+0x2b6>
 8000c0e:	4618      	mov	r0, r3
 8000c10:	eba4 0408 	sub.w	r4, r4, r8
 8000c14:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c18:	e79f      	b.n	8000b5a <__udivmoddi4+0x96>
 8000c1a:	f1c7 0c20 	rsb	ip, r7, #32
 8000c1e:	40bb      	lsls	r3, r7
 8000c20:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c24:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c28:	fa01 f407 	lsl.w	r4, r1, r7
 8000c2c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c30:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c34:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c38:	4325      	orrs	r5, r4
 8000c3a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c3e:	0c2c      	lsrs	r4, r5, #16
 8000c40:	fb08 3319 	mls	r3, r8, r9, r3
 8000c44:	fa1f fa8e 	uxth.w	sl, lr
 8000c48:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c4c:	fb09 f40a 	mul.w	r4, r9, sl
 8000c50:	429c      	cmp	r4, r3
 8000c52:	fa02 f207 	lsl.w	r2, r2, r7
 8000c56:	fa00 f107 	lsl.w	r1, r0, r7
 8000c5a:	d90b      	bls.n	8000c74 <__udivmoddi4+0x1b0>
 8000c5c:	eb1e 0303 	adds.w	r3, lr, r3
 8000c60:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c64:	f080 8087 	bcs.w	8000d76 <__udivmoddi4+0x2b2>
 8000c68:	429c      	cmp	r4, r3
 8000c6a:	f240 8084 	bls.w	8000d76 <__udivmoddi4+0x2b2>
 8000c6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c72:	4473      	add	r3, lr
 8000c74:	1b1b      	subs	r3, r3, r4
 8000c76:	b2ad      	uxth	r5, r5
 8000c78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c7c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c80:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c84:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c88:	45a2      	cmp	sl, r4
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x1da>
 8000c8c:	eb1e 0404 	adds.w	r4, lr, r4
 8000c90:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c94:	d26b      	bcs.n	8000d6e <__udivmoddi4+0x2aa>
 8000c96:	45a2      	cmp	sl, r4
 8000c98:	d969      	bls.n	8000d6e <__udivmoddi4+0x2aa>
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	4474      	add	r4, lr
 8000c9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ca2:	fba0 8902 	umull	r8, r9, r0, r2
 8000ca6:	eba4 040a 	sub.w	r4, r4, sl
 8000caa:	454c      	cmp	r4, r9
 8000cac:	46c2      	mov	sl, r8
 8000cae:	464b      	mov	r3, r9
 8000cb0:	d354      	bcc.n	8000d5c <__udivmoddi4+0x298>
 8000cb2:	d051      	beq.n	8000d58 <__udivmoddi4+0x294>
 8000cb4:	2e00      	cmp	r6, #0
 8000cb6:	d069      	beq.n	8000d8c <__udivmoddi4+0x2c8>
 8000cb8:	ebb1 050a 	subs.w	r5, r1, sl
 8000cbc:	eb64 0403 	sbc.w	r4, r4, r3
 8000cc0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cc4:	40fd      	lsrs	r5, r7
 8000cc6:	40fc      	lsrs	r4, r7
 8000cc8:	ea4c 0505 	orr.w	r5, ip, r5
 8000ccc:	e9c6 5400 	strd	r5, r4, [r6]
 8000cd0:	2700      	movs	r7, #0
 8000cd2:	e747      	b.n	8000b64 <__udivmoddi4+0xa0>
 8000cd4:	f1c2 0320 	rsb	r3, r2, #32
 8000cd8:	fa20 f703 	lsr.w	r7, r0, r3
 8000cdc:	4095      	lsls	r5, r2
 8000cde:	fa01 f002 	lsl.w	r0, r1, r2
 8000ce2:	fa21 f303 	lsr.w	r3, r1, r3
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	4338      	orrs	r0, r7
 8000cec:	0c01      	lsrs	r1, r0, #16
 8000cee:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cf2:	fa1f f885 	uxth.w	r8, r5
 8000cf6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cfa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfe:	fb07 f308 	mul.w	r3, r7, r8
 8000d02:	428b      	cmp	r3, r1
 8000d04:	fa04 f402 	lsl.w	r4, r4, r2
 8000d08:	d907      	bls.n	8000d1a <__udivmoddi4+0x256>
 8000d0a:	1869      	adds	r1, r5, r1
 8000d0c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d10:	d22f      	bcs.n	8000d72 <__udivmoddi4+0x2ae>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d92d      	bls.n	8000d72 <__udivmoddi4+0x2ae>
 8000d16:	3f02      	subs	r7, #2
 8000d18:	4429      	add	r1, r5
 8000d1a:	1acb      	subs	r3, r1, r3
 8000d1c:	b281      	uxth	r1, r0
 8000d1e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d22:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d26:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d2a:	fb00 f308 	mul.w	r3, r0, r8
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x27e>
 8000d32:	1869      	adds	r1, r5, r1
 8000d34:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d38:	d217      	bcs.n	8000d6a <__udivmoddi4+0x2a6>
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	d915      	bls.n	8000d6a <__udivmoddi4+0x2a6>
 8000d3e:	3802      	subs	r0, #2
 8000d40:	4429      	add	r1, r5
 8000d42:	1ac9      	subs	r1, r1, r3
 8000d44:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d48:	e73b      	b.n	8000bc2 <__udivmoddi4+0xfe>
 8000d4a:	4637      	mov	r7, r6
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	e709      	b.n	8000b64 <__udivmoddi4+0xa0>
 8000d50:	4607      	mov	r7, r0
 8000d52:	e6e7      	b.n	8000b24 <__udivmoddi4+0x60>
 8000d54:	4618      	mov	r0, r3
 8000d56:	e6fb      	b.n	8000b50 <__udivmoddi4+0x8c>
 8000d58:	4541      	cmp	r1, r8
 8000d5a:	d2ab      	bcs.n	8000cb4 <__udivmoddi4+0x1f0>
 8000d5c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d60:	eb69 020e 	sbc.w	r2, r9, lr
 8000d64:	3801      	subs	r0, #1
 8000d66:	4613      	mov	r3, r2
 8000d68:	e7a4      	b.n	8000cb4 <__udivmoddi4+0x1f0>
 8000d6a:	4660      	mov	r0, ip
 8000d6c:	e7e9      	b.n	8000d42 <__udivmoddi4+0x27e>
 8000d6e:	4618      	mov	r0, r3
 8000d70:	e795      	b.n	8000c9e <__udivmoddi4+0x1da>
 8000d72:	4667      	mov	r7, ip
 8000d74:	e7d1      	b.n	8000d1a <__udivmoddi4+0x256>
 8000d76:	4681      	mov	r9, r0
 8000d78:	e77c      	b.n	8000c74 <__udivmoddi4+0x1b0>
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	442c      	add	r4, r5
 8000d7e:	e747      	b.n	8000c10 <__udivmoddi4+0x14c>
 8000d80:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d84:	442b      	add	r3, r5
 8000d86:	e72f      	b.n	8000be8 <__udivmoddi4+0x124>
 8000d88:	4638      	mov	r0, r7
 8000d8a:	e708      	b.n	8000b9e <__udivmoddi4+0xda>
 8000d8c:	4637      	mov	r7, r6
 8000d8e:	e6e9      	b.n	8000b64 <__udivmoddi4+0xa0>

08000d90 <__aeabi_idiv0>:
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop

08000d94 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000da6:	4b36      	ldr	r3, [pc, #216]	; (8000e80 <MX_ADC1_Init+0xec>)
 8000da8:	4a36      	ldr	r2, [pc, #216]	; (8000e84 <MX_ADC1_Init+0xf0>)
 8000daa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000dac:	4b34      	ldr	r3, [pc, #208]	; (8000e80 <MX_ADC1_Init+0xec>)
 8000dae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000db2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000db4:	4b32      	ldr	r3, [pc, #200]	; (8000e80 <MX_ADC1_Init+0xec>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000dba:	4b31      	ldr	r3, [pc, #196]	; (8000e80 <MX_ADC1_Init+0xec>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000dc0:	4b2f      	ldr	r3, [pc, #188]	; (8000e80 <MX_ADC1_Init+0xec>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dc6:	4b2e      	ldr	r3, [pc, #184]	; (8000e80 <MX_ADC1_Init+0xec>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dce:	4b2c      	ldr	r3, [pc, #176]	; (8000e80 <MX_ADC1_Init+0xec>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dd4:	4b2a      	ldr	r3, [pc, #168]	; (8000e80 <MX_ADC1_Init+0xec>)
 8000dd6:	4a2c      	ldr	r2, [pc, #176]	; (8000e88 <MX_ADC1_Init+0xf4>)
 8000dd8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dda:	4b29      	ldr	r3, [pc, #164]	; (8000e80 <MX_ADC1_Init+0xec>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000de0:	4b27      	ldr	r3, [pc, #156]	; (8000e80 <MX_ADC1_Init+0xec>)
 8000de2:	2204      	movs	r2, #4
 8000de4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000de6:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <MX_ADC1_Init+0xec>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000dee:	4b24      	ldr	r3, [pc, #144]	; (8000e80 <MX_ADC1_Init+0xec>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000df4:	4822      	ldr	r0, [pc, #136]	; (8000e80 <MX_ADC1_Init+0xec>)
 8000df6:	f001 f951 	bl	800209c <HAL_ADC_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e00:	f000 fdd4 	bl	80019ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e04:	2303      	movs	r3, #3
 8000e06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e10:	463b      	mov	r3, r7
 8000e12:	4619      	mov	r1, r3
 8000e14:	481a      	ldr	r0, [pc, #104]	; (8000e80 <MX_ADC1_Init+0xec>)
 8000e16:	f001 fa6d 	bl	80022f4 <HAL_ADC_ConfigChannel>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e20:	f000 fdc4 	bl	80019ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e24:	230a      	movs	r3, #10
 8000e26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4813      	ldr	r0, [pc, #76]	; (8000e80 <MX_ADC1_Init+0xec>)
 8000e32:	f001 fa5f 	bl	80022f4 <HAL_ADC_ConfigChannel>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000e3c:	f000 fdb6 	bl	80019ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000e40:	230d      	movs	r3, #13
 8000e42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000e44:	2303      	movs	r3, #3
 8000e46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e48:	463b      	mov	r3, r7
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	480c      	ldr	r0, [pc, #48]	; (8000e80 <MX_ADC1_Init+0xec>)
 8000e4e:	f001 fa51 	bl	80022f4 <HAL_ADC_ConfigChannel>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000e58:	f000 fda8 	bl	80019ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e5c:	230b      	movs	r3, #11
 8000e5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000e60:	2304      	movs	r3, #4
 8000e62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e64:	463b      	mov	r3, r7
 8000e66:	4619      	mov	r1, r3
 8000e68:	4805      	ldr	r0, [pc, #20]	; (8000e80 <MX_ADC1_Init+0xec>)
 8000e6a:	f001 fa43 	bl	80022f4 <HAL_ADC_ConfigChannel>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000e74:	f000 fd9a 	bl	80019ac <Error_Handler>
  }

}
 8000e78:	bf00      	nop
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	2000007c 	.word	0x2000007c
 8000e84:	40012000 	.word	0x40012000
 8000e88:	0f000001 	.word	0x0f000001

08000e8c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08a      	sub	sp, #40	; 0x28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a3c      	ldr	r2, [pc, #240]	; (8000f9c <HAL_ADC_MspInit+0x110>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d172      	bne.n	8000f94 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	4b3b      	ldr	r3, [pc, #236]	; (8000fa0 <HAL_ADC_MspInit+0x114>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	4a3a      	ldr	r2, [pc, #232]	; (8000fa0 <HAL_ADC_MspInit+0x114>)
 8000eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ebe:	4b38      	ldr	r3, [pc, #224]	; (8000fa0 <HAL_ADC_MspInit+0x114>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	4b34      	ldr	r3, [pc, #208]	; (8000fa0 <HAL_ADC_MspInit+0x114>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a33      	ldr	r2, [pc, #204]	; (8000fa0 <HAL_ADC_MspInit+0x114>)
 8000ed4:	f043 0304 	orr.w	r3, r3, #4
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b31      	ldr	r3, [pc, #196]	; (8000fa0 <HAL_ADC_MspInit+0x114>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0304 	and.w	r3, r3, #4
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <HAL_ADC_MspInit+0x114>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a2c      	ldr	r2, [pc, #176]	; (8000fa0 <HAL_ADC_MspInit+0x114>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b2a      	ldr	r3, [pc, #168]	; (8000fa0 <HAL_ADC_MspInit+0x114>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC3     ------> ADC1_IN13
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8000f02:	230b      	movs	r3, #11
 8000f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f06:	2303      	movs	r3, #3
 8000f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	4823      	ldr	r0, [pc, #140]	; (8000fa4 <HAL_ADC_MspInit+0x118>)
 8000f16:	f002 f93f 	bl	8003198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f1a:	2308      	movs	r3, #8
 8000f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	481e      	ldr	r0, [pc, #120]	; (8000fa8 <HAL_ADC_MspInit+0x11c>)
 8000f2e:	f002 f933 	bl	8003198 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f32:	4b1e      	ldr	r3, [pc, #120]	; (8000fac <HAL_ADC_MspInit+0x120>)
 8000f34:	4a1e      	ldr	r2, [pc, #120]	; (8000fb0 <HAL_ADC_MspInit+0x124>)
 8000f36:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f38:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <HAL_ADC_MspInit+0x120>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <HAL_ADC_MspInit+0x120>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f44:	4b19      	ldr	r3, [pc, #100]	; (8000fac <HAL_ADC_MspInit+0x120>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <HAL_ADC_MspInit+0x120>)
 8000f4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f50:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f52:	4b16      	ldr	r3, [pc, #88]	; (8000fac <HAL_ADC_MspInit+0x120>)
 8000f54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f58:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f5a:	4b14      	ldr	r3, [pc, #80]	; (8000fac <HAL_ADC_MspInit+0x120>)
 8000f5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f60:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f62:	4b12      	ldr	r3, [pc, #72]	; (8000fac <HAL_ADC_MspInit+0x120>)
 8000f64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f68:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f6a:	4b10      	ldr	r3, [pc, #64]	; (8000fac <HAL_ADC_MspInit+0x120>)
 8000f6c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f70:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <HAL_ADC_MspInit+0x120>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f78:	480c      	ldr	r0, [pc, #48]	; (8000fac <HAL_ADC_MspInit+0x120>)
 8000f7a:	f001 fd7d 	bl	8002a78 <HAL_DMA_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8000f84:	f000 fd12 	bl	80019ac <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a08      	ldr	r2, [pc, #32]	; (8000fac <HAL_ADC_MspInit+0x120>)
 8000f8c:	639a      	str	r2, [r3, #56]	; 0x38
 8000f8e:	4a07      	ldr	r2, [pc, #28]	; (8000fac <HAL_ADC_MspInit+0x120>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f94:	bf00      	nop
 8000f96:	3728      	adds	r7, #40	; 0x28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40012000 	.word	0x40012000
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020800 	.word	0x40020800
 8000fa8:	40020000 	.word	0x40020000
 8000fac:	200000c4 	.word	0x200000c4
 8000fb0:	40026410 	.word	0x40026410

08000fb4 <HAL_ADC_ConvCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	Cnt_adcConvCplt++;
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <HAL_ADC_ConvCpltCallback+0x20>)
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <HAL_ADC_ConvCpltCallback+0x20>)
 8000fc6:	801a      	strh	r2, [r3, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	20000048 	.word	0x20000048

08000fd8 <adc_transform>:

float adc_transform(uint16_t adcVal, uint8_t idx) {
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	460a      	mov	r2, r1
 8000fe2:	80fb      	strh	r3, [r7, #6]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	717b      	strb	r3, [r7, #5]
return ((float)((int16_t)adcVal - Hwcal_Data[idx].offset) * Hwcal_Data[idx].gain);
 8000fe8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fec:	4619      	mov	r1, r3
 8000fee:	797b      	ldrb	r3, [r7, #5]
 8000ff0:	4a0b      	ldr	r2, [pc, #44]	; (8001020 <adc_transform+0x48>)
 8000ff2:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8000ff6:	1acb      	subs	r3, r1, r3
 8000ff8:	ee07 3a90 	vmov	s15, r3
 8000ffc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001000:	797b      	ldrb	r3, [r7, #5]
 8001002:	4a07      	ldr	r2, [pc, #28]	; (8001020 <adc_transform+0x48>)
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	4413      	add	r3, r2
 8001008:	3304      	adds	r3, #4
 800100a:	edd3 7a00 	vldr	s15, [r3]
 800100e:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001012:	eeb0 0a67 	vmov.f32	s0, s15
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	20000000 	.word	0x20000000

08001024 <adc_100us>:

void adc_100us(void) {
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	V_U_Analog[0] = adc_transform(adcSamples[0], 0);
 8001028:	4b26      	ldr	r3, [pc, #152]	; (80010c4 <adc_100us+0xa0>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff ffd2 	bl	8000fd8 <adc_transform>
 8001034:	eef0 7a40 	vmov.f32	s15, s0
 8001038:	4b23      	ldr	r3, [pc, #140]	; (80010c8 <adc_100us+0xa4>)
 800103a:	edc3 7a00 	vstr	s15, [r3]
	V_U_Analog[1] = adc_transform(adcSamples[1], 1);
 800103e:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <adc_100us+0xa0>)
 8001040:	885b      	ldrh	r3, [r3, #2]
 8001042:	2101      	movs	r1, #1
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ffc7 	bl	8000fd8 <adc_transform>
 800104a:	eef0 7a40 	vmov.f32	s15, s0
 800104e:	4b1e      	ldr	r3, [pc, #120]	; (80010c8 <adc_100us+0xa4>)
 8001050:	edc3 7a01 	vstr	s15, [r3, #4]
	V_U_Analog[2] = adc_transform(adcSamples[2], 2);
 8001054:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <adc_100us+0xa0>)
 8001056:	889b      	ldrh	r3, [r3, #4]
 8001058:	2102      	movs	r1, #2
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ffbc 	bl	8000fd8 <adc_transform>
 8001060:	eef0 7a40 	vmov.f32	s15, s0
 8001064:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <adc_100us+0xa4>)
 8001066:	edc3 7a02 	vstr	s15, [r3, #8]
	V_U_Analog[3] = adc_transform(adcSamples[3], 3);
 800106a:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <adc_100us+0xa0>)
 800106c:	88db      	ldrh	r3, [r3, #6]
 800106e:	2103      	movs	r1, #3
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ffb1 	bl	8000fd8 <adc_transform>
 8001076:	eef0 7a40 	vmov.f32	s15, s0
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <adc_100us+0xa4>)
 800107c:	edc3 7a03 	vstr	s15, [r3, #12]
	V_D_Input[0] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7);
 8001080:	2180      	movs	r1, #128	; 0x80
 8001082:	4812      	ldr	r0, [pc, #72]	; (80010cc <adc_100us+0xa8>)
 8001084:	f002 fa1a 	bl	80034bc <HAL_GPIO_ReadPin>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <adc_100us+0xac>)
 800108e:	701a      	strb	r2, [r3, #0]
	V_D_Input[1] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6);
 8001090:	2140      	movs	r1, #64	; 0x40
 8001092:	480e      	ldr	r0, [pc, #56]	; (80010cc <adc_100us+0xa8>)
 8001094:	f002 fa12 	bl	80034bc <HAL_GPIO_ReadPin>
 8001098:	4603      	mov	r3, r0
 800109a:	461a      	mov	r2, r3
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <adc_100us+0xac>)
 800109e:	705a      	strb	r2, [r3, #1]
	V_D_Input[2] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5);
 80010a0:	2120      	movs	r1, #32
 80010a2:	480a      	ldr	r0, [pc, #40]	; (80010cc <adc_100us+0xa8>)
 80010a4:	f002 fa0a 	bl	80034bc <HAL_GPIO_ReadPin>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <adc_100us+0xac>)
 80010ae:	709a      	strb	r2, [r3, #2]
	V_D_Input[3] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4);
 80010b0:	2110      	movs	r1, #16
 80010b2:	4806      	ldr	r0, [pc, #24]	; (80010cc <adc_100us+0xa8>)
 80010b4:	f002 fa02 	bl	80034bc <HAL_GPIO_ReadPin>
 80010b8:	4603      	mov	r3, r0
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <adc_100us+0xac>)
 80010be:	70da      	strb	r2, [r3, #3]
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000124 	.word	0x20000124
 80010c8:	2000012c 	.word	0x2000012c
 80010cc:	40020c00 	.word	0x40020c00
 80010d0:	20000078 	.word	0x20000078

080010d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <MX_DMA_Init+0x3c>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a0b      	ldr	r2, [pc, #44]	; (8001110 <MX_DMA_Init+0x3c>)
 80010e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <MX_DMA_Init+0x3c>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2100      	movs	r1, #0
 80010fa:	2038      	movs	r0, #56	; 0x38
 80010fc:	f001 fc85 	bl	8002a0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001100:	2038      	movs	r0, #56	; 0x38
 8001102:	f001 fc9e 	bl	8002a42 <HAL_NVIC_EnableIRQ>

}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800

08001114 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA5   ------> SPI1_SCK
*/
void MX_GPIO_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08c      	sub	sp, #48	; 0x30
 8001118:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111a:	f107 031c 	add.w	r3, r7, #28
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	61bb      	str	r3, [r7, #24]
 800112e:	4b59      	ldr	r3, [pc, #356]	; (8001294 <MX_GPIO_Init+0x180>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a58      	ldr	r2, [pc, #352]	; (8001294 <MX_GPIO_Init+0x180>)
 8001134:	f043 0304 	orr.w	r3, r3, #4
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b56      	ldr	r3, [pc, #344]	; (8001294 <MX_GPIO_Init+0x180>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	61bb      	str	r3, [r7, #24]
 8001144:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
 800114a:	4b52      	ldr	r3, [pc, #328]	; (8001294 <MX_GPIO_Init+0x180>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a51      	ldr	r2, [pc, #324]	; (8001294 <MX_GPIO_Init+0x180>)
 8001150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b4f      	ldr	r3, [pc, #316]	; (8001294 <MX_GPIO_Init+0x180>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	4b4b      	ldr	r3, [pc, #300]	; (8001294 <MX_GPIO_Init+0x180>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a4a      	ldr	r2, [pc, #296]	; (8001294 <MX_GPIO_Init+0x180>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b48      	ldr	r3, [pc, #288]	; (8001294 <MX_GPIO_Init+0x180>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b44      	ldr	r3, [pc, #272]	; (8001294 <MX_GPIO_Init+0x180>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a43      	ldr	r2, [pc, #268]	; (8001294 <MX_GPIO_Init+0x180>)
 8001188:	f043 0302 	orr.w	r3, r3, #2
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b41      	ldr	r3, [pc, #260]	; (8001294 <MX_GPIO_Init+0x180>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	4b3d      	ldr	r3, [pc, #244]	; (8001294 <MX_GPIO_Init+0x180>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a3c      	ldr	r2, [pc, #240]	; (8001294 <MX_GPIO_Init+0x180>)
 80011a4:	f043 0308 	orr.w	r3, r3, #8
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b3a      	ldr	r3, [pc, #232]	; (8001294 <MX_GPIO_Init+0x180>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0308 	and.w	r3, r3, #8
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	4b36      	ldr	r3, [pc, #216]	; (8001294 <MX_GPIO_Init+0x180>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a35      	ldr	r2, [pc, #212]	; (8001294 <MX_GPIO_Init+0x180>)
 80011c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b33      	ldr	r3, [pc, #204]	; (8001294 <MX_GPIO_Init+0x180>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	f244 0181 	movw	r1, #16513	; 0x4081
 80011d8:	482f      	ldr	r0, [pc, #188]	; (8001298 <MX_GPIO_Init+0x184>)
 80011da:	f002 f987 	bl	80034ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	2140      	movs	r1, #64	; 0x40
 80011e2:	482e      	ldr	r0, [pc, #184]	; (800129c <MX_GPIO_Init+0x188>)
 80011e4:	f002 f982 	bl	80034ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ee:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <MX_GPIO_Init+0x18c>)
 80011f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	4619      	mov	r1, r3
 80011fc:	4829      	ldr	r0, [pc, #164]	; (80012a4 <MX_GPIO_Init+0x190>)
 80011fe:	f001 ffcb 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001202:	2320      	movs	r3, #32
 8001204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120e:	2303      	movs	r3, #3
 8001210:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001212:	2305      	movs	r3, #5
 8001214:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001216:	f107 031c 	add.w	r3, r7, #28
 800121a:	4619      	mov	r1, r3
 800121c:	4822      	ldr	r0, [pc, #136]	; (80012a8 <MX_GPIO_Init+0x194>)
 800121e:	f001 ffbb 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8001222:	f244 0381 	movw	r3, #16513	; 0x4081
 8001226:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001228:	2301      	movs	r3, #1
 800122a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001230:	2300      	movs	r3, #0
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	4619      	mov	r1, r3
 800123a:	4817      	ldr	r0, [pc, #92]	; (8001298 <MX_GPIO_Init+0x184>)
 800123c:	f001 ffac 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001240:	2340      	movs	r3, #64	; 0x40
 8001242:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001244:	2301      	movs	r3, #1
 8001246:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	2300      	movs	r3, #0
 800124e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001250:	f107 031c 	add.w	r3, r7, #28
 8001254:	4619      	mov	r1, r3
 8001256:	4811      	ldr	r0, [pc, #68]	; (800129c <MX_GPIO_Init+0x188>)
 8001258:	f001 ff9e 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800125c:	2380      	movs	r3, #128	; 0x80
 800125e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001260:	2300      	movs	r3, #0
 8001262:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	4619      	mov	r1, r3
 800126e:	480b      	ldr	r0, [pc, #44]	; (800129c <MX_GPIO_Init+0x188>)
 8001270:	f001 ff92 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001274:	23f0      	movs	r3, #240	; 0xf0
 8001276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001278:	2300      	movs	r3, #0
 800127a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800127c:	2301      	movs	r3, #1
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	4619      	mov	r1, r3
 8001286:	4809      	ldr	r0, [pc, #36]	; (80012ac <MX_GPIO_Init+0x198>)
 8001288:	f001 ff86 	bl	8003198 <HAL_GPIO_Init>

}
 800128c:	bf00      	nop
 800128e:	3730      	adds	r7, #48	; 0x30
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40023800 	.word	0x40023800
 8001298:	40020400 	.word	0x40020400
 800129c:	40021800 	.word	0x40021800
 80012a0:	10110000 	.word	0x10110000
 80012a4:	40020800 	.word	0x40020800
 80012a8:	40020000 	.word	0x40020000
 80012ac:	40020c00 	.word	0x40020c00

080012b0 <TrigHandler>:
uint8_t triggered = 0;
uint8_t sendChunk = 0;		// send data is divided in 4 chunks. first 2 chunks for analog signals are send, then 2 for digital signals are send

uint16_t CntSampleRemaining = 0;

void TrigHandler(void) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
	switch (Trigger.eTrigStatus) {
 80012b4:	4b4d      	ldr	r3, [pc, #308]	; (80013ec <TrigHandler+0x13c>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b06      	cmp	r3, #6
 80012ba:	f200 8094 	bhi.w	80013e6 <TrigHandler+0x136>
 80012be:	a201      	add	r2, pc, #4	; (adr r2, 80012c4 <TrigHandler+0x14>)
 80012c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c4:	080013e7 	.word	0x080013e7
 80012c8:	080012e1 	.word	0x080012e1
 80012cc:	08001331 	.word	0x08001331
 80012d0:	08001381 	.word	0x08001381
 80012d4:	080013b1 	.word	0x080013b1
 80012d8:	080013e1 	.word	0x080013e1
 80012dc:	080013e7 	.word	0x080013e7
		case TRIG_IDLE:
			break;
		case TRIG_ANA_POS:
			getSample();
 80012e0:	f000 f8be 	bl	8001460 <getSample>
			if ((V_U_TrigAnalog_old < Trigger.fTrigVal) && (V_U_Analog[Trigger.idxChannel] >= Trigger.fTrigVal)) {
 80012e4:	4b41      	ldr	r3, [pc, #260]	; (80013ec <TrigHandler+0x13c>)
 80012e6:	ed93 7a01 	vldr	s14, [r3, #4]
 80012ea:	4b41      	ldr	r3, [pc, #260]	; (80013f0 <TrigHandler+0x140>)
 80012ec:	edd3 7a00 	vldr	s15, [r3]
 80012f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f8:	dd11      	ble.n	800131e <TrigHandler+0x6e>
 80012fa:	4b3c      	ldr	r3, [pc, #240]	; (80013ec <TrigHandler+0x13c>)
 80012fc:	785b      	ldrb	r3, [r3, #1]
 80012fe:	4a3d      	ldr	r2, [pc, #244]	; (80013f4 <TrigHandler+0x144>)
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	ed93 7a00 	vldr	s14, [r3]
 8001308:	4b38      	ldr	r3, [pc, #224]	; (80013ec <TrigHandler+0x13c>)
 800130a:	edd3 7a01 	vldr	s15, [r3, #4]
 800130e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001316:	db02      	blt.n	800131e <TrigHandler+0x6e>
				SignalTriggered();
 8001318:	f000 f872 	bl	8001400 <SignalTriggered>
			} else {
				V_U_TrigAnalog_old = V_U_Analog[Trigger.idxChannel];
			}
			break;
 800131c:	e064      	b.n	80013e8 <TrigHandler+0x138>
				V_U_TrigAnalog_old = V_U_Analog[Trigger.idxChannel];
 800131e:	4b33      	ldr	r3, [pc, #204]	; (80013ec <TrigHandler+0x13c>)
 8001320:	785b      	ldrb	r3, [r3, #1]
 8001322:	4a34      	ldr	r2, [pc, #208]	; (80013f4 <TrigHandler+0x144>)
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a31      	ldr	r2, [pc, #196]	; (80013f0 <TrigHandler+0x140>)
 800132c:	6013      	str	r3, [r2, #0]
			break;
 800132e:	e05b      	b.n	80013e8 <TrigHandler+0x138>
		case TRIG_ANA_NEG:
			getSample();
 8001330:	f000 f896 	bl	8001460 <getSample>
			if ((V_U_TrigAnalog_old > Trigger.fTrigVal) && (V_U_Analog[Trigger.idxChannel] <= Trigger.fTrigVal)) {
 8001334:	4b2d      	ldr	r3, [pc, #180]	; (80013ec <TrigHandler+0x13c>)
 8001336:	ed93 7a01 	vldr	s14, [r3, #4]
 800133a:	4b2d      	ldr	r3, [pc, #180]	; (80013f0 <TrigHandler+0x140>)
 800133c:	edd3 7a00 	vldr	s15, [r3]
 8001340:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001348:	d511      	bpl.n	800136e <TrigHandler+0xbe>
 800134a:	4b28      	ldr	r3, [pc, #160]	; (80013ec <TrigHandler+0x13c>)
 800134c:	785b      	ldrb	r3, [r3, #1]
 800134e:	4a29      	ldr	r2, [pc, #164]	; (80013f4 <TrigHandler+0x144>)
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	ed93 7a00 	vldr	s14, [r3]
 8001358:	4b24      	ldr	r3, [pc, #144]	; (80013ec <TrigHandler+0x13c>)
 800135a:	edd3 7a01 	vldr	s15, [r3, #4]
 800135e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001366:	d802      	bhi.n	800136e <TrigHandler+0xbe>
				SignalTriggered();
 8001368:	f000 f84a 	bl	8001400 <SignalTriggered>
			} else {
				V_U_TrigAnalog_old = V_U_Analog[Trigger.idxChannel];
			}
			break;
 800136c:	e03c      	b.n	80013e8 <TrigHandler+0x138>
				V_U_TrigAnalog_old = V_U_Analog[Trigger.idxChannel];
 800136e:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <TrigHandler+0x13c>)
 8001370:	785b      	ldrb	r3, [r3, #1]
 8001372:	4a20      	ldr	r2, [pc, #128]	; (80013f4 <TrigHandler+0x144>)
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4413      	add	r3, r2
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a1d      	ldr	r2, [pc, #116]	; (80013f0 <TrigHandler+0x140>)
 800137c:	6013      	str	r3, [r2, #0]
			break;
 800137e:	e033      	b.n	80013e8 <TrigHandler+0x138>
		case TRIG_DIG_POS:
			getSample();
 8001380:	f000 f86e 	bl	8001460 <getSample>
			if ((V_D_TrigDigital_old == 0) && (V_D_Input[Trigger.idxChannel] == 1)) {
 8001384:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <TrigHandler+0x148>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d109      	bne.n	80013a0 <TrigHandler+0xf0>
 800138c:	4b17      	ldr	r3, [pc, #92]	; (80013ec <TrigHandler+0x13c>)
 800138e:	785b      	ldrb	r3, [r3, #1]
 8001390:	461a      	mov	r2, r3
 8001392:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <TrigHandler+0x14c>)
 8001394:	5c9b      	ldrb	r3, [r3, r2]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d102      	bne.n	80013a0 <TrigHandler+0xf0>
				SignalTriggered();
 800139a:	f000 f831 	bl	8001400 <SignalTriggered>
			} else {
				V_D_TrigDigital_old = V_D_Input[Trigger.idxChannel];
			}
			break;
 800139e:	e023      	b.n	80013e8 <TrigHandler+0x138>
				V_D_TrigDigital_old = V_D_Input[Trigger.idxChannel];
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <TrigHandler+0x13c>)
 80013a2:	785b      	ldrb	r3, [r3, #1]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <TrigHandler+0x14c>)
 80013a8:	5c9a      	ldrb	r2, [r3, r2]
 80013aa:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <TrigHandler+0x148>)
 80013ac:	701a      	strb	r2, [r3, #0]
			break;
 80013ae:	e01b      	b.n	80013e8 <TrigHandler+0x138>
		case TRIG_DIG_NEG:
			getSample();
 80013b0:	f000 f856 	bl	8001460 <getSample>
			if ((V_D_TrigDigital_old == 1) && (V_D_Input[Trigger.idxChannel] == 0)) {
 80013b4:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <TrigHandler+0x148>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d109      	bne.n	80013d0 <TrigHandler+0x120>
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <TrigHandler+0x13c>)
 80013be:	785b      	ldrb	r3, [r3, #1]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <TrigHandler+0x14c>)
 80013c4:	5c9b      	ldrb	r3, [r3, r2]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d102      	bne.n	80013d0 <TrigHandler+0x120>
				SignalTriggered();
 80013ca:	f000 f819 	bl	8001400 <SignalTriggered>
			} else {
				V_D_TrigDigital_old = V_D_Input[Trigger.idxChannel];
			}
			break;
 80013ce:	e00b      	b.n	80013e8 <TrigHandler+0x138>
				V_D_TrigDigital_old = V_D_Input[Trigger.idxChannel];
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <TrigHandler+0x13c>)
 80013d2:	785b      	ldrb	r3, [r3, #1]
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b09      	ldr	r3, [pc, #36]	; (80013fc <TrigHandler+0x14c>)
 80013d8:	5c9a      	ldrb	r2, [r3, r2]
 80013da:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <TrigHandler+0x148>)
 80013dc:	701a      	strb	r2, [r3, #0]
			break;
 80013de:	e003      	b.n	80013e8 <TrigHandler+0x138>
		case TRIG_ENDREC:
			getSample();
 80013e0:	f000 f83e 	bl	8001460 <getSample>
			break;
 80013e4:	e000      	b.n	80013e8 <TrigHandler+0x138>
		case TRIG_SENDDATA:
			break;
		default:
			break;
 80013e6:	bf00      	nop
	}
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	2000004c 	.word	0x2000004c
 80013f0:	2000005c 	.word	0x2000005c
 80013f4:	2000012c 	.word	0x2000012c
 80013f8:	20000060 	.word	0x20000060
 80013fc:	20000078 	.word	0x20000078

08001400 <SignalTriggered>:

void SignalTriggered(void) {
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
	Trigger.eTrigStatus = TRIG_ENDREC;
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <SignalTriggered+0x4c>)
 8001406:	2205      	movs	r2, #5
 8001408:	701a      	strb	r2, [r3, #0]
	if (BuffIdx > (SAMPLES / 2)) {
 800140a:	4b11      	ldr	r3, [pc, #68]	; (8001450 <SignalTriggered+0x50>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001412:	4293      	cmp	r3, r2
 8001414:	d907      	bls.n	8001426 <SignalTriggered+0x26>
		StartSendIdx = BuffIdx - SAMPLES / 2;
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <SignalTriggered+0x50>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f5a3 536a 	sub.w	r3, r3, #14976	; 0x3a80
 800141e:	3b18      	subs	r3, #24
 8001420:	4a0c      	ldr	r2, [pc, #48]	; (8001454 <SignalTriggered+0x54>)
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	e006      	b.n	8001434 <SignalTriggered+0x34>
	} else {
		StartSendIdx = BuffIdx + SAMPLES / 2;
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <SignalTriggered+0x50>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 800142e:	3318      	adds	r3, #24
 8001430:	4a08      	ldr	r2, [pc, #32]	; (8001454 <SignalTriggered+0x54>)
 8001432:	6013      	str	r3, [r2, #0]
	}
	triggered = 1;
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <SignalTriggered+0x58>)
 8001436:	2201      	movs	r2, #1
 8001438:	701a      	strb	r2, [r3, #0]
	CntSampleRemaining = SAMPLES / 2; // Trigger zunächst auf 50% fixiert
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <SignalTriggered+0x5c>)
 800143c:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001440:	801a      	strh	r2, [r3, #0]
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	2000004c 	.word	0x2000004c
 8001450:	20000064 	.word	0x20000064
 8001454:	20000068 	.word	0x20000068
 8001458:	2000006c 	.word	0x2000006c
 800145c:	2000006e 	.word	0x2000006e

08001460 <getSample>:

void getSample(void) {
 8001460:	b598      	push	{r3, r4, r7, lr}
 8001462:	af00      	add	r7, sp, #0
	// Add Analog channels if used
	if (Trigger.smplCh & 0x01) {
 8001464:	4b54      	ldr	r3, [pc, #336]	; (80015b8 <getSample+0x158>)
 8001466:	7a1b      	ldrb	r3, [r3, #8]
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	2b00      	cmp	r3, #0
 800146e:	d018      	beq.n	80014a2 <getSample+0x42>
		BuffAna_q11[BuffIdx] = encode_q11(V_U_Analog[0]);
 8001470:	4b52      	ldr	r3, [pc, #328]	; (80015bc <getSample+0x15c>)
 8001472:	edd3 7a00 	vldr	s15, [r3]
 8001476:	4b52      	ldr	r3, [pc, #328]	; (80015c0 <getSample+0x160>)
 8001478:	681c      	ldr	r4, [r3, #0]
 800147a:	eeb0 0a67 	vmov.f32	s0, s15
 800147e:	f000 f97f 	bl	8001780 <encode_q11>
 8001482:	4603      	mov	r3, r0
 8001484:	461a      	mov	r2, r3
 8001486:	4b4f      	ldr	r3, [pc, #316]	; (80015c4 <getSample+0x164>)
 8001488:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		BuffDig_q11[BuffIdx] = V_D_Input[0];
 800148c:	4b4c      	ldr	r3, [pc, #304]	; (80015c0 <getSample+0x160>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a4d      	ldr	r2, [pc, #308]	; (80015c8 <getSample+0x168>)
 8001492:	7811      	ldrb	r1, [r2, #0]
 8001494:	4a4d      	ldr	r2, [pc, #308]	; (80015cc <getSample+0x16c>)
 8001496:	54d1      	strb	r1, [r2, r3]
		BuffIdx++;
 8001498:	4b49      	ldr	r3, [pc, #292]	; (80015c0 <getSample+0x160>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	3301      	adds	r3, #1
 800149e:	4a48      	ldr	r2, [pc, #288]	; (80015c0 <getSample+0x160>)
 80014a0:	6013      	str	r3, [r2, #0]
	}
	if (Trigger.smplCh & 0x02) {
 80014a2:	4b45      	ldr	r3, [pc, #276]	; (80015b8 <getSample+0x158>)
 80014a4:	7a1b      	ldrb	r3, [r3, #8]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d018      	beq.n	80014e0 <getSample+0x80>
		BuffAna_q11[BuffIdx] = encode_q11(V_U_Analog[1]);
 80014ae:	4b43      	ldr	r3, [pc, #268]	; (80015bc <getSample+0x15c>)
 80014b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80014b4:	4b42      	ldr	r3, [pc, #264]	; (80015c0 <getSample+0x160>)
 80014b6:	681c      	ldr	r4, [r3, #0]
 80014b8:	eeb0 0a67 	vmov.f32	s0, s15
 80014bc:	f000 f960 	bl	8001780 <encode_q11>
 80014c0:	4603      	mov	r3, r0
 80014c2:	461a      	mov	r2, r3
 80014c4:	4b3f      	ldr	r3, [pc, #252]	; (80015c4 <getSample+0x164>)
 80014c6:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		BuffDig_q11[BuffIdx] = V_D_Input[1];
 80014ca:	4b3d      	ldr	r3, [pc, #244]	; (80015c0 <getSample+0x160>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a3e      	ldr	r2, [pc, #248]	; (80015c8 <getSample+0x168>)
 80014d0:	7851      	ldrb	r1, [r2, #1]
 80014d2:	4a3e      	ldr	r2, [pc, #248]	; (80015cc <getSample+0x16c>)
 80014d4:	54d1      	strb	r1, [r2, r3]
		BuffIdx++;
 80014d6:	4b3a      	ldr	r3, [pc, #232]	; (80015c0 <getSample+0x160>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	3301      	adds	r3, #1
 80014dc:	4a38      	ldr	r2, [pc, #224]	; (80015c0 <getSample+0x160>)
 80014de:	6013      	str	r3, [r2, #0]
	}
	if (Trigger.smplCh & 0x04) {
 80014e0:	4b35      	ldr	r3, [pc, #212]	; (80015b8 <getSample+0x158>)
 80014e2:	7a1b      	ldrb	r3, [r3, #8]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d018      	beq.n	800151e <getSample+0xbe>
		BuffAna_q11[BuffIdx] = encode_q11(V_U_Analog[2]);
 80014ec:	4b33      	ldr	r3, [pc, #204]	; (80015bc <getSample+0x15c>)
 80014ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80014f2:	4b33      	ldr	r3, [pc, #204]	; (80015c0 <getSample+0x160>)
 80014f4:	681c      	ldr	r4, [r3, #0]
 80014f6:	eeb0 0a67 	vmov.f32	s0, s15
 80014fa:	f000 f941 	bl	8001780 <encode_q11>
 80014fe:	4603      	mov	r3, r0
 8001500:	461a      	mov	r2, r3
 8001502:	4b30      	ldr	r3, [pc, #192]	; (80015c4 <getSample+0x164>)
 8001504:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		BuffDig_q11[BuffIdx] = V_D_Input[2];
 8001508:	4b2d      	ldr	r3, [pc, #180]	; (80015c0 <getSample+0x160>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a2e      	ldr	r2, [pc, #184]	; (80015c8 <getSample+0x168>)
 800150e:	7891      	ldrb	r1, [r2, #2]
 8001510:	4a2e      	ldr	r2, [pc, #184]	; (80015cc <getSample+0x16c>)
 8001512:	54d1      	strb	r1, [r2, r3]
		BuffIdx++;
 8001514:	4b2a      	ldr	r3, [pc, #168]	; (80015c0 <getSample+0x160>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	3301      	adds	r3, #1
 800151a:	4a29      	ldr	r2, [pc, #164]	; (80015c0 <getSample+0x160>)
 800151c:	6013      	str	r3, [r2, #0]
	}
	if (Trigger.smplCh & 0x08) {
 800151e:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <getSample+0x158>)
 8001520:	7a1b      	ldrb	r3, [r3, #8]
 8001522:	f003 0308 	and.w	r3, r3, #8
 8001526:	2b00      	cmp	r3, #0
 8001528:	d018      	beq.n	800155c <getSample+0xfc>
		BuffAna_q11[BuffIdx] = encode_q11(V_U_Analog[3]);
 800152a:	4b24      	ldr	r3, [pc, #144]	; (80015bc <getSample+0x15c>)
 800152c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001530:	4b23      	ldr	r3, [pc, #140]	; (80015c0 <getSample+0x160>)
 8001532:	681c      	ldr	r4, [r3, #0]
 8001534:	eeb0 0a67 	vmov.f32	s0, s15
 8001538:	f000 f922 	bl	8001780 <encode_q11>
 800153c:	4603      	mov	r3, r0
 800153e:	461a      	mov	r2, r3
 8001540:	4b20      	ldr	r3, [pc, #128]	; (80015c4 <getSample+0x164>)
 8001542:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		BuffDig_q11[BuffIdx] = V_D_Input[3];
 8001546:	4b1e      	ldr	r3, [pc, #120]	; (80015c0 <getSample+0x160>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a1f      	ldr	r2, [pc, #124]	; (80015c8 <getSample+0x168>)
 800154c:	78d1      	ldrb	r1, [r2, #3]
 800154e:	4a1f      	ldr	r2, [pc, #124]	; (80015cc <getSample+0x16c>)
 8001550:	54d1      	strb	r1, [r2, r3]
		BuffIdx++;
 8001552:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <getSample+0x160>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	3301      	adds	r3, #1
 8001558:	4a19      	ldr	r2, [pc, #100]	; (80015c0 <getSample+0x160>)
 800155a:	6013      	str	r3, [r2, #0]
	}

	if (BuffIdx == SAMPLES) BuffIdx = 0;
 800155c:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <getSample+0x160>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f247 5230 	movw	r2, #30000	; 0x7530
 8001564:	4293      	cmp	r3, r2
 8001566:	d102      	bne.n	800156e <getSample+0x10e>
 8001568:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <getSample+0x160>)
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
	if (triggered) {
 800156e:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <getSample+0x170>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d00a      	beq.n	800158c <getSample+0x12c>
		CntSampleRemaining -= Trigger.numSmplCh/2;
 8001576:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <getSample+0x174>)
 8001578:	881a      	ldrh	r2, [r3, #0]
 800157a:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <getSample+0x158>)
 800157c:	7a5b      	ldrb	r3, [r3, #9]
 800157e:	085b      	lsrs	r3, r3, #1
 8001580:	b2db      	uxtb	r3, r3
 8001582:	b29b      	uxth	r3, r3
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	b29a      	uxth	r2, r3
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <getSample+0x174>)
 800158a:	801a      	strh	r2, [r3, #0]
	}
	if ((CntSampleRemaining == 0) && triggered) {
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <getSample+0x174>)
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d10f      	bne.n	80015b4 <getSample+0x154>
 8001594:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <getSample+0x170>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d00b      	beq.n	80015b4 <getSample+0x154>
		triggered = 0;
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <getSample+0x170>)
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
		Trigger.eTrigStatus = TRIG_IDLE;
 80015a2:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <getSample+0x158>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	701a      	strb	r2, [r3, #0]
		BuffIdx = 0;
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <getSample+0x160>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
		Datahandler = DATA_SEND;
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <getSample+0x178>)
 80015b0:	2202      	movs	r2, #2
 80015b2:	701a      	strb	r2, [r3, #0]
	}

}
 80015b4:	bf00      	nop
 80015b6:	bd98      	pop	{r3, r4, r7, pc}
 80015b8:	2000004c 	.word	0x2000004c
 80015bc:	2000012c 	.word	0x2000012c
 80015c0:	20000064 	.word	0x20000064
 80015c4:	20007674 	.word	0x20007674
 80015c8:	20000078 	.word	0x20000078
 80015cc:	20000144 	.word	0x20000144
 80015d0:	2000006c 	.word	0x2000006c
 80015d4:	2000006e 	.word	0x2000006e
 80015d8:	20000058 	.word	0x20000058

080015dc <DataHandler>:
void DataHandler(void) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
	switch (Datahandler) {
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <DataHandler+0x50>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d01d      	beq.n	8001624 <DataHandler+0x48>
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d000      	beq.n	80015ee <DataHandler+0x12>
			HAL_UART_Transmit_IT(&huart3, &BuffAna_q11[StartSendIdx], (SAMPLES-StartSendIdx)*2);
			sendChunk = 1;
			Datahandler = DATA_IDLE;
			break;
		default:
			break;
 80015ec:	e01b      	b.n	8001626 <DataHandler+0x4a>
			HAL_UART_Transmit_IT(&huart3, &BuffAna_q11[StartSendIdx], (SAMPLES-StartSendIdx)*2);
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <DataHandler+0x54>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	4a0f      	ldr	r2, [pc, #60]	; (8001634 <DataHandler+0x58>)
 80015f6:	1899      	adds	r1, r3, r2
 80015f8:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <DataHandler+0x54>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	461a      	mov	r2, r3
 8001600:	03d2      	lsls	r2, r2, #15
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	b29b      	uxth	r3, r3
 8001608:	f5a3 53ad 	sub.w	r3, r3, #5536	; 0x15a0
 800160c:	b29b      	uxth	r3, r3
 800160e:	461a      	mov	r2, r3
 8001610:	4809      	ldr	r0, [pc, #36]	; (8001638 <DataHandler+0x5c>)
 8001612:	f003 ff6a 	bl	80054ea <HAL_UART_Transmit_IT>
			sendChunk = 1;
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <DataHandler+0x60>)
 8001618:	2201      	movs	r2, #1
 800161a:	701a      	strb	r2, [r3, #0]
			Datahandler = DATA_IDLE;
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <DataHandler+0x50>)
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
			break;
 8001622:	e000      	b.n	8001626 <DataHandler+0x4a>
			break;
 8001624:	bf00      	nop
	}
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000058 	.word	0x20000058
 8001630:	20000068 	.word	0x20000068
 8001634:	20007674 	.word	0x20007674
 8001638:	20016198 	.word	0x20016198
 800163c:	2000006d 	.word	0x2000006d

08001640 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	Trigger.eTrigStatus = rxData[0] & 0x0F;
 8001648:	4b21      	ldr	r3, [pc, #132]	; (80016d0 <HAL_UART_RxCpltCallback+0x90>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	f003 030f 	and.w	r3, r3, #15
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <HAL_UART_RxCpltCallback+0x94>)
 8001654:	701a      	strb	r2, [r3, #0]
	Trigger.idxChannel = rxData[1] & 0x0F;
 8001656:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <HAL_UART_RxCpltCallback+0x90>)
 8001658:	785b      	ldrb	r3, [r3, #1]
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	b2da      	uxtb	r2, r3
 8001660:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <HAL_UART_RxCpltCallback+0x94>)
 8001662:	705a      	strb	r2, [r3, #1]
	uint16_t tmp = (rxData[2] << 8) + rxData[3];
 8001664:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <HAL_UART_RxCpltCallback+0x90>)
 8001666:	789b      	ldrb	r3, [r3, #2]
 8001668:	b29b      	uxth	r3, r3
 800166a:	021b      	lsls	r3, r3, #8
 800166c:	b29a      	uxth	r2, r3
 800166e:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <HAL_UART_RxCpltCallback+0x90>)
 8001670:	78db      	ldrb	r3, [r3, #3]
 8001672:	b29b      	uxth	r3, r3
 8001674:	4413      	add	r3, r2
 8001676:	81fb      	strh	r3, [r7, #14]
	Trigger.fTrigVal = decode_q11(tmp);
 8001678:	89fb      	ldrh	r3, [r7, #14]
 800167a:	4618      	mov	r0, r3
 800167c:	f000 f8a4 	bl	80017c8 <decode_q11>
 8001680:	eef0 7a40 	vmov.f32	s15, s0
 8001684:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <HAL_UART_RxCpltCallback+0x94>)
 8001686:	edc3 7a01 	vstr	s15, [r3, #4]
	Trigger.smplCh = rxData[4];
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <HAL_UART_RxCpltCallback+0x90>)
 800168c:	791a      	ldrb	r2, [r3, #4]
 800168e:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <HAL_UART_RxCpltCallback+0x94>)
 8001690:	721a      	strb	r2, [r3, #8]
	Trigger.numSmplCh = rxData[5] & 0x0F;
 8001692:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <HAL_UART_RxCpltCallback+0x90>)
 8001694:	795b      	ldrb	r3, [r3, #5]
 8001696:	f003 030f 	and.w	r3, r3, #15
 800169a:	b2da      	uxtb	r2, r3
 800169c:	4b0d      	ldr	r3, [pc, #52]	; (80016d4 <HAL_UART_RxCpltCallback+0x94>)
 800169e:	725a      	strb	r2, [r3, #9]

	V_U_TrigAnalog_old = V_U_Analog[Trigger.idxChannel];
 80016a0:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <HAL_UART_RxCpltCallback+0x94>)
 80016a2:	785b      	ldrb	r3, [r3, #1]
 80016a4:	4a0c      	ldr	r2, [pc, #48]	; (80016d8 <HAL_UART_RxCpltCallback+0x98>)
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <HAL_UART_RxCpltCallback+0x9c>)
 80016ae:	6013      	str	r3, [r2, #0]
	V_D_TrigDigital_old = V_D_Input[Trigger.idxChannel];
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <HAL_UART_RxCpltCallback+0x94>)
 80016b2:	785b      	ldrb	r3, [r3, #1]
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <HAL_UART_RxCpltCallback+0xa0>)
 80016b8:	5c9a      	ldrb	r2, [r3, r2]
 80016ba:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <HAL_UART_RxCpltCallback+0xa4>)
 80016bc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart3, rxData, sizeof(rxData));
 80016be:	2206      	movs	r2, #6
 80016c0:	4903      	ldr	r1, [pc, #12]	; (80016d0 <HAL_UART_RxCpltCallback+0x90>)
 80016c2:	4809      	ldr	r0, [pc, #36]	; (80016e8 <HAL_UART_RxCpltCallback+0xa8>)
 80016c4:	f003 ff56 	bl	8005574 <HAL_UART_Receive_IT>
}
 80016c8:	bf00      	nop
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	2000013c 	.word	0x2000013c
 80016d4:	2000004c 	.word	0x2000004c
 80016d8:	2000012c 	.word	0x2000012c
 80016dc:	2000005c 	.word	0x2000005c
 80016e0:	20000078 	.word	0x20000078
 80016e4:	20000060 	.word	0x20000060
 80016e8:	20016198 	.word	0x20016198

080016ec <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	if (sendChunk == 1) {
 80016f4:	4b1d      	ldr	r3, [pc, #116]	; (800176c <HAL_UART_TxCpltCallback+0x80>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d10d      	bne.n	8001718 <HAL_UART_TxCpltCallback+0x2c>
		HAL_UART_Transmit_IT(&huart3, &BuffAna_q11[0], StartSendIdx*2);
 80016fc:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <HAL_UART_TxCpltCallback+0x84>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	b29b      	uxth	r3, r3
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	b29b      	uxth	r3, r3
 8001706:	461a      	mov	r2, r3
 8001708:	491a      	ldr	r1, [pc, #104]	; (8001774 <HAL_UART_TxCpltCallback+0x88>)
 800170a:	481b      	ldr	r0, [pc, #108]	; (8001778 <HAL_UART_TxCpltCallback+0x8c>)
 800170c:	f003 feed 	bl	80054ea <HAL_UART_Transmit_IT>
		sendChunk = 2;
 8001710:	4b16      	ldr	r3, [pc, #88]	; (800176c <HAL_UART_TxCpltCallback+0x80>)
 8001712:	2202      	movs	r2, #2
 8001714:	701a      	strb	r2, [r3, #0]
		sendChunk = 3;
	} else if (sendChunk == 3) {
		HAL_UART_Transmit_IT(&huart3, &BuffDig_q11[0], StartSendIdx);
		sendChunk = 0;
	}
}
 8001716:	e025      	b.n	8001764 <HAL_UART_TxCpltCallback+0x78>
	} else if (sendChunk == 2) {
 8001718:	4b14      	ldr	r3, [pc, #80]	; (800176c <HAL_UART_TxCpltCallback+0x80>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b02      	cmp	r3, #2
 800171e:	d112      	bne.n	8001746 <HAL_UART_TxCpltCallback+0x5a>
		HAL_UART_Transmit_IT(&huart3, &BuffDig_q11[StartSendIdx], (SAMPLES-StartSendIdx));
 8001720:	4b13      	ldr	r3, [pc, #76]	; (8001770 <HAL_UART_TxCpltCallback+0x84>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a15      	ldr	r2, [pc, #84]	; (800177c <HAL_UART_TxCpltCallback+0x90>)
 8001726:	1899      	adds	r1, r3, r2
 8001728:	4b11      	ldr	r3, [pc, #68]	; (8001770 <HAL_UART_TxCpltCallback+0x84>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	b29b      	uxth	r3, r3
 800172e:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 8001732:	3330      	adds	r3, #48	; 0x30
 8001734:	b29b      	uxth	r3, r3
 8001736:	461a      	mov	r2, r3
 8001738:	480f      	ldr	r0, [pc, #60]	; (8001778 <HAL_UART_TxCpltCallback+0x8c>)
 800173a:	f003 fed6 	bl	80054ea <HAL_UART_Transmit_IT>
		sendChunk = 3;
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <HAL_UART_TxCpltCallback+0x80>)
 8001740:	2203      	movs	r2, #3
 8001742:	701a      	strb	r2, [r3, #0]
}
 8001744:	e00e      	b.n	8001764 <HAL_UART_TxCpltCallback+0x78>
	} else if (sendChunk == 3) {
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_UART_TxCpltCallback+0x80>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b03      	cmp	r3, #3
 800174c:	d10a      	bne.n	8001764 <HAL_UART_TxCpltCallback+0x78>
		HAL_UART_Transmit_IT(&huart3, &BuffDig_q11[0], StartSendIdx);
 800174e:	4b08      	ldr	r3, [pc, #32]	; (8001770 <HAL_UART_TxCpltCallback+0x84>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	b29b      	uxth	r3, r3
 8001754:	461a      	mov	r2, r3
 8001756:	4909      	ldr	r1, [pc, #36]	; (800177c <HAL_UART_TxCpltCallback+0x90>)
 8001758:	4807      	ldr	r0, [pc, #28]	; (8001778 <HAL_UART_TxCpltCallback+0x8c>)
 800175a:	f003 fec6 	bl	80054ea <HAL_UART_Transmit_IT>
		sendChunk = 0;
 800175e:	4b03      	ldr	r3, [pc, #12]	; (800176c <HAL_UART_TxCpltCallback+0x80>)
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	2000006d 	.word	0x2000006d
 8001770:	20000068 	.word	0x20000068
 8001774:	20007674 	.word	0x20007674
 8001778:	20016198 	.word	0x20016198
 800177c:	20000144 	.word	0x20000144

08001780 <encode_q11>:

uint16_t encode_q11(float Val) {
 8001780:	b590      	push	{r4, r7, lr}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	ed87 0a01 	vstr	s0, [r7, #4]
	return (uint16_t)((Val * 2048) + 0.5);
 800178a:	edd7 7a01 	vldr	s15, [r7, #4]
 800178e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80017c0 <encode_q11+0x40>
 8001792:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001796:	ee17 0a90 	vmov	r0, s15
 800179a:	f7fe fea1 	bl	80004e0 <__aeabi_f2d>
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <encode_q11+0x44>)
 80017a4:	f7fe fd3e 	bl	8000224 <__adddf3>
 80017a8:	4603      	mov	r3, r0
 80017aa:	460c      	mov	r4, r1
 80017ac:	4618      	mov	r0, r3
 80017ae:	4621      	mov	r1, r4
 80017b0:	f7ff f900 	bl	80009b4 <__aeabi_d2uiz>
 80017b4:	4603      	mov	r3, r0
 80017b6:	b29b      	uxth	r3, r3
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd90      	pop	{r4, r7, pc}
 80017c0:	45000000 	.word	0x45000000
 80017c4:	3fe00000 	.word	0x3fe00000

080017c8 <decode_q11>:

float decode_q11(uint16_t Val) {
 80017c8:	b590      	push	{r4, r7, lr}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	80fb      	strh	r3, [r7, #6]
	return (Val / 2048.0);
 80017d2:	88fb      	ldrh	r3, [r7, #6]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fe71 	bl	80004bc <__aeabi_i2d>
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	4b08      	ldr	r3, [pc, #32]	; (8001800 <decode_q11+0x38>)
 80017e0:	f7ff f800 	bl	80007e4 <__aeabi_ddiv>
 80017e4:	4603      	mov	r3, r0
 80017e6:	460c      	mov	r4, r1
 80017e8:	4618      	mov	r0, r3
 80017ea:	4621      	mov	r1, r4
 80017ec:	f7ff f902 	bl	80009f4 <__aeabi_d2f>
 80017f0:	4603      	mov	r3, r0
 80017f2:	ee07 3a90 	vmov	s15, r3
}
 80017f6:	eeb0 0a67 	vmov.f32	s0, s15
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd90      	pop	{r4, r7, pc}
 8001800:	40a00000 	.word	0x40a00000

08001804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001808:	f000 fbb4 	bl	8001f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800180c:	f000 f82e 	bl	800186c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001810:	f7ff fc80 	bl	8001114 <MX_GPIO_Init>
  MX_DMA_Init();
 8001814:	f7ff fc5e 	bl	80010d4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001818:	f000 fa7e 	bl	8001d18 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800181c:	f7ff faba 	bl	8000d94 <MX_ADC1_Init>
  MX_SDIO_SD_Init();
 8001820:	f000 f8cc 	bl	80019bc <MX_SDIO_SD_Init>
  MX_TIM4_Init();
 8001824:	f000 fa04 	bl	8001c30 <MX_TIM4_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001828:	f000 faf0 	bl	8001e0c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcSamples, 4);
 800182c:	2204      	movs	r2, #4
 800182e:	4909      	ldr	r1, [pc, #36]	; (8001854 <main+0x50>)
 8001830:	4809      	ldr	r0, [pc, #36]	; (8001858 <main+0x54>)
 8001832:	f000 fc77 	bl	8002124 <HAL_ADC_Start_DMA>
  HAL_UART_Receive_IT(&huart3, rxData, sizeof(rxData));
 8001836:	2206      	movs	r2, #6
 8001838:	4908      	ldr	r1, [pc, #32]	; (800185c <main+0x58>)
 800183a:	4809      	ldr	r0, [pc, #36]	; (8001860 <main+0x5c>)
 800183c:	f003 fe9a 	bl	8005574 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001840:	4808      	ldr	r0, [pc, #32]	; (8001864 <main+0x60>)
 8001842:	f003 fa30 	bl	8004ca6 <HAL_TIM_Base_Start_IT>
	  sprintf (buf, "%u", adcSamples[idx]);
	  strcat(str, buf);
	  strcat(str, "\n\r");
	  HAL_UART_Transmit(&huart3, (uint8_t*)str, strlen(str), 0xFFFF);
	  */
	  Cnt_Loop++;
 8001846:	4b08      	ldr	r3, [pc, #32]	; (8001868 <main+0x64>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	3301      	adds	r3, #1
 800184c:	4a06      	ldr	r2, [pc, #24]	; (8001868 <main+0x64>)
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	e7f9      	b.n	8001846 <main+0x42>
 8001852:	bf00      	nop
 8001854:	20000124 	.word	0x20000124
 8001858:	2000007c 	.word	0x2000007c
 800185c:	2000013c 	.word	0x2000013c
 8001860:	20016198 	.word	0x20016198
 8001864:	20016158 	.word	0x20016158
 8001868:	20000070 	.word	0x20000070

0800186c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b0aa      	sub	sp, #168	; 0xa8
 8001870:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001872:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001876:	2234      	movs	r2, #52	; 0x34
 8001878:	2100      	movs	r1, #0
 800187a:	4618      	mov	r0, r3
 800187c:	f005 fb4a 	bl	8006f14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001880:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001890:	f107 0308 	add.w	r3, r7, #8
 8001894:	2258      	movs	r2, #88	; 0x58
 8001896:	2100      	movs	r1, #0
 8001898:	4618      	mov	r0, r3
 800189a:	f005 fb3b 	bl	8006f14 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	4b35      	ldr	r3, [pc, #212]	; (8001978 <SystemClock_Config+0x10c>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	4a34      	ldr	r2, [pc, #208]	; (8001978 <SystemClock_Config+0x10c>)
 80018a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ac:	6413      	str	r3, [r2, #64]	; 0x40
 80018ae:	4b32      	ldr	r3, [pc, #200]	; (8001978 <SystemClock_Config+0x10c>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018ba:	2300      	movs	r3, #0
 80018bc:	603b      	str	r3, [r7, #0]
 80018be:	4b2f      	ldr	r3, [pc, #188]	; (800197c <SystemClock_Config+0x110>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a2e      	ldr	r2, [pc, #184]	; (800197c <SystemClock_Config+0x110>)
 80018c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	4b2c      	ldr	r3, [pc, #176]	; (800197c <SystemClock_Config+0x110>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018d2:	603b      	str	r3, [r7, #0]
 80018d4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018d6:	2301      	movs	r3, #1
 80018d8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80018da:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80018de:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e0:	2302      	movs	r3, #2
 80018e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018ee:	2308      	movs	r3, #8
 80018f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 384;
 80018f4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80018f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80018fc:	2304      	movs	r3, #4
 80018fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001902:	2308      	movs	r3, #8
 8001904:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001908:	2302      	movs	r3, #2
 800190a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800190e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001912:	4618      	mov	r0, r3
 8001914:	f002 fbca 	bl	80040ac <HAL_RCC_OscConfig>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800191e:	f000 f845 	bl	80019ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001922:	230f      	movs	r3, #15
 8001924:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001926:	2302      	movs	r3, #2
 8001928:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800192a:	2300      	movs	r3, #0
 800192c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800192e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001932:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001934:	2300      	movs	r3, #0
 8001936:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001938:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800193c:	2103      	movs	r1, #3
 800193e:	4618      	mov	r0, r3
 8001940:	f001 ff36 	bl	80037b0 <HAL_RCC_ClockConfig>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800194a:	f000 f82f 	bl	80019ac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800194e:	2360      	movs	r3, #96	; 0x60
 8001950:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001952:	2300      	movs	r3, #0
 8001954:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8001956:	2300      	movs	r3, #0
 8001958:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800195a:	f107 0308 	add.w	r3, r7, #8
 800195e:	4618      	mov	r0, r3
 8001960:	f002 f918 	bl	8003b94 <HAL_RCCEx_PeriphCLKConfig>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <SystemClock_Config+0x102>
  {
    Error_Handler();
 800196a:	f000 f81f 	bl	80019ac <Error_Handler>
  }
}
 800196e:	bf00      	nop
 8001970:	37a8      	adds	r7, #168	; 0xa8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800
 800197c:	40007000 	.word	0x40007000

08001980 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	adc_100us();
 8001988:	f7ff fb4c 	bl	8001024 <adc_100us>
	TrigHandler();
 800198c:	f7ff fc90 	bl	80012b0 <TrigHandler>
	DataHandler();
 8001990:	f7ff fe24 	bl	80015dc <DataHandler>
	Cnt_tim4++;
 8001994:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	3301      	adds	r3, #1
 800199a:	4a03      	ldr	r2, [pc, #12]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800199c:	6013      	str	r3, [r2, #0]
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000074 	.word	0x20000074

080019ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 80019c0:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <MX_SDIO_SD_Init+0x44>)
 80019c2:	4a10      	ldr	r2, [pc, #64]	; (8001a04 <MX_SDIO_SD_Init+0x48>)
 80019c4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80019c6:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <MX_SDIO_SD_Init+0x44>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <MX_SDIO_SD_Init+0x44>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <MX_SDIO_SD_Init+0x44>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <MX_SDIO_SD_Init+0x44>)
 80019da:	2200      	movs	r2, #0
 80019dc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80019de:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <MX_SDIO_SD_Init+0x44>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <MX_SDIO_SD_Init+0x44>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 80019ea:	4805      	ldr	r0, [pc, #20]	; (8001a00 <MX_SDIO_SD_Init+0x44>)
 80019ec:	f002 fda0 	bl	8004530 <HAL_SD_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 80019f6:	f7ff ffd9 	bl	80019ac <Error_Handler>
  }

}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	200160d4 	.word	0x200160d4
 8001a04:	40012c00 	.word	0x40012c00

08001a08 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08c      	sub	sp, #48	; 0x30
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 031c 	add.w	r3, r7, #28
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a38      	ldr	r2, [pc, #224]	; (8001b08 <HAL_SD_MspInit+0x100>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d169      	bne.n	8001afe <HAL_SD_MspInit+0xf6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61bb      	str	r3, [r7, #24]
 8001a2e:	4b37      	ldr	r3, [pc, #220]	; (8001b0c <HAL_SD_MspInit+0x104>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	4a36      	ldr	r2, [pc, #216]	; (8001b0c <HAL_SD_MspInit+0x104>)
 8001a34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a38:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3a:	4b34      	ldr	r3, [pc, #208]	; (8001b0c <HAL_SD_MspInit+0x104>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a42:	61bb      	str	r3, [r7, #24]
 8001a44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	4b30      	ldr	r3, [pc, #192]	; (8001b0c <HAL_SD_MspInit+0x104>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a2f      	ldr	r2, [pc, #188]	; (8001b0c <HAL_SD_MspInit+0x104>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b2d      	ldr	r3, [pc, #180]	; (8001b0c <HAL_SD_MspInit+0x104>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	4b29      	ldr	r3, [pc, #164]	; (8001b0c <HAL_SD_MspInit+0x104>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a28      	ldr	r2, [pc, #160]	; (8001b0c <HAL_SD_MspInit+0x104>)
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b26      	ldr	r3, [pc, #152]	; (8001b0c <HAL_SD_MspInit+0x104>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <HAL_SD_MspInit+0x104>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a21      	ldr	r2, [pc, #132]	; (8001b0c <HAL_SD_MspInit+0x104>)
 8001a88:	f043 0304 	orr.w	r3, r3, #4
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b1f      	ldr	r3, [pc, #124]	; (8001b0c <HAL_SD_MspInit+0x104>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0304 	and.w	r3, r3, #4
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PA6     ------> SDIO_CMD
    PB15     ------> SDIO_CK
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a9a:	2340      	movs	r3, #64	; 0x40
 8001a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001aaa:	230c      	movs	r3, #12
 8001aac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aae:	f107 031c 	add.w	r3, r7, #28
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4816      	ldr	r0, [pc, #88]	; (8001b10 <HAL_SD_MspInit+0x108>)
 8001ab6:	f001 fb6f 	bl	8003198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001acc:	230c      	movs	r3, #12
 8001ace:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad0:	f107 031c 	add.w	r3, r7, #28
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	480f      	ldr	r0, [pc, #60]	; (8001b14 <HAL_SD_MspInit+0x10c>)
 8001ad8:	f001 fb5e 	bl	8003198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001adc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aea:	2303      	movs	r3, #3
 8001aec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001aee:	230c      	movs	r3, #12
 8001af0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af2:	f107 031c 	add.w	r3, r7, #28
 8001af6:	4619      	mov	r1, r3
 8001af8:	4807      	ldr	r0, [pc, #28]	; (8001b18 <HAL_SD_MspInit+0x110>)
 8001afa:	f001 fb4d 	bl	8003198 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001afe:	bf00      	nop
 8001b00:	3730      	adds	r7, #48	; 0x30
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40012c00 	.word	0x40012c00
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40020000 	.word	0x40020000
 8001b14:	40020400 	.word	0x40020400
 8001b18:	40020800 	.word	0x40020800

08001b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <HAL_MspInit+0x4c>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	4a0f      	ldr	r2, [pc, #60]	; (8001b68 <HAL_MspInit+0x4c>)
 8001b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b30:	6453      	str	r3, [r2, #68]	; 0x44
 8001b32:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <HAL_MspInit+0x4c>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	603b      	str	r3, [r7, #0]
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <HAL_MspInit+0x4c>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	4a08      	ldr	r2, [pc, #32]	; (8001b68 <HAL_MspInit+0x4c>)
 8001b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_MspInit+0x4c>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b56:	603b      	str	r3, [r7, #0]
 8001b58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800

08001b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <HardFault_Handler+0x4>

08001b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <MemManage_Handler+0x4>

08001b86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b8a:	e7fe      	b.n	8001b8a <BusFault_Handler+0x4>

08001b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <UsageFault_Handler+0x4>

08001b92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc0:	f000 fa2a 	bl	8002018 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001bcc:	4802      	ldr	r0, [pc, #8]	; (8001bd8 <TIM4_IRQHandler+0x10>)
 8001bce:	f003 f88e 	bl	8004cee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20016158 	.word	0x20016158

08001bdc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001be0:	4802      	ldr	r0, [pc, #8]	; (8001bec <USART3_IRQHandler+0x10>)
 8001be2:	f003 fd1d 	bl	8005620 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20016198 	.word	0x20016198

08001bf0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <DMA2_Stream0_IRQHandler+0x10>)
 8001bf6:	f001 f867 	bl	8002cc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200000c4 	.word	0x200000c4

08001c04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <SystemInit+0x28>)
 8001c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c0e:	4a07      	ldr	r2, [pc, #28]	; (8001c2c <SystemInit+0x28>)
 8001c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c18:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <SystemInit+0x28>)
 8001c1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c1e:	609a      	str	r2, [r3, #8]
#endif
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c36:	f107 0308 	add.w	r3, r7, #8
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
 8001c40:	609a      	str	r2, [r3, #8]
 8001c42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c44:	463b      	mov	r3, r7
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8001c4c:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <MX_TIM4_Init+0x90>)
 8001c4e:	4a1d      	ldr	r2, [pc, #116]	; (8001cc4 <MX_TIM4_Init+0x94>)
 8001c50:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 96;
 8001c52:	4b1b      	ldr	r3, [pc, #108]	; (8001cc0 <MX_TIM4_Init+0x90>)
 8001c54:	2260      	movs	r2, #96	; 0x60
 8001c56:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c58:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <MX_TIM4_Init+0x90>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8001c5e:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <MX_TIM4_Init+0x90>)
 8001c60:	2264      	movs	r2, #100	; 0x64
 8001c62:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c64:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <MX_TIM4_Init+0x90>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c6a:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <MX_TIM4_Init+0x90>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c70:	4813      	ldr	r0, [pc, #76]	; (8001cc0 <MX_TIM4_Init+0x90>)
 8001c72:	f002 ffed 	bl	8004c50 <HAL_TIM_Base_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8001c7c:	f7ff fe96 	bl	80019ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c86:	f107 0308 	add.w	r3, r7, #8
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	480c      	ldr	r0, [pc, #48]	; (8001cc0 <MX_TIM4_Init+0x90>)
 8001c8e:	f003 f936 	bl	8004efe <HAL_TIM_ConfigClockSource>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8001c98:	f7ff fe88 	bl	80019ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ca4:	463b      	mov	r3, r7
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4805      	ldr	r0, [pc, #20]	; (8001cc0 <MX_TIM4_Init+0x90>)
 8001caa:	f003 fb41 	bl	8005330 <HAL_TIMEx_MasterConfigSynchronization>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001cb4:	f7ff fe7a 	bl	80019ac <Error_Handler>
  }

}
 8001cb8:	bf00      	nop
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20016158 	.word	0x20016158
 8001cc4:	40000800 	.word	0x40000800

08001cc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a0e      	ldr	r2, [pc, #56]	; (8001d10 <HAL_TIM_Base_MspInit+0x48>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d115      	bne.n	8001d06 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <HAL_TIM_Base_MspInit+0x4c>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	4a0c      	ldr	r2, [pc, #48]	; (8001d14 <HAL_TIM_Base_MspInit+0x4c>)
 8001ce4:	f043 0304 	orr.w	r3, r3, #4
 8001ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cea:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <HAL_TIM_Base_MspInit+0x4c>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	201e      	movs	r0, #30
 8001cfc:	f000 fe85 	bl	8002a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d00:	201e      	movs	r0, #30
 8001d02:	f000 fe9e 	bl	8002a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001d06:	bf00      	nop
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40000800 	.word	0x40000800
 8001d14:	40023800 	.word	0x40023800

08001d18 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <MX_USART3_UART_Init+0x4c>)
 8001d1e:	4a12      	ldr	r2, [pc, #72]	; (8001d68 <MX_USART3_UART_Init+0x50>)
 8001d20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d22:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <MX_USART3_UART_Init+0x4c>)
 8001d24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <MX_USART3_UART_Init+0x4c>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <MX_USART3_UART_Init+0x4c>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d36:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <MX_USART3_UART_Init+0x4c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <MX_USART3_UART_Init+0x4c>)
 8001d3e:	220c      	movs	r2, #12
 8001d40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d42:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <MX_USART3_UART_Init+0x4c>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <MX_USART3_UART_Init+0x4c>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d4e:	4805      	ldr	r0, [pc, #20]	; (8001d64 <MX_USART3_UART_Init+0x4c>)
 8001d50:	f003 fb7e 	bl	8005450 <HAL_UART_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001d5a:	f7ff fe27 	bl	80019ac <Error_Handler>
  }

}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20016198 	.word	0x20016198
 8001d68:	40004800 	.word	0x40004800

08001d6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a1d      	ldr	r2, [pc, #116]	; (8001e00 <HAL_UART_MspInit+0x94>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d134      	bne.n	8001df8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	4b1c      	ldr	r3, [pc, #112]	; (8001e04 <HAL_UART_MspInit+0x98>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	4a1b      	ldr	r2, [pc, #108]	; (8001e04 <HAL_UART_MspInit+0x98>)
 8001d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9e:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <HAL_UART_MspInit+0x98>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <HAL_UART_MspInit+0x98>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a14      	ldr	r2, [pc, #80]	; (8001e04 <HAL_UART_MspInit+0x98>)
 8001db4:	f043 0308 	orr.w	r3, r3, #8
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <HAL_UART_MspInit+0x98>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001dd8:	2307      	movs	r3, #7
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	4619      	mov	r1, r3
 8001de2:	4809      	ldr	r0, [pc, #36]	; (8001e08 <HAL_UART_MspInit+0x9c>)
 8001de4:	f001 f9d8 	bl	8003198 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001de8:	2200      	movs	r2, #0
 8001dea:	2100      	movs	r1, #0
 8001dec:	2027      	movs	r0, #39	; 0x27
 8001dee:	f000 fe0c 	bl	8002a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001df2:	2027      	movs	r0, #39	; 0x27
 8001df4:	f000 fe25 	bl	8002a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001df8:	bf00      	nop
 8001dfa:	3728      	adds	r7, #40	; 0x28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40004800 	.word	0x40004800
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40020c00 	.word	0x40020c00

08001e0c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001e10:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e12:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001e16:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001e18:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e1a:	2206      	movs	r2, #6
 8001e1c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001e1e:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e20:	2202      	movs	r2, #2
 8001e22:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001e24:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001e2a:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001e30:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001e36:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001e42:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001e48:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001e4e:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001e54:	4804      	ldr	r0, [pc, #16]	; (8001e68 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e56:	f001 fb62 	bl	800351e <HAL_PCD_Init>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 8001e60:	f7ff fda4 	bl	80019ac <Error_Handler>
  }

}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	200161d8 	.word	0x200161d8

08001e6c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08a      	sub	sp, #40	; 0x28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e8c:	d13f      	bne.n	8001f0e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	4b21      	ldr	r3, [pc, #132]	; (8001f18 <HAL_PCD_MspInit+0xac>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a20      	ldr	r2, [pc, #128]	; (8001f18 <HAL_PCD_MspInit+0xac>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b1e      	ldr	r3, [pc, #120]	; (8001f18 <HAL_PCD_MspInit+0xac>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001eaa:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ebc:	230a      	movs	r3, #10
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4815      	ldr	r0, [pc, #84]	; (8001f1c <HAL_PCD_MspInit+0xb0>)
 8001ec8:	f001 f966 	bl	8003198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ecc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eda:	f107 0314 	add.w	r3, r7, #20
 8001ede:	4619      	mov	r1, r3
 8001ee0:	480e      	ldr	r0, [pc, #56]	; (8001f1c <HAL_PCD_MspInit+0xb0>)
 8001ee2:	f001 f959 	bl	8003198 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ee6:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <HAL_PCD_MspInit+0xac>)
 8001ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eea:	4a0b      	ldr	r2, [pc, #44]	; (8001f18 <HAL_PCD_MspInit+0xac>)
 8001eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ef0:	6353      	str	r3, [r2, #52]	; 0x34
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <HAL_PCD_MspInit+0xac>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	4a07      	ldr	r2, [pc, #28]	; (8001f18 <HAL_PCD_MspInit+0xac>)
 8001efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f00:	6453      	str	r3, [r2, #68]	; 0x44
 8001f02:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <HAL_PCD_MspInit+0xac>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001f0e:	bf00      	nop
 8001f10:	3728      	adds	r7, #40	; 0x28
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40020000 	.word	0x40020000

08001f20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001f20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f58 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001f24:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f26:	e003      	b.n	8001f30 <LoopCopyDataInit>

08001f28 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f2a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f2c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f2e:	3104      	adds	r1, #4

08001f30 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f30:	480b      	ldr	r0, [pc, #44]	; (8001f60 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f32:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f34:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f36:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f38:	d3f6      	bcc.n	8001f28 <CopyDataInit>
  ldr  r2, =_sbss
 8001f3a:	4a0b      	ldr	r2, [pc, #44]	; (8001f68 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f3c:	e002      	b.n	8001f44 <LoopFillZerobss>

08001f3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001f3e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f40:	f842 3b04 	str.w	r3, [r2], #4

08001f44 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f44:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f46:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f48:	d3f9      	bcc.n	8001f3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f4a:	f7ff fe5b 	bl	8001c04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f4e:	f004 ffbd 	bl	8006ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f52:	f7ff fc57 	bl	8001804 <main>
  bx  lr    
 8001f56:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001f58:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001f5c:	08006f6c 	.word	0x08006f6c
  ldr  r0, =_sdata
 8001f60:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f64:	2000002c 	.word	0x2000002c
  ldr  r2, =_sbss
 8001f68:	2000002c 	.word	0x2000002c
  ldr  r3, = _ebss
 8001f6c:	200165e4 	.word	0x200165e4

08001f70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f70:	e7fe      	b.n	8001f70 <ADC_IRQHandler>
	...

08001f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f78:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <HAL_Init+0x40>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a0d      	ldr	r2, [pc, #52]	; (8001fb4 <HAL_Init+0x40>)
 8001f7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f84:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <HAL_Init+0x40>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a0a      	ldr	r2, [pc, #40]	; (8001fb4 <HAL_Init+0x40>)
 8001f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f90:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <HAL_Init+0x40>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a07      	ldr	r2, [pc, #28]	; (8001fb4 <HAL_Init+0x40>)
 8001f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f9c:	2003      	movs	r0, #3
 8001f9e:	f000 fd29 	bl	80029f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f000 f808 	bl	8001fb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fa8:	f7ff fdb8 	bl	8001b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40023c00 	.word	0x40023c00

08001fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fc0:	4b12      	ldr	r3, [pc, #72]	; (800200c <HAL_InitTick+0x54>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	4b12      	ldr	r3, [pc, #72]	; (8002010 <HAL_InitTick+0x58>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 fd41 	bl	8002a5e <HAL_SYSTICK_Config>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e00e      	b.n	8002004 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b0f      	cmp	r3, #15
 8001fea:	d80a      	bhi.n	8002002 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fec:	2200      	movs	r2, #0
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff4:	f000 fd09 	bl	8002a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ff8:	4a06      	ldr	r2, [pc, #24]	; (8002014 <HAL_InitTick+0x5c>)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
 8002000:	e000      	b.n	8002004 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
}
 8002004:	4618      	mov	r0, r3
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	20000020 	.word	0x20000020
 8002010:	20000028 	.word	0x20000028
 8002014:	20000024 	.word	0x20000024

08002018 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <HAL_IncTick+0x20>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	461a      	mov	r2, r3
 8002022:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_IncTick+0x24>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4413      	add	r3, r2
 8002028:	4a04      	ldr	r2, [pc, #16]	; (800203c <HAL_IncTick+0x24>)
 800202a:	6013      	str	r3, [r2, #0]
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	20000028 	.word	0x20000028
 800203c:	200165e0 	.word	0x200165e0

08002040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  return uwTick;
 8002044:	4b03      	ldr	r3, [pc, #12]	; (8002054 <HAL_GetTick+0x14>)
 8002046:	681b      	ldr	r3, [r3, #0]
}
 8002048:	4618      	mov	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	200165e0 	.word	0x200165e0

08002058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002060:	f7ff ffee 	bl	8002040 <HAL_GetTick>
 8002064:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002070:	d005      	beq.n	800207e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <HAL_Delay+0x40>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4413      	add	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800207e:	bf00      	nop
 8002080:	f7ff ffde 	bl	8002040 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	429a      	cmp	r2, r3
 800208e:	d8f7      	bhi.n	8002080 <HAL_Delay+0x28>
  {
  }
}
 8002090:	bf00      	nop
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20000028 	.word	0x20000028

0800209c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e033      	b.n	800211a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d109      	bne.n	80020ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7fe fee6 	bl	8000e8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f003 0310 	and.w	r3, r3, #16
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d118      	bne.n	800210c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020e2:	f023 0302 	bic.w	r3, r3, #2
 80020e6:	f043 0202 	orr.w	r2, r3, #2
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 fa32 	bl	8002558 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f023 0303 	bic.w	r3, r3, #3
 8002102:	f043 0201 	orr.w	r2, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	641a      	str	r2, [r3, #64]	; 0x40
 800210a:	e001      	b.n	8002110 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002118:	7bfb      	ldrb	r3, [r7, #15]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002130:	2300      	movs	r3, #0
 8002132:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800213a:	2b01      	cmp	r3, #1
 800213c:	d101      	bne.n	8002142 <HAL_ADC_Start_DMA+0x1e>
 800213e:	2302      	movs	r3, #2
 8002140:	e0b1      	b.n	80022a6 <HAL_ADC_Start_DMA+0x182>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b01      	cmp	r3, #1
 8002156:	d018      	beq.n	800218a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0201 	orr.w	r2, r2, #1
 8002166:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002168:	4b51      	ldr	r3, [pc, #324]	; (80022b0 <HAL_ADC_Start_DMA+0x18c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a51      	ldr	r2, [pc, #324]	; (80022b4 <HAL_ADC_Start_DMA+0x190>)
 800216e:	fba2 2303 	umull	r2, r3, r2, r3
 8002172:	0c9a      	lsrs	r2, r3, #18
 8002174:	4613      	mov	r3, r2
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	4413      	add	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800217c:	e002      	b.n	8002184 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	3b01      	subs	r3, #1
 8002182:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f9      	bne.n	800217e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b01      	cmp	r3, #1
 8002196:	f040 8085 	bne.w	80022a4 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80021a2:	f023 0301 	bic.w	r3, r3, #1
 80021a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d007      	beq.n	80021cc <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021d8:	d106      	bne.n	80021e8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021de:	f023 0206 	bic.w	r2, r3, #6
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	645a      	str	r2, [r3, #68]	; 0x44
 80021e6:	e002      	b.n	80021ee <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021f6:	4b30      	ldr	r3, [pc, #192]	; (80022b8 <HAL_ADC_Start_DMA+0x194>)
 80021f8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fe:	4a2f      	ldr	r2, [pc, #188]	; (80022bc <HAL_ADC_Start_DMA+0x198>)
 8002200:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002206:	4a2e      	ldr	r2, [pc, #184]	; (80022c0 <HAL_ADC_Start_DMA+0x19c>)
 8002208:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220e:	4a2d      	ldr	r2, [pc, #180]	; (80022c4 <HAL_ADC_Start_DMA+0x1a0>)
 8002210:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800221a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800222a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800223a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	334c      	adds	r3, #76	; 0x4c
 8002246:	4619      	mov	r1, r3
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f000 fcc2 	bl	8002bd4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 031f 	and.w	r3, r3, #31
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10f      	bne.n	800227c <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d11c      	bne.n	80022a4 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002278:	609a      	str	r2, [r3, #8]
 800227a:	e013      	b.n	80022a4 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a11      	ldr	r2, [pc, #68]	; (80022c8 <HAL_ADC_Start_DMA+0x1a4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d10e      	bne.n	80022a4 <HAL_ADC_Start_DMA+0x180>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d107      	bne.n	80022a4 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022a2:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20000020 	.word	0x20000020
 80022b4:	431bde83 	.word	0x431bde83
 80022b8:	40012300 	.word	0x40012300
 80022bc:	08002751 	.word	0x08002751
 80022c0:	0800280b 	.word	0x0800280b
 80022c4:	08002827 	.word	0x08002827
 80022c8:	40012000 	.word	0x40012000

080022cc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022fe:	2300      	movs	r3, #0
 8002300:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002308:	2b01      	cmp	r3, #1
 800230a:	d101      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x1c>
 800230c:	2302      	movs	r3, #2
 800230e:	e113      	b.n	8002538 <HAL_ADC_ConfigChannel+0x244>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b09      	cmp	r3, #9
 800231e:	d925      	bls.n	800236c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68d9      	ldr	r1, [r3, #12]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	b29b      	uxth	r3, r3
 800232c:	461a      	mov	r2, r3
 800232e:	4613      	mov	r3, r2
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	4413      	add	r3, r2
 8002334:	3b1e      	subs	r3, #30
 8002336:	2207      	movs	r2, #7
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43da      	mvns	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	400a      	ands	r2, r1
 8002344:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68d9      	ldr	r1, [r3, #12]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	b29b      	uxth	r3, r3
 8002356:	4618      	mov	r0, r3
 8002358:	4603      	mov	r3, r0
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	4403      	add	r3, r0
 800235e:	3b1e      	subs	r3, #30
 8002360:	409a      	lsls	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	60da      	str	r2, [r3, #12]
 800236a:	e022      	b.n	80023b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6919      	ldr	r1, [r3, #16]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	b29b      	uxth	r3, r3
 8002378:	461a      	mov	r2, r3
 800237a:	4613      	mov	r3, r2
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	4413      	add	r3, r2
 8002380:	2207      	movs	r2, #7
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43da      	mvns	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	400a      	ands	r2, r1
 800238e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6919      	ldr	r1, [r3, #16]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	b29b      	uxth	r3, r3
 80023a0:	4618      	mov	r0, r3
 80023a2:	4603      	mov	r3, r0
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	4403      	add	r3, r0
 80023a8:	409a      	lsls	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b06      	cmp	r3, #6
 80023b8:	d824      	bhi.n	8002404 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	3b05      	subs	r3, #5
 80023cc:	221f      	movs	r2, #31
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43da      	mvns	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	400a      	ands	r2, r1
 80023da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	4618      	mov	r0, r3
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	3b05      	subs	r3, #5
 80023f6:	fa00 f203 	lsl.w	r2, r0, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	635a      	str	r2, [r3, #52]	; 0x34
 8002402:	e04c      	b.n	800249e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b0c      	cmp	r3, #12
 800240a:	d824      	bhi.n	8002456 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	3b23      	subs	r3, #35	; 0x23
 800241e:	221f      	movs	r2, #31
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43da      	mvns	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	400a      	ands	r2, r1
 800242c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	b29b      	uxth	r3, r3
 800243a:	4618      	mov	r0, r3
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	3b23      	subs	r3, #35	; 0x23
 8002448:	fa00 f203 	lsl.w	r2, r0, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	631a      	str	r2, [r3, #48]	; 0x30
 8002454:	e023      	b.n	800249e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	3b41      	subs	r3, #65	; 0x41
 8002468:	221f      	movs	r2, #31
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43da      	mvns	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	400a      	ands	r2, r1
 8002476:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	b29b      	uxth	r3, r3
 8002484:	4618      	mov	r0, r3
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	3b41      	subs	r3, #65	; 0x41
 8002492:	fa00 f203 	lsl.w	r2, r0, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800249e:	4b29      	ldr	r3, [pc, #164]	; (8002544 <HAL_ADC_ConfigChannel+0x250>)
 80024a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a28      	ldr	r2, [pc, #160]	; (8002548 <HAL_ADC_ConfigChannel+0x254>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d10f      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x1d8>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b12      	cmp	r3, #18
 80024b2:	d10b      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a1d      	ldr	r2, [pc, #116]	; (8002548 <HAL_ADC_ConfigChannel+0x254>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d12b      	bne.n	800252e <HAL_ADC_ConfigChannel+0x23a>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a1c      	ldr	r2, [pc, #112]	; (800254c <HAL_ADC_ConfigChannel+0x258>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d003      	beq.n	80024e8 <HAL_ADC_ConfigChannel+0x1f4>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b11      	cmp	r3, #17
 80024e6:	d122      	bne.n	800252e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a11      	ldr	r2, [pc, #68]	; (800254c <HAL_ADC_ConfigChannel+0x258>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d111      	bne.n	800252e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800250a:	4b11      	ldr	r3, [pc, #68]	; (8002550 <HAL_ADC_ConfigChannel+0x25c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a11      	ldr	r2, [pc, #68]	; (8002554 <HAL_ADC_ConfigChannel+0x260>)
 8002510:	fba2 2303 	umull	r2, r3, r2, r3
 8002514:	0c9a      	lsrs	r2, r3, #18
 8002516:	4613      	mov	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002520:	e002      	b.n	8002528 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	3b01      	subs	r3, #1
 8002526:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f9      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	40012300 	.word	0x40012300
 8002548:	40012000 	.word	0x40012000
 800254c:	10000012 	.word	0x10000012
 8002550:	20000020 	.word	0x20000020
 8002554:	431bde83 	.word	0x431bde83

08002558 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002560:	4b79      	ldr	r3, [pc, #484]	; (8002748 <ADC_Init+0x1f0>)
 8002562:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	431a      	orrs	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800258c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6859      	ldr	r1, [r3, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	021a      	lsls	r2, r3, #8
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80025b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6859      	ldr	r1, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6899      	ldr	r1, [r3, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ea:	4a58      	ldr	r2, [pc, #352]	; (800274c <ADC_Init+0x1f4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d022      	beq.n	8002636 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6899      	ldr	r1, [r3, #8]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002620:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6899      	ldr	r1, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	e00f      	b.n	8002656 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002644:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002654:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 0202 	bic.w	r2, r2, #2
 8002664:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6899      	ldr	r1, [r3, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	7e1b      	ldrb	r3, [r3, #24]
 8002670:	005a      	lsls	r2, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d01b      	beq.n	80026bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002692:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80026a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6859      	ldr	r1, [r3, #4]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	3b01      	subs	r3, #1
 80026b0:	035a      	lsls	r2, r3, #13
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	e007      	b.n	80026cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80026da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	051a      	lsls	r2, r3, #20
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002700:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6899      	ldr	r1, [r3, #8]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800270e:	025a      	lsls	r2, r3, #9
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002726:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6899      	ldr	r1, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	029a      	lsls	r2, r3, #10
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	609a      	str	r2, [r3, #8]
}
 800273c:	bf00      	nop
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	40012300 	.word	0x40012300
 800274c:	0f000001 	.word	0x0f000001

08002750 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002766:	2b00      	cmp	r3, #0
 8002768:	d13c      	bne.n	80027e4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d12b      	bne.n	80027dc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002788:	2b00      	cmp	r3, #0
 800278a:	d127      	bne.n	80027dc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002792:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002796:	2b00      	cmp	r3, #0
 8002798:	d006      	beq.n	80027a8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d119      	bne.n	80027dc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0220 	bic.w	r2, r2, #32
 80027b6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d105      	bne.n	80027dc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	f043 0201 	orr.w	r2, r3, #1
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f7fe fbe9 	bl	8000fb4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80027e2:	e00e      	b.n	8002802 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	f003 0310 	and.w	r3, r3, #16
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f7ff fd75 	bl	80022e0 <HAL_ADC_ErrorCallback>
}
 80027f6:	e004      	b.n	8002802 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	4798      	blx	r3
}
 8002802:	bf00      	nop
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b084      	sub	sp, #16
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002816:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f7ff fd57 	bl	80022cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800281e:	bf00      	nop
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b084      	sub	sp, #16
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002832:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2240      	movs	r2, #64	; 0x40
 8002838:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	f043 0204 	orr.w	r2, r3, #4
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f7ff fd4a 	bl	80022e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800284c:	bf00      	nop
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <__NVIC_SetPriorityGrouping+0x44>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002870:	4013      	ands	r3, r2
 8002872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800287c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002886:	4a04      	ldr	r2, [pc, #16]	; (8002898 <__NVIC_SetPriorityGrouping+0x44>)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	60d3      	str	r3, [r2, #12]
}
 800288c:	bf00      	nop
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	e000ed00 	.word	0xe000ed00

0800289c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028a0:	4b04      	ldr	r3, [pc, #16]	; (80028b4 <__NVIC_GetPriorityGrouping+0x18>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	0a1b      	lsrs	r3, r3, #8
 80028a6:	f003 0307 	and.w	r3, r3, #7
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	db0b      	blt.n	80028e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	f003 021f 	and.w	r2, r3, #31
 80028d0:	4907      	ldr	r1, [pc, #28]	; (80028f0 <__NVIC_EnableIRQ+0x38>)
 80028d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	2001      	movs	r0, #1
 80028da:	fa00 f202 	lsl.w	r2, r0, r2
 80028de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	e000e100 	.word	0xe000e100

080028f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	6039      	str	r1, [r7, #0]
 80028fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002904:	2b00      	cmp	r3, #0
 8002906:	db0a      	blt.n	800291e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	b2da      	uxtb	r2, r3
 800290c:	490c      	ldr	r1, [pc, #48]	; (8002940 <__NVIC_SetPriority+0x4c>)
 800290e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002912:	0112      	lsls	r2, r2, #4
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	440b      	add	r3, r1
 8002918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800291c:	e00a      	b.n	8002934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	b2da      	uxtb	r2, r3
 8002922:	4908      	ldr	r1, [pc, #32]	; (8002944 <__NVIC_SetPriority+0x50>)
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	3b04      	subs	r3, #4
 800292c:	0112      	lsls	r2, r2, #4
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	440b      	add	r3, r1
 8002932:	761a      	strb	r2, [r3, #24]
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	e000e100 	.word	0xe000e100
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002948:	b480      	push	{r7}
 800294a:	b089      	sub	sp, #36	; 0x24
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f1c3 0307 	rsb	r3, r3, #7
 8002962:	2b04      	cmp	r3, #4
 8002964:	bf28      	it	cs
 8002966:	2304      	movcs	r3, #4
 8002968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3304      	adds	r3, #4
 800296e:	2b06      	cmp	r3, #6
 8002970:	d902      	bls.n	8002978 <NVIC_EncodePriority+0x30>
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	3b03      	subs	r3, #3
 8002976:	e000      	b.n	800297a <NVIC_EncodePriority+0x32>
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800297c:	f04f 32ff 	mov.w	r2, #4294967295
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43da      	mvns	r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	401a      	ands	r2, r3
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002990:	f04f 31ff 	mov.w	r1, #4294967295
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	fa01 f303 	lsl.w	r3, r1, r3
 800299a:	43d9      	mvns	r1, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a0:	4313      	orrs	r3, r2
         );
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3724      	adds	r7, #36	; 0x24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
	...

080029b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029c0:	d301      	bcc.n	80029c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029c2:	2301      	movs	r3, #1
 80029c4:	e00f      	b.n	80029e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029c6:	4a0a      	ldr	r2, [pc, #40]	; (80029f0 <SysTick_Config+0x40>)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ce:	210f      	movs	r1, #15
 80029d0:	f04f 30ff 	mov.w	r0, #4294967295
 80029d4:	f7ff ff8e 	bl	80028f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029d8:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <SysTick_Config+0x40>)
 80029da:	2200      	movs	r2, #0
 80029dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029de:	4b04      	ldr	r3, [pc, #16]	; (80029f0 <SysTick_Config+0x40>)
 80029e0:	2207      	movs	r2, #7
 80029e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	e000e010 	.word	0xe000e010

080029f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7ff ff29 	bl	8002854 <__NVIC_SetPriorityGrouping>
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b086      	sub	sp, #24
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	4603      	mov	r3, r0
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
 8002a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a1c:	f7ff ff3e 	bl	800289c <__NVIC_GetPriorityGrouping>
 8002a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	68b9      	ldr	r1, [r7, #8]
 8002a26:	6978      	ldr	r0, [r7, #20]
 8002a28:	f7ff ff8e 	bl	8002948 <NVIC_EncodePriority>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a32:	4611      	mov	r1, r2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff ff5d 	bl	80028f4 <__NVIC_SetPriority>
}
 8002a3a:	bf00      	nop
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	4603      	mov	r3, r0
 8002a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff ff31 	bl	80028b8 <__NVIC_EnableIRQ>
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7ff ffa2 	bl	80029b0 <SysTick_Config>
 8002a6c:	4603      	mov	r3, r0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
	...

08002a78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a84:	f7ff fadc 	bl	8002040 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e099      	b.n	8002bc8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0201 	bic.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ab4:	e00f      	b.n	8002ad6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ab6:	f7ff fac3 	bl	8002040 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b05      	cmp	r3, #5
 8002ac2:	d908      	bls.n	8002ad6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2203      	movs	r2, #3
 8002ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e078      	b.n	8002bc8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1e8      	bne.n	8002ab6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	4b38      	ldr	r3, [pc, #224]	; (8002bd0 <HAL_DMA_Init+0x158>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d107      	bne.n	8002b40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f023 0307 	bic.w	r3, r3, #7
 8002b56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d117      	bne.n	8002b9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00e      	beq.n	8002b9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 fa91 	bl	80030a4 <DMA_CheckFifoParam>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2240      	movs	r2, #64	; 0x40
 8002b8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b96:	2301      	movs	r3, #1
 8002b98:	e016      	b.n	8002bc8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 fa48 	bl	8003038 <DMA_CalcBaseAndBitshift>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb0:	223f      	movs	r2, #63	; 0x3f
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	e010803f 	.word	0xe010803f

08002bd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
 8002be0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002be2:	2300      	movs	r3, #0
 8002be4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d101      	bne.n	8002bfa <HAL_DMA_Start_IT+0x26>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e040      	b.n	8002c7c <HAL_DMA_Start_IT+0xa8>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d12f      	bne.n	8002c6e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2202      	movs	r2, #2
 8002c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	68b9      	ldr	r1, [r7, #8]
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f9da 	bl	8002fdc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2c:	223f      	movs	r2, #63	; 0x3f
 8002c2e:	409a      	lsls	r2, r3
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0216 	orr.w	r2, r2, #22
 8002c42:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d007      	beq.n	8002c5c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0208 	orr.w	r2, r2, #8
 8002c5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0201 	orr.w	r2, r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	e005      	b.n	8002c7a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c76:	2302      	movs	r3, #2
 8002c78:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d004      	beq.n	8002ca2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2280      	movs	r2, #128	; 0x80
 8002c9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e00c      	b.n	8002cbc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2205      	movs	r2, #5
 8002ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0201 	bic.w	r2, r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cd4:	4b92      	ldr	r3, [pc, #584]	; (8002f20 <HAL_DMA_IRQHandler+0x258>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a92      	ldr	r2, [pc, #584]	; (8002f24 <HAL_DMA_IRQHandler+0x25c>)
 8002cda:	fba2 2303 	umull	r2, r3, r2, r3
 8002cde:	0a9b      	lsrs	r3, r3, #10
 8002ce0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf2:	2208      	movs	r2, #8
 8002cf4:	409a      	lsls	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d01a      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d013      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0204 	bic.w	r2, r2, #4
 8002d1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d20:	2208      	movs	r2, #8
 8002d22:	409a      	lsls	r2, r3
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2c:	f043 0201 	orr.w	r2, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d38:	2201      	movs	r2, #1
 8002d3a:	409a      	lsls	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d012      	beq.n	8002d6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00b      	beq.n	8002d6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d56:	2201      	movs	r2, #1
 8002d58:	409a      	lsls	r2, r3
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d62:	f043 0202 	orr.w	r2, r3, #2
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6e:	2204      	movs	r2, #4
 8002d70:	409a      	lsls	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	4013      	ands	r3, r2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d012      	beq.n	8002da0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00b      	beq.n	8002da0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8c:	2204      	movs	r2, #4
 8002d8e:	409a      	lsls	r2, r3
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d98:	f043 0204 	orr.w	r2, r3, #4
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da4:	2210      	movs	r2, #16
 8002da6:	409a      	lsls	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4013      	ands	r3, r2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d043      	beq.n	8002e38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d03c      	beq.n	8002e38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc2:	2210      	movs	r2, #16
 8002dc4:	409a      	lsls	r2, r3
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d018      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d108      	bne.n	8002df8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d024      	beq.n	8002e38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	4798      	blx	r3
 8002df6:	e01f      	b.n	8002e38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d01b      	beq.n	8002e38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	4798      	blx	r3
 8002e08:	e016      	b.n	8002e38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d107      	bne.n	8002e28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0208 	bic.w	r2, r2, #8
 8002e26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	409a      	lsls	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4013      	ands	r3, r2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 808e 	beq.w	8002f66 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0310 	and.w	r3, r3, #16
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 8086 	beq.w	8002f66 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5e:	2220      	movs	r2, #32
 8002e60:	409a      	lsls	r2, r3
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b05      	cmp	r3, #5
 8002e70:	d136      	bne.n	8002ee0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0216 	bic.w	r2, r2, #22
 8002e80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	695a      	ldr	r2, [r3, #20]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d103      	bne.n	8002ea2 <HAL_DMA_IRQHandler+0x1da>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d007      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0208 	bic.w	r2, r2, #8
 8002eb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb6:	223f      	movs	r2, #63	; 0x3f
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d07d      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	4798      	blx	r3
        }
        return;
 8002ede:	e078      	b.n	8002fd2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d01c      	beq.n	8002f28 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d108      	bne.n	8002f0e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d030      	beq.n	8002f66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	4798      	blx	r3
 8002f0c:	e02b      	b.n	8002f66 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d027      	beq.n	8002f66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	4798      	blx	r3
 8002f1e:	e022      	b.n	8002f66 <HAL_DMA_IRQHandler+0x29e>
 8002f20:	20000020 	.word	0x20000020
 8002f24:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10f      	bne.n	8002f56 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0210 	bic.w	r2, r2, #16
 8002f44:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d032      	beq.n	8002fd4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d022      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2205      	movs	r2, #5
 8002f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0201 	bic.w	r2, r2, #1
 8002f90:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	3301      	adds	r3, #1
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d307      	bcc.n	8002fae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1f2      	bne.n	8002f92 <HAL_DMA_IRQHandler+0x2ca>
 8002fac:	e000      	b.n	8002fb0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002fae:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d005      	beq.n	8002fd4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	4798      	blx	r3
 8002fd0:	e000      	b.n	8002fd4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002fd2:	bf00      	nop
    }
  }
}
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop

08002fdc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
 8002fe8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ff8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2b40      	cmp	r3, #64	; 0x40
 8003008:	d108      	bne.n	800301c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800301a:	e007      	b.n	800302c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	60da      	str	r2, [r3, #12]
}
 800302c:	bf00      	nop
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	b2db      	uxtb	r3, r3
 8003046:	3b10      	subs	r3, #16
 8003048:	4a14      	ldr	r2, [pc, #80]	; (800309c <DMA_CalcBaseAndBitshift+0x64>)
 800304a:	fba2 2303 	umull	r2, r3, r2, r3
 800304e:	091b      	lsrs	r3, r3, #4
 8003050:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003052:	4a13      	ldr	r2, [pc, #76]	; (80030a0 <DMA_CalcBaseAndBitshift+0x68>)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4413      	add	r3, r2
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	461a      	mov	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2b03      	cmp	r3, #3
 8003064:	d909      	bls.n	800307a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800306e:	f023 0303 	bic.w	r3, r3, #3
 8003072:	1d1a      	adds	r2, r3, #4
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	659a      	str	r2, [r3, #88]	; 0x58
 8003078:	e007      	b.n	800308a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003082:	f023 0303 	bic.w	r3, r3, #3
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800308e:	4618      	mov	r0, r3
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	aaaaaaab 	.word	0xaaaaaaab
 80030a0:	08006f54 	.word	0x08006f54

080030a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030ac:	2300      	movs	r3, #0
 80030ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d11f      	bne.n	80030fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b03      	cmp	r3, #3
 80030c2:	d855      	bhi.n	8003170 <DMA_CheckFifoParam+0xcc>
 80030c4:	a201      	add	r2, pc, #4	; (adr r2, 80030cc <DMA_CheckFifoParam+0x28>)
 80030c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ca:	bf00      	nop
 80030cc:	080030dd 	.word	0x080030dd
 80030d0:	080030ef 	.word	0x080030ef
 80030d4:	080030dd 	.word	0x080030dd
 80030d8:	08003171 	.word	0x08003171
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d045      	beq.n	8003174 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ec:	e042      	b.n	8003174 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030f6:	d13f      	bne.n	8003178 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030fc:	e03c      	b.n	8003178 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003106:	d121      	bne.n	800314c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2b03      	cmp	r3, #3
 800310c:	d836      	bhi.n	800317c <DMA_CheckFifoParam+0xd8>
 800310e:	a201      	add	r2, pc, #4	; (adr r2, 8003114 <DMA_CheckFifoParam+0x70>)
 8003110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003114:	08003125 	.word	0x08003125
 8003118:	0800312b 	.word	0x0800312b
 800311c:	08003125 	.word	0x08003125
 8003120:	0800313d 	.word	0x0800313d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	73fb      	strb	r3, [r7, #15]
      break;
 8003128:	e02f      	b.n	800318a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d024      	beq.n	8003180 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800313a:	e021      	b.n	8003180 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003144:	d11e      	bne.n	8003184 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800314a:	e01b      	b.n	8003184 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2b02      	cmp	r3, #2
 8003150:	d902      	bls.n	8003158 <DMA_CheckFifoParam+0xb4>
 8003152:	2b03      	cmp	r3, #3
 8003154:	d003      	beq.n	800315e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003156:	e018      	b.n	800318a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	73fb      	strb	r3, [r7, #15]
      break;
 800315c:	e015      	b.n	800318a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003162:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00e      	beq.n	8003188 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	73fb      	strb	r3, [r7, #15]
      break;
 800316e:	e00b      	b.n	8003188 <DMA_CheckFifoParam+0xe4>
      break;
 8003170:	bf00      	nop
 8003172:	e00a      	b.n	800318a <DMA_CheckFifoParam+0xe6>
      break;
 8003174:	bf00      	nop
 8003176:	e008      	b.n	800318a <DMA_CheckFifoParam+0xe6>
      break;
 8003178:	bf00      	nop
 800317a:	e006      	b.n	800318a <DMA_CheckFifoParam+0xe6>
      break;
 800317c:	bf00      	nop
 800317e:	e004      	b.n	800318a <DMA_CheckFifoParam+0xe6>
      break;
 8003180:	bf00      	nop
 8003182:	e002      	b.n	800318a <DMA_CheckFifoParam+0xe6>
      break;   
 8003184:	bf00      	nop
 8003186:	e000      	b.n	800318a <DMA_CheckFifoParam+0xe6>
      break;
 8003188:	bf00      	nop
    }
  } 
  
  return status; 
 800318a:	7bfb      	ldrb	r3, [r7, #15]
}
 800318c:	4618      	mov	r0, r3
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003198:	b480      	push	{r7}
 800319a:	b089      	sub	sp, #36	; 0x24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ae:	2300      	movs	r3, #0
 80031b0:	61fb      	str	r3, [r7, #28]
 80031b2:	e165      	b.n	8003480 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031b4:	2201      	movs	r2, #1
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	4013      	ands	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	f040 8154 	bne.w	800347a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d00b      	beq.n	80031f2 <HAL_GPIO_Init+0x5a>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d007      	beq.n	80031f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031e6:	2b11      	cmp	r3, #17
 80031e8:	d003      	beq.n	80031f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b12      	cmp	r3, #18
 80031f0:	d130      	bne.n	8003254 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	2203      	movs	r2, #3
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43db      	mvns	r3, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4013      	ands	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4313      	orrs	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003228:	2201      	movs	r2, #1
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	091b      	lsrs	r3, r3, #4
 800323e:	f003 0201 	and.w	r2, r3, #1
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4313      	orrs	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	2203      	movs	r2, #3
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	43db      	mvns	r3, r3
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4013      	ands	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4313      	orrs	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2b02      	cmp	r3, #2
 800328a:	d003      	beq.n	8003294 <HAL_GPIO_Init+0xfc>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b12      	cmp	r3, #18
 8003292:	d123      	bne.n	80032dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	08da      	lsrs	r2, r3, #3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3208      	adds	r2, #8
 800329c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	220f      	movs	r2, #15
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	43db      	mvns	r3, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4013      	ands	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	691a      	ldr	r2, [r3, #16]
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	08da      	lsrs	r2, r3, #3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	3208      	adds	r2, #8
 80032d6:	69b9      	ldr	r1, [r7, #24]
 80032d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	2203      	movs	r2, #3
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	43db      	mvns	r3, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4013      	ands	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 0203 	and.w	r2, r3, #3
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4313      	orrs	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 80ae 	beq.w	800347a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800331e:	2300      	movs	r3, #0
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	4b5c      	ldr	r3, [pc, #368]	; (8003494 <HAL_GPIO_Init+0x2fc>)
 8003324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003326:	4a5b      	ldr	r2, [pc, #364]	; (8003494 <HAL_GPIO_Init+0x2fc>)
 8003328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800332c:	6453      	str	r3, [r2, #68]	; 0x44
 800332e:	4b59      	ldr	r3, [pc, #356]	; (8003494 <HAL_GPIO_Init+0x2fc>)
 8003330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800333a:	4a57      	ldr	r2, [pc, #348]	; (8003498 <HAL_GPIO_Init+0x300>)
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	089b      	lsrs	r3, r3, #2
 8003340:	3302      	adds	r3, #2
 8003342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003346:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	220f      	movs	r2, #15
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43db      	mvns	r3, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4013      	ands	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a4e      	ldr	r2, [pc, #312]	; (800349c <HAL_GPIO_Init+0x304>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d025      	beq.n	80033b2 <HAL_GPIO_Init+0x21a>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a4d      	ldr	r2, [pc, #308]	; (80034a0 <HAL_GPIO_Init+0x308>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d01f      	beq.n	80033ae <HAL_GPIO_Init+0x216>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a4c      	ldr	r2, [pc, #304]	; (80034a4 <HAL_GPIO_Init+0x30c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d019      	beq.n	80033aa <HAL_GPIO_Init+0x212>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a4b      	ldr	r2, [pc, #300]	; (80034a8 <HAL_GPIO_Init+0x310>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d013      	beq.n	80033a6 <HAL_GPIO_Init+0x20e>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a4a      	ldr	r2, [pc, #296]	; (80034ac <HAL_GPIO_Init+0x314>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d00d      	beq.n	80033a2 <HAL_GPIO_Init+0x20a>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a49      	ldr	r2, [pc, #292]	; (80034b0 <HAL_GPIO_Init+0x318>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d007      	beq.n	800339e <HAL_GPIO_Init+0x206>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a48      	ldr	r2, [pc, #288]	; (80034b4 <HAL_GPIO_Init+0x31c>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d101      	bne.n	800339a <HAL_GPIO_Init+0x202>
 8003396:	2306      	movs	r3, #6
 8003398:	e00c      	b.n	80033b4 <HAL_GPIO_Init+0x21c>
 800339a:	2307      	movs	r3, #7
 800339c:	e00a      	b.n	80033b4 <HAL_GPIO_Init+0x21c>
 800339e:	2305      	movs	r3, #5
 80033a0:	e008      	b.n	80033b4 <HAL_GPIO_Init+0x21c>
 80033a2:	2304      	movs	r3, #4
 80033a4:	e006      	b.n	80033b4 <HAL_GPIO_Init+0x21c>
 80033a6:	2303      	movs	r3, #3
 80033a8:	e004      	b.n	80033b4 <HAL_GPIO_Init+0x21c>
 80033aa:	2302      	movs	r3, #2
 80033ac:	e002      	b.n	80033b4 <HAL_GPIO_Init+0x21c>
 80033ae:	2301      	movs	r3, #1
 80033b0:	e000      	b.n	80033b4 <HAL_GPIO_Init+0x21c>
 80033b2:	2300      	movs	r3, #0
 80033b4:	69fa      	ldr	r2, [r7, #28]
 80033b6:	f002 0203 	and.w	r2, r2, #3
 80033ba:	0092      	lsls	r2, r2, #2
 80033bc:	4093      	lsls	r3, r2
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033c4:	4934      	ldr	r1, [pc, #208]	; (8003498 <HAL_GPIO_Init+0x300>)
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	089b      	lsrs	r3, r3, #2
 80033ca:	3302      	adds	r3, #2
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033d2:	4b39      	ldr	r3, [pc, #228]	; (80034b8 <HAL_GPIO_Init+0x320>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	43db      	mvns	r3, r3
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	4013      	ands	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033f6:	4a30      	ldr	r2, [pc, #192]	; (80034b8 <HAL_GPIO_Init+0x320>)
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80033fc:	4b2e      	ldr	r3, [pc, #184]	; (80034b8 <HAL_GPIO_Init+0x320>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	43db      	mvns	r3, r3
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4013      	ands	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d003      	beq.n	8003420 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	4313      	orrs	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003420:	4a25      	ldr	r2, [pc, #148]	; (80034b8 <HAL_GPIO_Init+0x320>)
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003426:	4b24      	ldr	r3, [pc, #144]	; (80034b8 <HAL_GPIO_Init+0x320>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	43db      	mvns	r3, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4013      	ands	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800344a:	4a1b      	ldr	r2, [pc, #108]	; (80034b8 <HAL_GPIO_Init+0x320>)
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003450:	4b19      	ldr	r3, [pc, #100]	; (80034b8 <HAL_GPIO_Init+0x320>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	43db      	mvns	r3, r3
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	4013      	ands	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d003      	beq.n	8003474 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	4313      	orrs	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003474:	4a10      	ldr	r2, [pc, #64]	; (80034b8 <HAL_GPIO_Init+0x320>)
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	3301      	adds	r3, #1
 800347e:	61fb      	str	r3, [r7, #28]
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	2b0f      	cmp	r3, #15
 8003484:	f67f ae96 	bls.w	80031b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003488:	bf00      	nop
 800348a:	3724      	adds	r7, #36	; 0x24
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	40023800 	.word	0x40023800
 8003498:	40013800 	.word	0x40013800
 800349c:	40020000 	.word	0x40020000
 80034a0:	40020400 	.word	0x40020400
 80034a4:	40020800 	.word	0x40020800
 80034a8:	40020c00 	.word	0x40020c00
 80034ac:	40021000 	.word	0x40021000
 80034b0:	40021400 	.word	0x40021400
 80034b4:	40021800 	.word	0x40021800
 80034b8:	40013c00 	.word	0x40013c00

080034bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691a      	ldr	r2, [r3, #16]
 80034cc:	887b      	ldrh	r3, [r7, #2]
 80034ce:	4013      	ands	r3, r2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d002      	beq.n	80034da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034d4:	2301      	movs	r3, #1
 80034d6:	73fb      	strb	r3, [r7, #15]
 80034d8:	e001      	b.n	80034de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034da:	2300      	movs	r3, #0
 80034dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034de:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	807b      	strh	r3, [r7, #2]
 80034f8:	4613      	mov	r3, r2
 80034fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034fc:	787b      	ldrb	r3, [r7, #1]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003502:	887a      	ldrh	r2, [r7, #2]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003508:	e003      	b.n	8003512 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800350a:	887b      	ldrh	r3, [r7, #2]
 800350c:	041a      	lsls	r2, r3, #16
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	619a      	str	r2, [r3, #24]
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800351e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003520:	b08f      	sub	sp, #60	; 0x3c
 8003522:	af0a      	add	r7, sp, #40	; 0x28
 8003524:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e116      	b.n	800375e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7fe fc8e 	bl	8001e6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2203      	movs	r2, #3
 8003554:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003560:	2b00      	cmp	r3, #0
 8003562:	d102      	bne.n	800356a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f003 fa65 	bl	8006a3e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	603b      	str	r3, [r7, #0]
 800357a:	687e      	ldr	r6, [r7, #4]
 800357c:	466d      	mov	r5, sp
 800357e:	f106 0410 	add.w	r4, r6, #16
 8003582:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003584:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003586:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003588:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800358a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800358e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003592:	1d33      	adds	r3, r6, #4
 8003594:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003596:	6838      	ldr	r0, [r7, #0]
 8003598:	f003 f9f0 	bl	800697c <USB_CoreInit>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d005      	beq.n	80035ae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2202      	movs	r2, #2
 80035a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e0d7      	b.n	800375e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2100      	movs	r1, #0
 80035b4:	4618      	mov	r0, r3
 80035b6:	f003 fa53 	bl	8006a60 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ba:	2300      	movs	r3, #0
 80035bc:	73fb      	strb	r3, [r7, #15]
 80035be:	e04a      	b.n	8003656 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035c0:	7bfa      	ldrb	r2, [r7, #15]
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	4613      	mov	r3, r2
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	1a9b      	subs	r3, r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	440b      	add	r3, r1
 80035ce:	333d      	adds	r3, #61	; 0x3d
 80035d0:	2201      	movs	r2, #1
 80035d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035d4:	7bfa      	ldrb	r2, [r7, #15]
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	333c      	adds	r3, #60	; 0x3c
 80035e4:	7bfa      	ldrb	r2, [r7, #15]
 80035e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035e8:	7bfa      	ldrb	r2, [r7, #15]
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	b298      	uxth	r0, r3
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	3342      	adds	r3, #66	; 0x42
 80035fc:	4602      	mov	r2, r0
 80035fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003600:	7bfa      	ldrb	r2, [r7, #15]
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	1a9b      	subs	r3, r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	333f      	adds	r3, #63	; 0x3f
 8003610:	2200      	movs	r2, #0
 8003612:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003614:	7bfa      	ldrb	r2, [r7, #15]
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	4613      	mov	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	1a9b      	subs	r3, r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	3344      	adds	r3, #68	; 0x44
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003628:	7bfa      	ldrb	r2, [r7, #15]
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	1a9b      	subs	r3, r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	3348      	adds	r3, #72	; 0x48
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800363c:	7bfa      	ldrb	r2, [r7, #15]
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	4613      	mov	r3, r2
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	1a9b      	subs	r3, r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	3350      	adds	r3, #80	; 0x50
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003650:	7bfb      	ldrb	r3, [r7, #15]
 8003652:	3301      	adds	r3, #1
 8003654:	73fb      	strb	r3, [r7, #15]
 8003656:	7bfa      	ldrb	r2, [r7, #15]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	429a      	cmp	r2, r3
 800365e:	d3af      	bcc.n	80035c0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003660:	2300      	movs	r3, #0
 8003662:	73fb      	strb	r3, [r7, #15]
 8003664:	e044      	b.n	80036f0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003666:	7bfa      	ldrb	r2, [r7, #15]
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	4613      	mov	r3, r2
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	1a9b      	subs	r3, r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	440b      	add	r3, r1
 8003674:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003678:	2200      	movs	r2, #0
 800367a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800367c:	7bfa      	ldrb	r2, [r7, #15]
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	4613      	mov	r3, r2
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	1a9b      	subs	r3, r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800368e:	7bfa      	ldrb	r2, [r7, #15]
 8003690:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003692:	7bfa      	ldrb	r2, [r7, #15]
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	1a9b      	subs	r3, r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	440b      	add	r3, r1
 80036a0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80036a4:	2200      	movs	r2, #0
 80036a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036a8:	7bfa      	ldrb	r2, [r7, #15]
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	1a9b      	subs	r3, r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036be:	7bfa      	ldrb	r2, [r7, #15]
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	4613      	mov	r3, r2
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	1a9b      	subs	r3, r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	440b      	add	r3, r1
 80036cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036d4:	7bfa      	ldrb	r2, [r7, #15]
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	4613      	mov	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	1a9b      	subs	r3, r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80036e6:	2200      	movs	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036ea:	7bfb      	ldrb	r3, [r7, #15]
 80036ec:	3301      	adds	r3, #1
 80036ee:	73fb      	strb	r3, [r7, #15]
 80036f0:	7bfa      	ldrb	r2, [r7, #15]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d3b5      	bcc.n	8003666 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	603b      	str	r3, [r7, #0]
 8003700:	687e      	ldr	r6, [r7, #4]
 8003702:	466d      	mov	r5, sp
 8003704:	f106 0410 	add.w	r4, r6, #16
 8003708:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800370a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800370c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800370e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003710:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003714:	e885 0003 	stmia.w	r5, {r0, r1}
 8003718:	1d33      	adds	r3, r6, #4
 800371a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800371c:	6838      	ldr	r0, [r7, #0]
 800371e:	f003 f9c9 	bl	8006ab4 <USB_DevInit>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d005      	beq.n	8003734 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e014      	b.n	800375e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	2b01      	cmp	r3, #1
 800374a:	d102      	bne.n	8003752 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f80a 	bl	8003766 <HAL_PCDEx_ActivateLPM>
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f003 fb6b 	bl	8006e32 <USB_DevDisconnect>

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003766 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003766:	b480      	push	{r7}
 8003768:	b085      	sub	sp, #20
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003798:	f043 0303 	orr.w	r3, r3, #3
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
	...

080037b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e0cc      	b.n	800395e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037c4:	4b68      	ldr	r3, [pc, #416]	; (8003968 <HAL_RCC_ClockConfig+0x1b8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 030f 	and.w	r3, r3, #15
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d90c      	bls.n	80037ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d2:	4b65      	ldr	r3, [pc, #404]	; (8003968 <HAL_RCC_ClockConfig+0x1b8>)
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037da:	4b63      	ldr	r3, [pc, #396]	; (8003968 <HAL_RCC_ClockConfig+0x1b8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 030f 	and.w	r3, r3, #15
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d001      	beq.n	80037ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e0b8      	b.n	800395e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d020      	beq.n	800383a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	d005      	beq.n	8003810 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003804:	4b59      	ldr	r3, [pc, #356]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	4a58      	ldr	r2, [pc, #352]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800380e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	2b00      	cmp	r3, #0
 800381a:	d005      	beq.n	8003828 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800381c:	4b53      	ldr	r3, [pc, #332]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	4a52      	ldr	r2, [pc, #328]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003826:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003828:	4b50      	ldr	r3, [pc, #320]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	494d      	ldr	r1, [pc, #308]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003836:	4313      	orrs	r3, r2
 8003838:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d044      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d107      	bne.n	800385e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384e:	4b47      	ldr	r3, [pc, #284]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d119      	bne.n	800388e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e07f      	b.n	800395e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d003      	beq.n	800386e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800386a:	2b03      	cmp	r3, #3
 800386c:	d107      	bne.n	800387e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800386e:	4b3f      	ldr	r3, [pc, #252]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d109      	bne.n	800388e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e06f      	b.n	800395e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800387e:	4b3b      	ldr	r3, [pc, #236]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e067      	b.n	800395e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800388e:	4b37      	ldr	r3, [pc, #220]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f023 0203 	bic.w	r2, r3, #3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	4934      	ldr	r1, [pc, #208]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 800389c:	4313      	orrs	r3, r2
 800389e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038a0:	f7fe fbce 	bl	8002040 <HAL_GetTick>
 80038a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a6:	e00a      	b.n	80038be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a8:	f7fe fbca 	bl	8002040 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e04f      	b.n	800395e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038be:	4b2b      	ldr	r3, [pc, #172]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 020c 	and.w	r2, r3, #12
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d1eb      	bne.n	80038a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038d0:	4b25      	ldr	r3, [pc, #148]	; (8003968 <HAL_RCC_ClockConfig+0x1b8>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 030f 	and.w	r3, r3, #15
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d20c      	bcs.n	80038f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038de:	4b22      	ldr	r3, [pc, #136]	; (8003968 <HAL_RCC_ClockConfig+0x1b8>)
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e6:	4b20      	ldr	r3, [pc, #128]	; (8003968 <HAL_RCC_ClockConfig+0x1b8>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d001      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e032      	b.n	800395e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0304 	and.w	r3, r3, #4
 8003900:	2b00      	cmp	r3, #0
 8003902:	d008      	beq.n	8003916 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003904:	4b19      	ldr	r3, [pc, #100]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	4916      	ldr	r1, [pc, #88]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	4313      	orrs	r3, r2
 8003914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b00      	cmp	r3, #0
 8003920:	d009      	beq.n	8003936 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003922:	4b12      	ldr	r3, [pc, #72]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	490e      	ldr	r1, [pc, #56]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	4313      	orrs	r3, r2
 8003934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003936:	f000 f821 	bl	800397c <HAL_RCC_GetSysClockFreq>
 800393a:	4601      	mov	r1, r0
 800393c:	4b0b      	ldr	r3, [pc, #44]	; (800396c <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	091b      	lsrs	r3, r3, #4
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	4a0a      	ldr	r2, [pc, #40]	; (8003970 <HAL_RCC_ClockConfig+0x1c0>)
 8003948:	5cd3      	ldrb	r3, [r2, r3]
 800394a:	fa21 f303 	lsr.w	r3, r1, r3
 800394e:	4a09      	ldr	r2, [pc, #36]	; (8003974 <HAL_RCC_ClockConfig+0x1c4>)
 8003950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003952:	4b09      	ldr	r3, [pc, #36]	; (8003978 <HAL_RCC_ClockConfig+0x1c8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f7fe fb2e 	bl	8001fb8 <HAL_InitTick>

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40023c00 	.word	0x40023c00
 800396c:	40023800 	.word	0x40023800
 8003970:	08006f3c 	.word	0x08006f3c
 8003974:	20000020 	.word	0x20000020
 8003978:	20000024 	.word	0x20000024

0800397c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800397c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003982:	2300      	movs	r3, #0
 8003984:	607b      	str	r3, [r7, #4]
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	2300      	movs	r3, #0
 800398c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003992:	4b63      	ldr	r3, [pc, #396]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 030c 	and.w	r3, r3, #12
 800399a:	2b04      	cmp	r3, #4
 800399c:	d007      	beq.n	80039ae <HAL_RCC_GetSysClockFreq+0x32>
 800399e:	2b08      	cmp	r3, #8
 80039a0:	d008      	beq.n	80039b4 <HAL_RCC_GetSysClockFreq+0x38>
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f040 80b4 	bne.w	8003b10 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039a8:	4b5e      	ldr	r3, [pc, #376]	; (8003b24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80039aa:	60bb      	str	r3, [r7, #8]
       break;
 80039ac:	e0b3      	b.n	8003b16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039ae:	4b5e      	ldr	r3, [pc, #376]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80039b0:	60bb      	str	r3, [r7, #8]
      break;
 80039b2:	e0b0      	b.n	8003b16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039b4:	4b5a      	ldr	r3, [pc, #360]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039be:	4b58      	ldr	r3, [pc, #352]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d04a      	beq.n	8003a60 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ca:	4b55      	ldr	r3, [pc, #340]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	099b      	lsrs	r3, r3, #6
 80039d0:	f04f 0400 	mov.w	r4, #0
 80039d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80039d8:	f04f 0200 	mov.w	r2, #0
 80039dc:	ea03 0501 	and.w	r5, r3, r1
 80039e0:	ea04 0602 	and.w	r6, r4, r2
 80039e4:	4629      	mov	r1, r5
 80039e6:	4632      	mov	r2, r6
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	f04f 0400 	mov.w	r4, #0
 80039f0:	0154      	lsls	r4, r2, #5
 80039f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80039f6:	014b      	lsls	r3, r1, #5
 80039f8:	4619      	mov	r1, r3
 80039fa:	4622      	mov	r2, r4
 80039fc:	1b49      	subs	r1, r1, r5
 80039fe:	eb62 0206 	sbc.w	r2, r2, r6
 8003a02:	f04f 0300 	mov.w	r3, #0
 8003a06:	f04f 0400 	mov.w	r4, #0
 8003a0a:	0194      	lsls	r4, r2, #6
 8003a0c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a10:	018b      	lsls	r3, r1, #6
 8003a12:	1a5b      	subs	r3, r3, r1
 8003a14:	eb64 0402 	sbc.w	r4, r4, r2
 8003a18:	f04f 0100 	mov.w	r1, #0
 8003a1c:	f04f 0200 	mov.w	r2, #0
 8003a20:	00e2      	lsls	r2, r4, #3
 8003a22:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a26:	00d9      	lsls	r1, r3, #3
 8003a28:	460b      	mov	r3, r1
 8003a2a:	4614      	mov	r4, r2
 8003a2c:	195b      	adds	r3, r3, r5
 8003a2e:	eb44 0406 	adc.w	r4, r4, r6
 8003a32:	f04f 0100 	mov.w	r1, #0
 8003a36:	f04f 0200 	mov.w	r2, #0
 8003a3a:	0262      	lsls	r2, r4, #9
 8003a3c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003a40:	0259      	lsls	r1, r3, #9
 8003a42:	460b      	mov	r3, r1
 8003a44:	4614      	mov	r4, r2
 8003a46:	4618      	mov	r0, r3
 8003a48:	4621      	mov	r1, r4
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f04f 0400 	mov.w	r4, #0
 8003a50:	461a      	mov	r2, r3
 8003a52:	4623      	mov	r3, r4
 8003a54:	f7fd f81e 	bl	8000a94 <__aeabi_uldivmod>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	460c      	mov	r4, r1
 8003a5c:	60fb      	str	r3, [r7, #12]
 8003a5e:	e049      	b.n	8003af4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a60:	4b2f      	ldr	r3, [pc, #188]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	099b      	lsrs	r3, r3, #6
 8003a66:	f04f 0400 	mov.w	r4, #0
 8003a6a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a6e:	f04f 0200 	mov.w	r2, #0
 8003a72:	ea03 0501 	and.w	r5, r3, r1
 8003a76:	ea04 0602 	and.w	r6, r4, r2
 8003a7a:	4629      	mov	r1, r5
 8003a7c:	4632      	mov	r2, r6
 8003a7e:	f04f 0300 	mov.w	r3, #0
 8003a82:	f04f 0400 	mov.w	r4, #0
 8003a86:	0154      	lsls	r4, r2, #5
 8003a88:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a8c:	014b      	lsls	r3, r1, #5
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4622      	mov	r2, r4
 8003a92:	1b49      	subs	r1, r1, r5
 8003a94:	eb62 0206 	sbc.w	r2, r2, r6
 8003a98:	f04f 0300 	mov.w	r3, #0
 8003a9c:	f04f 0400 	mov.w	r4, #0
 8003aa0:	0194      	lsls	r4, r2, #6
 8003aa2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003aa6:	018b      	lsls	r3, r1, #6
 8003aa8:	1a5b      	subs	r3, r3, r1
 8003aaa:	eb64 0402 	sbc.w	r4, r4, r2
 8003aae:	f04f 0100 	mov.w	r1, #0
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	00e2      	lsls	r2, r4, #3
 8003ab8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003abc:	00d9      	lsls	r1, r3, #3
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4614      	mov	r4, r2
 8003ac2:	195b      	adds	r3, r3, r5
 8003ac4:	eb44 0406 	adc.w	r4, r4, r6
 8003ac8:	f04f 0100 	mov.w	r1, #0
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	02a2      	lsls	r2, r4, #10
 8003ad2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003ad6:	0299      	lsls	r1, r3, #10
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4614      	mov	r4, r2
 8003adc:	4618      	mov	r0, r3
 8003ade:	4621      	mov	r1, r4
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f04f 0400 	mov.w	r4, #0
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	4623      	mov	r3, r4
 8003aea:	f7fc ffd3 	bl	8000a94 <__aeabi_uldivmod>
 8003aee:	4603      	mov	r3, r0
 8003af0:	460c      	mov	r4, r1
 8003af2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003af4:	4b0a      	ldr	r3, [pc, #40]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	0c1b      	lsrs	r3, r3, #16
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	3301      	adds	r3, #1
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0c:	60bb      	str	r3, [r7, #8]
      break;
 8003b0e:	e002      	b.n	8003b16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b10:	4b04      	ldr	r3, [pc, #16]	; (8003b24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003b12:	60bb      	str	r3, [r7, #8]
      break;
 8003b14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b16:	68bb      	ldr	r3, [r7, #8]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b20:	40023800 	.word	0x40023800
 8003b24:	00f42400 	.word	0x00f42400
 8003b28:	007a1200 	.word	0x007a1200

08003b2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b30:	4b03      	ldr	r3, [pc, #12]	; (8003b40 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b32:	681b      	ldr	r3, [r3, #0]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	20000020 	.word	0x20000020

08003b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b48:	f7ff fff0 	bl	8003b2c <HAL_RCC_GetHCLKFreq>
 8003b4c:	4601      	mov	r1, r0
 8003b4e:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	0a9b      	lsrs	r3, r3, #10
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	4a03      	ldr	r2, [pc, #12]	; (8003b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b5a:	5cd3      	ldrb	r3, [r2, r3]
 8003b5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40023800 	.word	0x40023800
 8003b68:	08006f4c 	.word	0x08006f4c

08003b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b70:	f7ff ffdc 	bl	8003b2c <HAL_RCC_GetHCLKFreq>
 8003b74:	4601      	mov	r1, r0
 8003b76:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	0b5b      	lsrs	r3, r3, #13
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	4a03      	ldr	r2, [pc, #12]	; (8003b90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b82:	5cd3      	ldrb	r3, [r2, r3]
 8003b84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	08006f4c 	.word	0x08006f4c

08003b94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b088      	sub	sp, #32
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d010      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003bb8:	4b7a      	ldr	r3, [pc, #488]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003bba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bbe:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	4977      	ldr	r1, [pc, #476]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d010      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003be6:	4b6f      	ldr	r3, [pc, #444]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bec:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	496b      	ldr	r1, [pc, #428]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8003c04:	2301      	movs	r3, #1
 8003c06:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d022      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8003c14:	4b63      	ldr	r3, [pc, #396]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003c16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c22:	4960      	ldr	r1, [pc, #384]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8003c32:	2301      	movs	r3, #1
 8003c34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c3e:	d10c      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8003c40:	4b58      	ldr	r3, [pc, #352]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c46:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	021b      	lsls	r3, r3, #8
 8003c52:	4954      	ldr	r1, [pc, #336]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d022      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8003c66:	4b4f      	ldr	r3, [pc, #316]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c6c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c74:	494b      	ldr	r1, [pc, #300]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003c84:	2301      	movs	r3, #1
 8003c86:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c90:	d10c      	bne.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8003c92:	4b44      	ldr	r3, [pc, #272]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c98:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	021b      	lsls	r3, r3, #8
 8003ca4:	493f      	ldr	r1, [pc, #252]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0308 	and.w	r3, r3, #8
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 808a 	beq.w	8003dce <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60fb      	str	r3, [r7, #12]
 8003cbe:	4b39      	ldr	r3, [pc, #228]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	4a38      	ldr	r2, [pc, #224]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cca:	4b36      	ldr	r3, [pc, #216]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003cd6:	4b34      	ldr	r3, [pc, #208]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a33      	ldr	r2, [pc, #204]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8003cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ce0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ce2:	f7fe f9ad 	bl	8002040 <HAL_GetTick>
 8003ce6:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ce8:	e008      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003cea:	f7fe f9a9 	bl	8002040 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e1d1      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003cfc:	4b2a      	ldr	r3, [pc, #168]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0f0      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d08:	4b26      	ldr	r3, [pc, #152]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d10:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d02f      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d028      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d26:	4b1f      	ldr	r3, [pc, #124]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d2e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d30:	4b1e      	ldr	r3, [pc, #120]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8003d32:	2201      	movs	r2, #1
 8003d34:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d36:	4b1d      	ldr	r3, [pc, #116]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003d3c:	4a19      	ldr	r2, [pc, #100]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d42:	4b18      	ldr	r3, [pc, #96]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d114      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003d4e:	f7fe f977 	bl	8002040 <HAL_GetTick>
 8003d52:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d54:	e00a      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d56:	f7fe f973 	bl	8002040 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e199      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d6c:	4b0d      	ldr	r3, [pc, #52]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0ee      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d84:	d114      	bne.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8003d86:	4b07      	ldr	r3, [pc, #28]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d9a:	4902      	ldr	r1, [pc, #8]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	608b      	str	r3, [r1, #8]
 8003da0:	e00c      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x228>
 8003da2:	bf00      	nop
 8003da4:	40023800 	.word	0x40023800
 8003da8:	40007000 	.word	0x40007000
 8003dac:	42470e40 	.word	0x42470e40
 8003db0:	4b89      	ldr	r3, [pc, #548]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	4a88      	ldr	r2, [pc, #544]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003db6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003dba:	6093      	str	r3, [r2, #8]
 8003dbc:	4b86      	ldr	r3, [pc, #536]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003dbe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc8:	4983      	ldr	r1, [pc, #524]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0304 	and.w	r3, r3, #4
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d004      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8003de0:	4b7e      	ldr	r3, [pc, #504]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8003de2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0310 	and.w	r3, r3, #16
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00a      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003df0:	4b79      	ldr	r3, [pc, #484]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003df6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfe:	4976      	ldr	r1, [pc, #472]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0320 	and.w	r3, r3, #32
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d011      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003e12:	4b71      	ldr	r3, [pc, #452]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003e14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e18:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e20:	496d      	ldr	r1, [pc, #436]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e30:	d101      	bne.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8003e32:	2301      	movs	r3, #1
 8003e34:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003e42:	4b65      	ldr	r3, [pc, #404]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e48:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e50:	4961      	ldr	r1, [pc, #388]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d004      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b80      	cmp	r3, #128	; 0x80
 8003e64:	f040 80c6 	bne.w	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e68:	4b5d      	ldr	r3, [pc, #372]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e6e:	f7fe f8e7 	bl	8002040 <HAL_GetTick>
 8003e72:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e74:	e008      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e76:	f7fe f8e3 	bl	8002040 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d901      	bls.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e10b      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e88:	4b53      	ldr	r3, [pc, #332]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1f0      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8003e94:	4a53      	ldr	r2, [pc, #332]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e9a:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	69db      	ldr	r3, [r3, #28]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d023      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d019      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d004      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ed8:	d00e      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d019      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d115      	bne.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x386>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ef6:	d110      	bne.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	019b      	lsls	r3, r3, #6
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	061b      	lsls	r3, r3, #24
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	071b      	lsls	r3, r3, #28
 8003f12:	4931      	ldr	r1, [pc, #196]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d009      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d026      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d122      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f42:	4b25      	ldr	r3, [pc, #148]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f48:	0e1b      	lsrs	r3, r3, #24
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	019b      	lsls	r3, r3, #6
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	061b      	lsls	r3, r3, #24
 8003f60:	431a      	orrs	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	071b      	lsls	r3, r3, #28
 8003f68:	491b      	ldr	r1, [pc, #108]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8003f70:	4b19      	ldr	r3, [pc, #100]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f76:	f023 021f 	bic.w	r2, r3, #31
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	4915      	ldr	r1, [pc, #84]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d010      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	019b      	lsls	r3, r3, #6
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	061b      	lsls	r3, r3, #24
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	071b      	lsls	r3, r3, #28
 8003fae:	490a      	ldr	r1, [pc, #40]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003fb6:	4b0a      	ldr	r3, [pc, #40]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003fb8:	2201      	movs	r2, #1
 8003fba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003fbc:	f7fe f840 	bl	8002040 <HAL_GetTick>
 8003fc0:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fc2:	e011      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003fc4:	f7fe f83c 	bl	8002040 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d90a      	bls.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e064      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003fd6:	bf00      	nop
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	424711e0 	.word	0x424711e0
 8003fe0:	42470068 	.word	0x42470068
 8003fe4:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fe8:	4b2f      	ldr	r3, [pc, #188]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d0e7      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00a      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004000:	4b29      	ldr	r3, [pc, #164]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004002:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004006:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800400e:	4926      	ldr	r1, [pc, #152]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004010:	4313      	orrs	r3, r2
 8004012:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004022:	4b21      	ldr	r3, [pc, #132]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004028:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004030:	491d      	ldr	r1, [pc, #116]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004032:	4313      	orrs	r3, r2
 8004034:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00a      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004044:	4b18      	ldr	r3, [pc, #96]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004046:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800404a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004052:	4915      	ldr	r1, [pc, #84]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8004066:	4b10      	ldr	r3, [pc, #64]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004068:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800406c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004074:	490c      	ldr	r1, [pc, #48]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004076:	4313      	orrs	r3, r2
 8004078:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00a      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004088:	4b07      	ldr	r3, [pc, #28]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800408a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800408e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004096:	4904      	ldr	r1, [pc, #16]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004098:	4313      	orrs	r3, r2
 800409a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3720      	adds	r7, #32
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	40023800 	.word	0x40023800

080040ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d075      	beq.n	80041b0 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80040c4:	4ba2      	ldr	r3, [pc, #648]	; (8004350 <HAL_RCC_OscConfig+0x2a4>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f003 030c 	and.w	r3, r3, #12
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d00c      	beq.n	80040ea <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040d0:	4b9f      	ldr	r3, [pc, #636]	; (8004350 <HAL_RCC_OscConfig+0x2a4>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d112      	bne.n	8004102 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040dc:	4b9c      	ldr	r3, [pc, #624]	; (8004350 <HAL_RCC_OscConfig+0x2a4>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040e8:	d10b      	bne.n	8004102 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ea:	4b99      	ldr	r3, [pc, #612]	; (8004350 <HAL_RCC_OscConfig+0x2a4>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d05b      	beq.n	80041ae <HAL_RCC_OscConfig+0x102>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d157      	bne.n	80041ae <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e20b      	b.n	800451a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800410a:	d106      	bne.n	800411a <HAL_RCC_OscConfig+0x6e>
 800410c:	4b90      	ldr	r3, [pc, #576]	; (8004350 <HAL_RCC_OscConfig+0x2a4>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a8f      	ldr	r2, [pc, #572]	; (8004350 <HAL_RCC_OscConfig+0x2a4>)
 8004112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004116:	6013      	str	r3, [r2, #0]
 8004118:	e01d      	b.n	8004156 <HAL_RCC_OscConfig+0xaa>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004122:	d10c      	bne.n	800413e <HAL_RCC_OscConfig+0x92>
 8004124:	4b8a      	ldr	r3, [pc, #552]	; (8004350 <HAL_RCC_OscConfig+0x2a4>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a89      	ldr	r2, [pc, #548]	; (8004350 <HAL_RCC_OscConfig+0x2a4>)
 800412a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800412e:	6013      	str	r3, [r2, #0]
 8004130:	4b87      	ldr	r3, [pc, #540]	; (8004350 <HAL_RCC_OscConfig+0x2a4>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a86      	ldr	r2, [pc, #536]	; (8004350 <HAL_RCC_OscConfig+0x2a4>)
 8004136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800413a:	6013      	str	r3, [r2, #0]
 800413c:	e00b      	b.n	8004156 <HAL_RCC_OscConfig+0xaa>
 800413e:	4b84      	ldr	r3, [pc, #528]	; (8004350 <HAL_RCC_OscConfig+0x2a4>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a83      	ldr	r2, [pc, #524]	; (8004350 <HAL_RCC_OscConfig+0x2a4>)
 8004144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004148:	6013      	str	r3, [r2, #0]
 800414a:	4b81      	ldr	r3, [pc, #516]	; (8004350 <HAL_RCC_OscConfig+0x2a4>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a80      	ldr	r2, [pc, #512]	; (8004350 <HAL_RCC_OscConfig+0x2a4>)
 8004150:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004154:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d013      	beq.n	8004186 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415e:	f7fd ff6f 	bl	8002040 <HAL_GetTick>
 8004162:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004164:	e008      	b.n	8004178 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004166:	f7fd ff6b 	bl	8002040 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b64      	cmp	r3, #100	; 0x64
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e1d0      	b.n	800451a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004178:	4b75      	ldr	r3, [pc, #468]	; (8004350 <HAL_RCC_OscConfig+0x2a4>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0f0      	beq.n	8004166 <HAL_RCC_OscConfig+0xba>
 8004184:	e014      	b.n	80041b0 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004186:	f7fd ff5b 	bl	8002040 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800418e:	f7fd ff57 	bl	8002040 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b64      	cmp	r3, #100	; 0x64
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e1bc      	b.n	800451a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041a0:	4b6b      	ldr	r3, [pc, #428]	; (8004350 <HAL_RCC_OscConfig+0x2a4>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1f0      	bne.n	800418e <HAL_RCC_OscConfig+0xe2>
 80041ac:	e000      	b.n	80041b0 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ae:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d063      	beq.n	8004284 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80041bc:	4b64      	ldr	r3, [pc, #400]	; (8004350 <HAL_RCC_OscConfig+0x2a4>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 030c 	and.w	r3, r3, #12
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00b      	beq.n	80041e0 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041c8:	4b61      	ldr	r3, [pc, #388]	; (8004350 <HAL_RCC_OscConfig+0x2a4>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d11c      	bne.n	800420e <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041d4:	4b5e      	ldr	r3, [pc, #376]	; (8004350 <HAL_RCC_OscConfig+0x2a4>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d116      	bne.n	800420e <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041e0:	4b5b      	ldr	r3, [pc, #364]	; (8004350 <HAL_RCC_OscConfig+0x2a4>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d005      	beq.n	80041f8 <HAL_RCC_OscConfig+0x14c>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d001      	beq.n	80041f8 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e190      	b.n	800451a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f8:	4b55      	ldr	r3, [pc, #340]	; (8004350 <HAL_RCC_OscConfig+0x2a4>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	00db      	lsls	r3, r3, #3
 8004206:	4952      	ldr	r1, [pc, #328]	; (8004350 <HAL_RCC_OscConfig+0x2a4>)
 8004208:	4313      	orrs	r3, r2
 800420a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800420c:	e03a      	b.n	8004284 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d020      	beq.n	8004258 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004216:	4b4f      	ldr	r3, [pc, #316]	; (8004354 <HAL_RCC_OscConfig+0x2a8>)
 8004218:	2201      	movs	r2, #1
 800421a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421c:	f7fd ff10 	bl	8002040 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004224:	f7fd ff0c 	bl	8002040 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e171      	b.n	800451a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004236:	4b46      	ldr	r3, [pc, #280]	; (8004350 <HAL_RCC_OscConfig+0x2a4>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0f0      	beq.n	8004224 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004242:	4b43      	ldr	r3, [pc, #268]	; (8004350 <HAL_RCC_OscConfig+0x2a4>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	493f      	ldr	r1, [pc, #252]	; (8004350 <HAL_RCC_OscConfig+0x2a4>)
 8004252:	4313      	orrs	r3, r2
 8004254:	600b      	str	r3, [r1, #0]
 8004256:	e015      	b.n	8004284 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004258:	4b3e      	ldr	r3, [pc, #248]	; (8004354 <HAL_RCC_OscConfig+0x2a8>)
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425e:	f7fd feef 	bl	8002040 <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004266:	f7fd feeb 	bl	8002040 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e150      	b.n	800451a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004278:	4b35      	ldr	r3, [pc, #212]	; (8004350 <HAL_RCC_OscConfig+0x2a4>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1f0      	bne.n	8004266 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0308 	and.w	r3, r3, #8
 800428c:	2b00      	cmp	r3, #0
 800428e:	d030      	beq.n	80042f2 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d016      	beq.n	80042c6 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004298:	4b2f      	ldr	r3, [pc, #188]	; (8004358 <HAL_RCC_OscConfig+0x2ac>)
 800429a:	2201      	movs	r2, #1
 800429c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429e:	f7fd fecf 	bl	8002040 <HAL_GetTick>
 80042a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042a4:	e008      	b.n	80042b8 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042a6:	f7fd fecb 	bl	8002040 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e130      	b.n	800451a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042b8:	4b25      	ldr	r3, [pc, #148]	; (8004350 <HAL_RCC_OscConfig+0x2a4>)
 80042ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0f0      	beq.n	80042a6 <HAL_RCC_OscConfig+0x1fa>
 80042c4:	e015      	b.n	80042f2 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042c6:	4b24      	ldr	r3, [pc, #144]	; (8004358 <HAL_RCC_OscConfig+0x2ac>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042cc:	f7fd feb8 	bl	8002040 <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042d4:	f7fd feb4 	bl	8002040 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e119      	b.n	800451a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042e6:	4b1a      	ldr	r3, [pc, #104]	; (8004350 <HAL_RCC_OscConfig+0x2a4>)
 80042e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1f0      	bne.n	80042d4 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0304 	and.w	r3, r3, #4
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 809f 	beq.w	800443e <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004300:	2300      	movs	r3, #0
 8004302:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004304:	4b12      	ldr	r3, [pc, #72]	; (8004350 <HAL_RCC_OscConfig+0x2a4>)
 8004306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10f      	bne.n	8004330 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004310:	2300      	movs	r3, #0
 8004312:	60fb      	str	r3, [r7, #12]
 8004314:	4b0e      	ldr	r3, [pc, #56]	; (8004350 <HAL_RCC_OscConfig+0x2a4>)
 8004316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004318:	4a0d      	ldr	r2, [pc, #52]	; (8004350 <HAL_RCC_OscConfig+0x2a4>)
 800431a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800431e:	6413      	str	r3, [r2, #64]	; 0x40
 8004320:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <HAL_RCC_OscConfig+0x2a4>)
 8004322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800432c:	2301      	movs	r3, #1
 800432e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004330:	4b0a      	ldr	r3, [pc, #40]	; (800435c <HAL_RCC_OscConfig+0x2b0>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004338:	2b00      	cmp	r3, #0
 800433a:	d120      	bne.n	800437e <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800433c:	4b07      	ldr	r3, [pc, #28]	; (800435c <HAL_RCC_OscConfig+0x2b0>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a06      	ldr	r2, [pc, #24]	; (800435c <HAL_RCC_OscConfig+0x2b0>)
 8004342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004346:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004348:	f7fd fe7a 	bl	8002040 <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800434e:	e010      	b.n	8004372 <HAL_RCC_OscConfig+0x2c6>
 8004350:	40023800 	.word	0x40023800
 8004354:	42470000 	.word	0x42470000
 8004358:	42470e80 	.word	0x42470e80
 800435c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004360:	f7fd fe6e 	bl	8002040 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e0d3      	b.n	800451a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004372:	4b6c      	ldr	r3, [pc, #432]	; (8004524 <HAL_RCC_OscConfig+0x478>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437a:	2b00      	cmp	r3, #0
 800437c:	d0f0      	beq.n	8004360 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d106      	bne.n	8004394 <HAL_RCC_OscConfig+0x2e8>
 8004386:	4b68      	ldr	r3, [pc, #416]	; (8004528 <HAL_RCC_OscConfig+0x47c>)
 8004388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438a:	4a67      	ldr	r2, [pc, #412]	; (8004528 <HAL_RCC_OscConfig+0x47c>)
 800438c:	f043 0301 	orr.w	r3, r3, #1
 8004390:	6713      	str	r3, [r2, #112]	; 0x70
 8004392:	e01c      	b.n	80043ce <HAL_RCC_OscConfig+0x322>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	2b05      	cmp	r3, #5
 800439a:	d10c      	bne.n	80043b6 <HAL_RCC_OscConfig+0x30a>
 800439c:	4b62      	ldr	r3, [pc, #392]	; (8004528 <HAL_RCC_OscConfig+0x47c>)
 800439e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a0:	4a61      	ldr	r2, [pc, #388]	; (8004528 <HAL_RCC_OscConfig+0x47c>)
 80043a2:	f043 0304 	orr.w	r3, r3, #4
 80043a6:	6713      	str	r3, [r2, #112]	; 0x70
 80043a8:	4b5f      	ldr	r3, [pc, #380]	; (8004528 <HAL_RCC_OscConfig+0x47c>)
 80043aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ac:	4a5e      	ldr	r2, [pc, #376]	; (8004528 <HAL_RCC_OscConfig+0x47c>)
 80043ae:	f043 0301 	orr.w	r3, r3, #1
 80043b2:	6713      	str	r3, [r2, #112]	; 0x70
 80043b4:	e00b      	b.n	80043ce <HAL_RCC_OscConfig+0x322>
 80043b6:	4b5c      	ldr	r3, [pc, #368]	; (8004528 <HAL_RCC_OscConfig+0x47c>)
 80043b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ba:	4a5b      	ldr	r2, [pc, #364]	; (8004528 <HAL_RCC_OscConfig+0x47c>)
 80043bc:	f023 0301 	bic.w	r3, r3, #1
 80043c0:	6713      	str	r3, [r2, #112]	; 0x70
 80043c2:	4b59      	ldr	r3, [pc, #356]	; (8004528 <HAL_RCC_OscConfig+0x47c>)
 80043c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c6:	4a58      	ldr	r2, [pc, #352]	; (8004528 <HAL_RCC_OscConfig+0x47c>)
 80043c8:	f023 0304 	bic.w	r3, r3, #4
 80043cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d015      	beq.n	8004402 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d6:	f7fd fe33 	bl	8002040 <HAL_GetTick>
 80043da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043dc:	e00a      	b.n	80043f4 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043de:	f7fd fe2f 	bl	8002040 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d901      	bls.n	80043f4 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e092      	b.n	800451a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f4:	4b4c      	ldr	r3, [pc, #304]	; (8004528 <HAL_RCC_OscConfig+0x47c>)
 80043f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0ee      	beq.n	80043de <HAL_RCC_OscConfig+0x332>
 8004400:	e014      	b.n	800442c <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004402:	f7fd fe1d 	bl	8002040 <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004408:	e00a      	b.n	8004420 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800440a:	f7fd fe19 	bl	8002040 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	f241 3288 	movw	r2, #5000	; 0x1388
 8004418:	4293      	cmp	r3, r2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e07c      	b.n	800451a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004420:	4b41      	ldr	r3, [pc, #260]	; (8004528 <HAL_RCC_OscConfig+0x47c>)
 8004422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1ee      	bne.n	800440a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800442c:	7dfb      	ldrb	r3, [r7, #23]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d105      	bne.n	800443e <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004432:	4b3d      	ldr	r3, [pc, #244]	; (8004528 <HAL_RCC_OscConfig+0x47c>)
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	4a3c      	ldr	r2, [pc, #240]	; (8004528 <HAL_RCC_OscConfig+0x47c>)
 8004438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800443c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d068      	beq.n	8004518 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004446:	4b38      	ldr	r3, [pc, #224]	; (8004528 <HAL_RCC_OscConfig+0x47c>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 030c 	and.w	r3, r3, #12
 800444e:	2b08      	cmp	r3, #8
 8004450:	d060      	beq.n	8004514 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	2b02      	cmp	r3, #2
 8004458:	d145      	bne.n	80044e6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800445a:	4b34      	ldr	r3, [pc, #208]	; (800452c <HAL_RCC_OscConfig+0x480>)
 800445c:	2200      	movs	r2, #0
 800445e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004460:	f7fd fdee 	bl	8002040 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004468:	f7fd fdea 	bl	8002040 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e04f      	b.n	800451a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800447a:	4b2b      	ldr	r3, [pc, #172]	; (8004528 <HAL_RCC_OscConfig+0x47c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1f0      	bne.n	8004468 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	69da      	ldr	r2, [r3, #28]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004494:	019b      	lsls	r3, r3, #6
 8004496:	431a      	orrs	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449c:	085b      	lsrs	r3, r3, #1
 800449e:	3b01      	subs	r3, #1
 80044a0:	041b      	lsls	r3, r3, #16
 80044a2:	431a      	orrs	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a8:	061b      	lsls	r3, r3, #24
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b0:	071b      	lsls	r3, r3, #28
 80044b2:	491d      	ldr	r1, [pc, #116]	; (8004528 <HAL_RCC_OscConfig+0x47c>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044b8:	4b1c      	ldr	r3, [pc, #112]	; (800452c <HAL_RCC_OscConfig+0x480>)
 80044ba:	2201      	movs	r2, #1
 80044bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044be:	f7fd fdbf 	bl	8002040 <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044c6:	f7fd fdbb 	bl	8002040 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e020      	b.n	800451a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044d8:	4b13      	ldr	r3, [pc, #76]	; (8004528 <HAL_RCC_OscConfig+0x47c>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d0f0      	beq.n	80044c6 <HAL_RCC_OscConfig+0x41a>
 80044e4:	e018      	b.n	8004518 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044e6:	4b11      	ldr	r3, [pc, #68]	; (800452c <HAL_RCC_OscConfig+0x480>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ec:	f7fd fda8 	bl	8002040 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044f4:	f7fd fda4 	bl	8002040 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e009      	b.n	800451a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004506:	4b08      	ldr	r3, [pc, #32]	; (8004528 <HAL_RCC_OscConfig+0x47c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1f0      	bne.n	80044f4 <HAL_RCC_OscConfig+0x448>
 8004512:	e001      	b.n	8004518 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e000      	b.n	800451a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40007000 	.word	0x40007000
 8004528:	40023800 	.word	0x40023800
 800452c:	42470060 	.word	0x42470060

08004530 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e022      	b.n	8004588 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d105      	bne.n	800455a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7fd fa57 	bl	8001a08 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2203      	movs	r2, #3
 800455e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f814 	bl	8004590 <HAL_SD_InitCard>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e00a      	b.n	8004588 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3708      	adds	r7, #8
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004590:	b5b0      	push	{r4, r5, r7, lr}
 8004592:	b08e      	sub	sp, #56	; 0x38
 8004594:	af04      	add	r7, sp, #16
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004598:	2300      	movs	r3, #0
 800459a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800459c:	2300      	movs	r3, #0
 800459e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80045a0:	2300      	movs	r3, #0
 80045a2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80045a4:	2300      	movs	r3, #0
 80045a6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80045a8:	2300      	movs	r3, #0
 80045aa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80045ac:	2376      	movs	r3, #118	; 0x76
 80045ae:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681d      	ldr	r5, [r3, #0]
 80045b4:	466c      	mov	r4, sp
 80045b6:	f107 0314 	add.w	r3, r7, #20
 80045ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80045be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80045c2:	f107 0308 	add.w	r3, r7, #8
 80045c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045c8:	4628      	mov	r0, r5
 80045ca:	f001 fded 	bl	80061a8 <SDIO_Init>
 80045ce:	4603      	mov	r3, r0
 80045d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80045d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e031      	b.n	8004644 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80045e0:	4b1a      	ldr	r3, [pc, #104]	; (800464c <HAL_SD_InitCard+0xbc>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f001 fe07 	bl	80061fe <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80045f0:	4b16      	ldr	r3, [pc, #88]	; (800464c <HAL_SD_InitCard+0xbc>)
 80045f2:	2201      	movs	r2, #1
 80045f4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fa9c 	bl	8004b34 <SD_PowerON>
 80045fc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00b      	beq.n	800461c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004610:	6a3b      	ldr	r3, [r7, #32]
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e013      	b.n	8004644 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 f9bb 	bl	8004998 <SD_InitCard>
 8004622:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00b      	beq.n	8004642 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004636:	6a3b      	ldr	r3, [r7, #32]
 8004638:	431a      	orrs	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e000      	b.n	8004644 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3728      	adds	r7, #40	; 0x28
 8004648:	46bd      	mov	sp, r7
 800464a:	bdb0      	pop	{r4, r5, r7, pc}
 800464c:	422580a0 	.word	0x422580a0

08004650 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800465e:	0f9b      	lsrs	r3, r3, #30
 8004660:	b2da      	uxtb	r2, r3
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800466a:	0e9b      	lsrs	r3, r3, #26
 800466c:	b2db      	uxtb	r3, r3
 800466e:	f003 030f 	and.w	r3, r3, #15
 8004672:	b2da      	uxtb	r2, r3
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800467c:	0e1b      	lsrs	r3, r3, #24
 800467e:	b2db      	uxtb	r3, r3
 8004680:	f003 0303 	and.w	r3, r3, #3
 8004684:	b2da      	uxtb	r2, r3
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800468e:	0c1b      	lsrs	r3, r3, #16
 8004690:	b2da      	uxtb	r2, r3
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800469a:	0a1b      	lsrs	r3, r3, #8
 800469c:	b2da      	uxtb	r2, r3
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046b0:	0d1b      	lsrs	r3, r3, #20
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046bc:	0c1b      	lsrs	r3, r3, #16
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	f003 030f 	and.w	r3, r3, #15
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046ce:	0bdb      	lsrs	r3, r3, #15
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	b2da      	uxtb	r2, r3
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046e0:	0b9b      	lsrs	r3, r3, #14
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046f2:	0b5b      	lsrs	r3, r3, #13
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	b2da      	uxtb	r2, r3
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004704:	0b1b      	lsrs	r3, r3, #12
 8004706:	b2db      	uxtb	r3, r3
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	b2da      	uxtb	r2, r3
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2200      	movs	r2, #0
 8004716:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471c:	2b00      	cmp	r3, #0
 800471e:	d163      	bne.n	80047e8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004724:	009a      	lsls	r2, r3, #2
 8004726:	f640 73fc 	movw	r3, #4092	; 0xffc
 800472a:	4013      	ands	r3, r2
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004730:	0f92      	lsrs	r2, r2, #30
 8004732:	431a      	orrs	r2, r3
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800473c:	0edb      	lsrs	r3, r3, #27
 800473e:	b2db      	uxtb	r3, r3
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	b2da      	uxtb	r2, r3
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800474e:	0e1b      	lsrs	r3, r3, #24
 8004750:	b2db      	uxtb	r3, r3
 8004752:	f003 0307 	and.w	r3, r3, #7
 8004756:	b2da      	uxtb	r2, r3
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004760:	0d5b      	lsrs	r3, r3, #21
 8004762:	b2db      	uxtb	r3, r3
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	b2da      	uxtb	r2, r3
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004772:	0c9b      	lsrs	r3, r3, #18
 8004774:	b2db      	uxtb	r3, r3
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	b2da      	uxtb	r2, r3
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004784:	0bdb      	lsrs	r3, r3, #15
 8004786:	b2db      	uxtb	r3, r3
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	b2da      	uxtb	r2, r3
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	1c5a      	adds	r2, r3, #1
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	7e1b      	ldrb	r3, [r3, #24]
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	3302      	adds	r3, #2
 80047a8:	2201      	movs	r2, #1
 80047aa:	fa02 f303 	lsl.w	r3, r2, r3
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80047b2:	fb02 f203 	mul.w	r2, r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	7a1b      	ldrb	r3, [r3, #8]
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	f003 030f 	and.w	r3, r3, #15
 80047c4:	2201      	movs	r2, #1
 80047c6:	409a      	lsls	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80047d4:	0a52      	lsrs	r2, r2, #9
 80047d6:	fb02 f203 	mul.w	r2, r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047e4:	661a      	str	r2, [r3, #96]	; 0x60
 80047e6:	e031      	b.n	800484c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d11d      	bne.n	800482c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047f4:	041b      	lsls	r3, r3, #16
 80047f6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047fe:	0c1b      	lsrs	r3, r3, #16
 8004800:	431a      	orrs	r2, r3
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	3301      	adds	r3, #1
 800480c:	029a      	lsls	r2, r3, #10
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004820:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	661a      	str	r2, [r3, #96]	; 0x60
 800482a:	e00f      	b.n	800484c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a58      	ldr	r2, [pc, #352]	; (8004994 <HAL_SD_GetCardCSD+0x344>)
 8004832:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004838:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e09d      	b.n	8004988 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004850:	0b9b      	lsrs	r3, r3, #14
 8004852:	b2db      	uxtb	r3, r3
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	b2da      	uxtb	r2, r3
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004862:	09db      	lsrs	r3, r3, #7
 8004864:	b2db      	uxtb	r3, r3
 8004866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800486a:	b2da      	uxtb	r2, r3
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004874:	b2db      	uxtb	r3, r3
 8004876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800487a:	b2da      	uxtb	r2, r3
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004884:	0fdb      	lsrs	r3, r3, #31
 8004886:	b2da      	uxtb	r2, r3
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004890:	0f5b      	lsrs	r3, r3, #29
 8004892:	b2db      	uxtb	r3, r3
 8004894:	f003 0303 	and.w	r3, r3, #3
 8004898:	b2da      	uxtb	r2, r3
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a2:	0e9b      	lsrs	r3, r3, #26
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	f003 0307 	and.w	r3, r3, #7
 80048aa:	b2da      	uxtb	r2, r3
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b4:	0d9b      	lsrs	r3, r3, #22
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	f003 030f 	and.w	r3, r3, #15
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c6:	0d5b      	lsrs	r3, r3, #21
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e2:	0c1b      	lsrs	r3, r3, #16
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f6:	0bdb      	lsrs	r3, r3, #15
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490a:	0b9b      	lsrs	r3, r3, #14
 800490c:	b2db      	uxtb	r3, r3
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	b2da      	uxtb	r2, r3
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491e:	0b5b      	lsrs	r3, r3, #13
 8004920:	b2db      	uxtb	r3, r3
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	b2da      	uxtb	r2, r3
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004932:	0b1b      	lsrs	r3, r3, #12
 8004934:	b2db      	uxtb	r3, r3
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	b2da      	uxtb	r2, r3
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004946:	0a9b      	lsrs	r3, r3, #10
 8004948:	b2db      	uxtb	r3, r3
 800494a:	f003 0303 	and.w	r3, r3, #3
 800494e:	b2da      	uxtb	r2, r3
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495a:	0a1b      	lsrs	r3, r3, #8
 800495c:	b2db      	uxtb	r3, r3
 800495e:	f003 0303 	and.w	r3, r3, #3
 8004962:	b2da      	uxtb	r2, r3
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496e:	085b      	lsrs	r3, r3, #1
 8004970:	b2db      	uxtb	r3, r3
 8004972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004976:	b2da      	uxtb	r2, r3
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	004005ff 	.word	0x004005ff

08004998 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004998:	b5b0      	push	{r4, r5, r7, lr}
 800499a:	b094      	sub	sp, #80	; 0x50
 800499c:	af04      	add	r7, sp, #16
 800499e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80049a0:	2301      	movs	r3, #1
 80049a2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f001 fc37 	bl	800621c <SDIO_GetPowerState>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d102      	bne.n	80049ba <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80049b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80049b8:	e0b7      	b.n	8004b2a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049be:	2b03      	cmp	r3, #3
 80049c0:	d02f      	beq.n	8004a22 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f001 fd25 	bl	8006416 <SDMMC_CmdSendCID>
 80049cc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80049ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <SD_InitCard+0x40>
    {
      return errorstate;
 80049d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d6:	e0a8      	b.n	8004b2a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2100      	movs	r1, #0
 80049de:	4618      	mov	r0, r3
 80049e0:	f001 fc61 	bl	80062a6 <SDIO_GetResponse>
 80049e4:	4602      	mov	r2, r0
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2104      	movs	r1, #4
 80049f0:	4618      	mov	r0, r3
 80049f2:	f001 fc58 	bl	80062a6 <SDIO_GetResponse>
 80049f6:	4602      	mov	r2, r0
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2108      	movs	r1, #8
 8004a02:	4618      	mov	r0, r3
 8004a04:	f001 fc4f 	bl	80062a6 <SDIO_GetResponse>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	210c      	movs	r1, #12
 8004a14:	4618      	mov	r0, r3
 8004a16:	f001 fc46 	bl	80062a6 <SDIO_GetResponse>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a26:	2b03      	cmp	r3, #3
 8004a28:	d00d      	beq.n	8004a46 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f107 020e 	add.w	r2, r7, #14
 8004a32:	4611      	mov	r1, r2
 8004a34:	4618      	mov	r0, r3
 8004a36:	f001 fd2b 	bl	8006490 <SDMMC_CmdSetRelAdd>
 8004a3a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <SD_InitCard+0xae>
    {
      return errorstate;
 8004a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a44:	e071      	b.n	8004b2a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4a:	2b03      	cmp	r3, #3
 8004a4c:	d036      	beq.n	8004abc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004a4e:	89fb      	ldrh	r3, [r7, #14]
 8004a50:	461a      	mov	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a5e:	041b      	lsls	r3, r3, #16
 8004a60:	4619      	mov	r1, r3
 8004a62:	4610      	mov	r0, r2
 8004a64:	f001 fcf5 	bl	8006452 <SDMMC_CmdSendCSD>
 8004a68:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a72:	e05a      	b.n	8004b2a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2100      	movs	r1, #0
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f001 fc13 	bl	80062a6 <SDIO_GetResponse>
 8004a80:	4602      	mov	r2, r0
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2104      	movs	r1, #4
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f001 fc0a 	bl	80062a6 <SDIO_GetResponse>
 8004a92:	4602      	mov	r2, r0
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2108      	movs	r1, #8
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f001 fc01 	bl	80062a6 <SDIO_GetResponse>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	210c      	movs	r1, #12
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f001 fbf8 	bl	80062a6 <SDIO_GetResponse>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2104      	movs	r1, #4
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f001 fbef 	bl	80062a6 <SDIO_GetResponse>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	0d1a      	lsrs	r2, r3, #20
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004ad0:	f107 0310 	add.w	r3, r7, #16
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7ff fdba 	bl	8004650 <HAL_SD_GetCardCSD>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d002      	beq.n	8004ae8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004ae2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004ae6:	e020      	b.n	8004b2a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6819      	ldr	r1, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af0:	041b      	lsls	r3, r3, #16
 8004af2:	f04f 0400 	mov.w	r4, #0
 8004af6:	461a      	mov	r2, r3
 8004af8:	4623      	mov	r3, r4
 8004afa:	4608      	mov	r0, r1
 8004afc:	f001 fbe6 	bl	80062cc <SDMMC_CmdSelDesel>
 8004b00:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <SD_InitCard+0x174>
  {
    return errorstate;
 8004b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b0a:	e00e      	b.n	8004b2a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681d      	ldr	r5, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	466c      	mov	r4, sp
 8004b14:	f103 0210 	add.w	r2, r3, #16
 8004b18:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004b1e:	3304      	adds	r3, #4
 8004b20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b22:	4628      	mov	r0, r5
 8004b24:	f001 fb40 	bl	80061a8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3740      	adds	r7, #64	; 0x40
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004b34 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	617b      	str	r3, [r7, #20]
 8004b44:	2300      	movs	r3, #0
 8004b46:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f001 fbe0 	bl	8006312 <SDMMC_CmdGoIdleState>
 8004b52:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <SD_PowerON+0x2a>
  {
    return errorstate;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	e072      	b.n	8004c44 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f001 fbf3 	bl	800634e <SDMMC_CmdOperCond>
 8004b68:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00d      	beq.n	8004b8c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f001 fbc9 	bl	8006312 <SDMMC_CmdGoIdleState>
 8004b80:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d004      	beq.n	8004b92 <SD_PowerON+0x5e>
    {
      return errorstate;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	e05b      	b.n	8004c44 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d137      	bne.n	8004c0a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f001 fbf3 	bl	800638c <SDMMC_CmdAppCommand>
 8004ba6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d02d      	beq.n	8004c0a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004bae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004bb2:	e047      	b.n	8004c44 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2100      	movs	r1, #0
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f001 fbe6 	bl	800638c <SDMMC_CmdAppCommand>
 8004bc0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d001      	beq.n	8004bcc <SD_PowerON+0x98>
    {
      return errorstate;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	e03b      	b.n	8004c44 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	491e      	ldr	r1, [pc, #120]	; (8004c4c <SD_PowerON+0x118>)
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f001 fbfc 	bl	80063d0 <SDMMC_CmdAppOperCommand>
 8004bd8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004be0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004be4:	e02e      	b.n	8004c44 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2100      	movs	r1, #0
 8004bec:	4618      	mov	r0, r3
 8004bee:	f001 fb5a 	bl	80062a6 <SDIO_GetResponse>
 8004bf2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	0fdb      	lsrs	r3, r3, #31
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d101      	bne.n	8004c00 <SD_PowerON+0xcc>
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e000      	b.n	8004c02 <SD_PowerON+0xce>
 8004c00:	2300      	movs	r3, #0
 8004c02:	613b      	str	r3, [r7, #16]

    count++;
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	3301      	adds	r3, #1
 8004c08:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d802      	bhi.n	8004c1a <SD_PowerON+0xe6>
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d0cc      	beq.n	8004bb4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d902      	bls.n	8004c2a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004c24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c28:	e00c      	b.n	8004c44 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d003      	beq.n	8004c3c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	645a      	str	r2, [r3, #68]	; 0x44
 8004c3a:	e002      	b.n	8004c42 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3718      	adds	r7, #24
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	c1100000 	.word	0xc1100000

08004c50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e01d      	b.n	8004c9e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d106      	bne.n	8004c7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7fd f826 	bl	8001cc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	3304      	adds	r3, #4
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4610      	mov	r0, r2
 8004c90:	f000 fa14 	bl	80050bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b085      	sub	sp, #20
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68da      	ldr	r2, [r3, #12]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f042 0201 	orr.w	r2, r2, #1
 8004cbc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2b06      	cmp	r3, #6
 8004cce:	d007      	beq.n	8004ce0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f042 0201 	orr.w	r2, r2, #1
 8004cde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b082      	sub	sp, #8
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d122      	bne.n	8004d4a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d11b      	bne.n	8004d4a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f06f 0202 	mvn.w	r2, #2
 8004d1a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	f003 0303 	and.w	r3, r3, #3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d003      	beq.n	8004d38 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f9a5 	bl	8005080 <HAL_TIM_IC_CaptureCallback>
 8004d36:	e005      	b.n	8004d44 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f997 	bl	800506c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f9a8 	bl	8005094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b04      	cmp	r3, #4
 8004d56:	d122      	bne.n	8004d9e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	f003 0304 	and.w	r3, r3, #4
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d11b      	bne.n	8004d9e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f06f 0204 	mvn.w	r2, #4
 8004d6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2202      	movs	r2, #2
 8004d74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d003      	beq.n	8004d8c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f97b 	bl	8005080 <HAL_TIM_IC_CaptureCallback>
 8004d8a:	e005      	b.n	8004d98 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f96d 	bl	800506c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f97e 	bl	8005094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	f003 0308 	and.w	r3, r3, #8
 8004da8:	2b08      	cmp	r3, #8
 8004daa:	d122      	bne.n	8004df2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	f003 0308 	and.w	r3, r3, #8
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d11b      	bne.n	8004df2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f06f 0208 	mvn.w	r2, #8
 8004dc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2204      	movs	r2, #4
 8004dc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	69db      	ldr	r3, [r3, #28]
 8004dd0:	f003 0303 	and.w	r3, r3, #3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d003      	beq.n	8004de0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 f951 	bl	8005080 <HAL_TIM_IC_CaptureCallback>
 8004dde:	e005      	b.n	8004dec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 f943 	bl	800506c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f954 	bl	8005094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	f003 0310 	and.w	r3, r3, #16
 8004dfc:	2b10      	cmp	r3, #16
 8004dfe:	d122      	bne.n	8004e46 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f003 0310 	and.w	r3, r3, #16
 8004e0a:	2b10      	cmp	r3, #16
 8004e0c:	d11b      	bne.n	8004e46 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f06f 0210 	mvn.w	r2, #16
 8004e16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2208      	movs	r2, #8
 8004e1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	69db      	ldr	r3, [r3, #28]
 8004e24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f927 	bl	8005080 <HAL_TIM_IC_CaptureCallback>
 8004e32:	e005      	b.n	8004e40 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f919 	bl	800506c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f92a 	bl	8005094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d10e      	bne.n	8004e72 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d107      	bne.n	8004e72 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f06f 0201 	mvn.w	r2, #1
 8004e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f7fc fd87 	bl	8001980 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e7c:	2b80      	cmp	r3, #128	; 0x80
 8004e7e:	d10e      	bne.n	8004e9e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e8a:	2b80      	cmp	r3, #128	; 0x80
 8004e8c:	d107      	bne.n	8004e9e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 facf 	bl	800543c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea8:	2b40      	cmp	r3, #64	; 0x40
 8004eaa:	d10e      	bne.n	8004eca <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb6:	2b40      	cmp	r3, #64	; 0x40
 8004eb8:	d107      	bne.n	8004eca <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 f8ef 	bl	80050a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	f003 0320 	and.w	r3, r3, #32
 8004ed4:	2b20      	cmp	r3, #32
 8004ed6:	d10e      	bne.n	8004ef6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	f003 0320 	and.w	r3, r3, #32
 8004ee2:	2b20      	cmp	r3, #32
 8004ee4:	d107      	bne.n	8004ef6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f06f 0220 	mvn.w	r2, #32
 8004eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 fa99 	bl	8005428 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ef6:	bf00      	nop
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b084      	sub	sp, #16
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
 8004f06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d101      	bne.n	8004f16 <HAL_TIM_ConfigClockSource+0x18>
 8004f12:	2302      	movs	r3, #2
 8004f14:	e0a6      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x166>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2202      	movs	r2, #2
 8004f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f34:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f3c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b40      	cmp	r3, #64	; 0x40
 8004f4c:	d067      	beq.n	800501e <HAL_TIM_ConfigClockSource+0x120>
 8004f4e:	2b40      	cmp	r3, #64	; 0x40
 8004f50:	d80b      	bhi.n	8004f6a <HAL_TIM_ConfigClockSource+0x6c>
 8004f52:	2b10      	cmp	r3, #16
 8004f54:	d073      	beq.n	800503e <HAL_TIM_ConfigClockSource+0x140>
 8004f56:	2b10      	cmp	r3, #16
 8004f58:	d802      	bhi.n	8004f60 <HAL_TIM_ConfigClockSource+0x62>
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d06f      	beq.n	800503e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004f5e:	e078      	b.n	8005052 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	d06c      	beq.n	800503e <HAL_TIM_ConfigClockSource+0x140>
 8004f64:	2b30      	cmp	r3, #48	; 0x30
 8004f66:	d06a      	beq.n	800503e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004f68:	e073      	b.n	8005052 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004f6a:	2b70      	cmp	r3, #112	; 0x70
 8004f6c:	d00d      	beq.n	8004f8a <HAL_TIM_ConfigClockSource+0x8c>
 8004f6e:	2b70      	cmp	r3, #112	; 0x70
 8004f70:	d804      	bhi.n	8004f7c <HAL_TIM_ConfigClockSource+0x7e>
 8004f72:	2b50      	cmp	r3, #80	; 0x50
 8004f74:	d033      	beq.n	8004fde <HAL_TIM_ConfigClockSource+0xe0>
 8004f76:	2b60      	cmp	r3, #96	; 0x60
 8004f78:	d041      	beq.n	8004ffe <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004f7a:	e06a      	b.n	8005052 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f80:	d066      	beq.n	8005050 <HAL_TIM_ConfigClockSource+0x152>
 8004f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f86:	d017      	beq.n	8004fb8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004f88:	e063      	b.n	8005052 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6818      	ldr	r0, [r3, #0]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	6899      	ldr	r1, [r3, #8]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	f000 f9a9 	bl	80052f0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	609a      	str	r2, [r3, #8]
      break;
 8004fb6:	e04c      	b.n	8005052 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6818      	ldr	r0, [r3, #0]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	6899      	ldr	r1, [r3, #8]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	f000 f992 	bl	80052f0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689a      	ldr	r2, [r3, #8]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fda:	609a      	str	r2, [r3, #8]
      break;
 8004fdc:	e039      	b.n	8005052 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6818      	ldr	r0, [r3, #0]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	6859      	ldr	r1, [r3, #4]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	461a      	mov	r2, r3
 8004fec:	f000 f906 	bl	80051fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2150      	movs	r1, #80	; 0x50
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 f95f 	bl	80052ba <TIM_ITRx_SetConfig>
      break;
 8004ffc:	e029      	b.n	8005052 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6818      	ldr	r0, [r3, #0]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	6859      	ldr	r1, [r3, #4]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	461a      	mov	r2, r3
 800500c:	f000 f925 	bl	800525a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2160      	movs	r1, #96	; 0x60
 8005016:	4618      	mov	r0, r3
 8005018:	f000 f94f 	bl	80052ba <TIM_ITRx_SetConfig>
      break;
 800501c:	e019      	b.n	8005052 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6818      	ldr	r0, [r3, #0]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	6859      	ldr	r1, [r3, #4]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	461a      	mov	r2, r3
 800502c:	f000 f8e6 	bl	80051fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2140      	movs	r1, #64	; 0x40
 8005036:	4618      	mov	r0, r3
 8005038:	f000 f93f 	bl	80052ba <TIM_ITRx_SetConfig>
      break;
 800503c:	e009      	b.n	8005052 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4619      	mov	r1, r3
 8005048:	4610      	mov	r0, r2
 800504a:	f000 f936 	bl	80052ba <TIM_ITRx_SetConfig>
      break;
 800504e:	e000      	b.n	8005052 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005050:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a40      	ldr	r2, [pc, #256]	; (80051d0 <TIM_Base_SetConfig+0x114>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d013      	beq.n	80050fc <TIM_Base_SetConfig+0x40>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050da:	d00f      	beq.n	80050fc <TIM_Base_SetConfig+0x40>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a3d      	ldr	r2, [pc, #244]	; (80051d4 <TIM_Base_SetConfig+0x118>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d00b      	beq.n	80050fc <TIM_Base_SetConfig+0x40>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a3c      	ldr	r2, [pc, #240]	; (80051d8 <TIM_Base_SetConfig+0x11c>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d007      	beq.n	80050fc <TIM_Base_SetConfig+0x40>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a3b      	ldr	r2, [pc, #236]	; (80051dc <TIM_Base_SetConfig+0x120>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d003      	beq.n	80050fc <TIM_Base_SetConfig+0x40>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a3a      	ldr	r2, [pc, #232]	; (80051e0 <TIM_Base_SetConfig+0x124>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d108      	bne.n	800510e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	4313      	orrs	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a2f      	ldr	r2, [pc, #188]	; (80051d0 <TIM_Base_SetConfig+0x114>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d02b      	beq.n	800516e <TIM_Base_SetConfig+0xb2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800511c:	d027      	beq.n	800516e <TIM_Base_SetConfig+0xb2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a2c      	ldr	r2, [pc, #176]	; (80051d4 <TIM_Base_SetConfig+0x118>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d023      	beq.n	800516e <TIM_Base_SetConfig+0xb2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a2b      	ldr	r2, [pc, #172]	; (80051d8 <TIM_Base_SetConfig+0x11c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d01f      	beq.n	800516e <TIM_Base_SetConfig+0xb2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a2a      	ldr	r2, [pc, #168]	; (80051dc <TIM_Base_SetConfig+0x120>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d01b      	beq.n	800516e <TIM_Base_SetConfig+0xb2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a29      	ldr	r2, [pc, #164]	; (80051e0 <TIM_Base_SetConfig+0x124>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d017      	beq.n	800516e <TIM_Base_SetConfig+0xb2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a28      	ldr	r2, [pc, #160]	; (80051e4 <TIM_Base_SetConfig+0x128>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d013      	beq.n	800516e <TIM_Base_SetConfig+0xb2>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a27      	ldr	r2, [pc, #156]	; (80051e8 <TIM_Base_SetConfig+0x12c>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d00f      	beq.n	800516e <TIM_Base_SetConfig+0xb2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a26      	ldr	r2, [pc, #152]	; (80051ec <TIM_Base_SetConfig+0x130>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d00b      	beq.n	800516e <TIM_Base_SetConfig+0xb2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a25      	ldr	r2, [pc, #148]	; (80051f0 <TIM_Base_SetConfig+0x134>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d007      	beq.n	800516e <TIM_Base_SetConfig+0xb2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a24      	ldr	r2, [pc, #144]	; (80051f4 <TIM_Base_SetConfig+0x138>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d003      	beq.n	800516e <TIM_Base_SetConfig+0xb2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a23      	ldr	r2, [pc, #140]	; (80051f8 <TIM_Base_SetConfig+0x13c>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d108      	bne.n	8005180 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	4313      	orrs	r3, r2
 800517e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	4313      	orrs	r3, r2
 800518c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	689a      	ldr	r2, [r3, #8]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a0a      	ldr	r2, [pc, #40]	; (80051d0 <TIM_Base_SetConfig+0x114>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d003      	beq.n	80051b4 <TIM_Base_SetConfig+0xf8>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a0c      	ldr	r2, [pc, #48]	; (80051e0 <TIM_Base_SetConfig+0x124>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d103      	bne.n	80051bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	691a      	ldr	r2, [r3, #16]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	615a      	str	r2, [r3, #20]
}
 80051c2:	bf00      	nop
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	40010000 	.word	0x40010000
 80051d4:	40000400 	.word	0x40000400
 80051d8:	40000800 	.word	0x40000800
 80051dc:	40000c00 	.word	0x40000c00
 80051e0:	40010400 	.word	0x40010400
 80051e4:	40014000 	.word	0x40014000
 80051e8:	40014400 	.word	0x40014400
 80051ec:	40014800 	.word	0x40014800
 80051f0:	40001800 	.word	0x40001800
 80051f4:	40001c00 	.word	0x40001c00
 80051f8:	40002000 	.word	0x40002000

080051fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b087      	sub	sp, #28
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6a1b      	ldr	r3, [r3, #32]
 800520c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	f023 0201 	bic.w	r2, r3, #1
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005226:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	011b      	lsls	r3, r3, #4
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	4313      	orrs	r3, r2
 8005230:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f023 030a 	bic.w	r3, r3, #10
 8005238:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	4313      	orrs	r3, r2
 8005240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	621a      	str	r2, [r3, #32]
}
 800524e:	bf00      	nop
 8005250:	371c      	adds	r7, #28
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800525a:	b480      	push	{r7}
 800525c:	b087      	sub	sp, #28
 800525e:	af00      	add	r7, sp, #0
 8005260:	60f8      	str	r0, [r7, #12]
 8005262:	60b9      	str	r1, [r7, #8]
 8005264:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	f023 0210 	bic.w	r2, r3, #16
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005284:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	031b      	lsls	r3, r3, #12
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	4313      	orrs	r3, r2
 800528e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005296:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	011b      	lsls	r3, r3, #4
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	4313      	orrs	r3, r2
 80052a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	621a      	str	r2, [r3, #32]
}
 80052ae:	bf00      	nop
 80052b0:	371c      	adds	r7, #28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b085      	sub	sp, #20
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
 80052c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	f043 0307 	orr.w	r3, r3, #7
 80052dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	609a      	str	r2, [r3, #8]
}
 80052e4:	bf00      	nop
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
 80052fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800530a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	021a      	lsls	r2, r3, #8
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	431a      	orrs	r2, r3
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	4313      	orrs	r3, r2
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	4313      	orrs	r3, r2
 800531c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	609a      	str	r2, [r3, #8]
}
 8005324:	bf00      	nop
 8005326:	371c      	adds	r7, #28
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005340:	2b01      	cmp	r3, #1
 8005342:	d101      	bne.n	8005348 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005344:	2302      	movs	r3, #2
 8005346:	e05a      	b.n	80053fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800536e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	4313      	orrs	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a21      	ldr	r2, [pc, #132]	; (800540c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d022      	beq.n	80053d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005394:	d01d      	beq.n	80053d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a1d      	ldr	r2, [pc, #116]	; (8005410 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d018      	beq.n	80053d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a1b      	ldr	r2, [pc, #108]	; (8005414 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d013      	beq.n	80053d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a1a      	ldr	r2, [pc, #104]	; (8005418 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d00e      	beq.n	80053d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a18      	ldr	r2, [pc, #96]	; (800541c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d009      	beq.n	80053d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a17      	ldr	r2, [pc, #92]	; (8005420 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d004      	beq.n	80053d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a15      	ldr	r2, [pc, #84]	; (8005424 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d10c      	bne.n	80053ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	40010000 	.word	0x40010000
 8005410:	40000400 	.word	0x40000400
 8005414:	40000800 	.word	0x40000800
 8005418:	40000c00 	.word	0x40000c00
 800541c:	40010400 	.word	0x40010400
 8005420:	40014000 	.word	0x40014000
 8005424:	40001800 	.word	0x40001800

08005428 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e03f      	b.n	80054e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d106      	bne.n	800547c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7fc fc78 	bl	8001d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2224      	movs	r2, #36	; 0x24
 8005480:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68da      	ldr	r2, [r3, #12]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005492:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 faef 	bl	8005a78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	691a      	ldr	r2, [r3, #16]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	695a      	ldr	r2, [r3, #20]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68da      	ldr	r2, [r3, #12]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2220      	movs	r2, #32
 80054d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2220      	movs	r2, #32
 80054dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b085      	sub	sp, #20
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	60f8      	str	r0, [r7, #12]
 80054f2:	60b9      	str	r1, [r7, #8]
 80054f4:	4613      	mov	r3, r2
 80054f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b20      	cmp	r3, #32
 8005502:	d130      	bne.n	8005566 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d002      	beq.n	8005510 <HAL_UART_Transmit_IT+0x26>
 800550a:	88fb      	ldrh	r3, [r7, #6]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e029      	b.n	8005568 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800551a:	2b01      	cmp	r3, #1
 800551c:	d101      	bne.n	8005522 <HAL_UART_Transmit_IT+0x38>
 800551e:	2302      	movs	r3, #2
 8005520:	e022      	b.n	8005568 <HAL_UART_Transmit_IT+0x7e>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	88fa      	ldrh	r2, [r7, #6]
 8005534:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	88fa      	ldrh	r2, [r7, #6]
 800553a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2221      	movs	r2, #33	; 0x21
 8005546:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68da      	ldr	r2, [r3, #12]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005560:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005562:	2300      	movs	r3, #0
 8005564:	e000      	b.n	8005568 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005566:	2302      	movs	r3, #2
  }
}
 8005568:	4618      	mov	r0, r3
 800556a:	3714      	adds	r7, #20
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	4613      	mov	r3, r2
 8005580:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b20      	cmp	r3, #32
 800558c:	d140      	bne.n	8005610 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d002      	beq.n	800559a <HAL_UART_Receive_IT+0x26>
 8005594:	88fb      	ldrh	r3, [r7, #6]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e039      	b.n	8005612 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d101      	bne.n	80055ac <HAL_UART_Receive_IT+0x38>
 80055a8:	2302      	movs	r3, #2
 80055aa:	e032      	b.n	8005612 <HAL_UART_Receive_IT+0x9e>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	88fa      	ldrh	r2, [r7, #6]
 80055be:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	88fa      	ldrh	r2, [r7, #6]
 80055c4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2222      	movs	r2, #34	; 0x22
 80055d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68da      	ldr	r2, [r3, #12]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055ea:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	695a      	ldr	r2, [r3, #20]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0201 	orr.w	r2, r2, #1
 80055fa:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68da      	ldr	r2, [r3, #12]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f042 0220 	orr.w	r2, r2, #32
 800560a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800560c:	2300      	movs	r3, #0
 800560e:	e000      	b.n	8005612 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005610:	2302      	movs	r3, #2
  }
}
 8005612:	4618      	mov	r0, r3
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
	...

08005620 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b088      	sub	sp, #32
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005640:	2300      	movs	r3, #0
 8005642:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005644:	2300      	movs	r3, #0
 8005646:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	f003 030f 	and.w	r3, r3, #15
 800564e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10d      	bne.n	8005672 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	f003 0320 	and.w	r3, r3, #32
 800565c:	2b00      	cmp	r3, #0
 800565e:	d008      	beq.n	8005672 <HAL_UART_IRQHandler+0x52>
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	f003 0320 	and.w	r3, r3, #32
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f982 	bl	8005974 <UART_Receive_IT>
      return;
 8005670:	e0d1      	b.n	8005816 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 80b0 	beq.w	80057da <HAL_UART_IRQHandler+0x1ba>
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b00      	cmp	r3, #0
 8005682:	d105      	bne.n	8005690 <HAL_UART_IRQHandler+0x70>
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 80a5 	beq.w	80057da <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <HAL_UART_IRQHandler+0x90>
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d005      	beq.n	80056b0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a8:	f043 0201 	orr.w	r2, r3, #1
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	f003 0304 	and.w	r3, r3, #4
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00a      	beq.n	80056d0 <HAL_UART_IRQHandler+0xb0>
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d005      	beq.n	80056d0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c8:	f043 0202 	orr.w	r2, r3, #2
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	f003 0302 	and.w	r3, r3, #2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00a      	beq.n	80056f0 <HAL_UART_IRQHandler+0xd0>
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f003 0301 	and.w	r3, r3, #1
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d005      	beq.n	80056f0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e8:	f043 0204 	orr.w	r2, r3, #4
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	f003 0308 	and.w	r3, r3, #8
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00f      	beq.n	800571a <HAL_UART_IRQHandler+0xfa>
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	f003 0320 	and.w	r3, r3, #32
 8005700:	2b00      	cmp	r3, #0
 8005702:	d104      	bne.n	800570e <HAL_UART_IRQHandler+0xee>
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b00      	cmp	r3, #0
 800570c:	d005      	beq.n	800571a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005712:	f043 0208 	orr.w	r2, r3, #8
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571e:	2b00      	cmp	r3, #0
 8005720:	d078      	beq.n	8005814 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	f003 0320 	and.w	r3, r3, #32
 8005728:	2b00      	cmp	r3, #0
 800572a:	d007      	beq.n	800573c <HAL_UART_IRQHandler+0x11c>
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	f003 0320 	and.w	r3, r3, #32
 8005732:	2b00      	cmp	r3, #0
 8005734:	d002      	beq.n	800573c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f91c 	bl	8005974 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005746:	2b40      	cmp	r3, #64	; 0x40
 8005748:	bf0c      	ite	eq
 800574a:	2301      	moveq	r3, #1
 800574c:	2300      	movne	r3, #0
 800574e:	b2db      	uxtb	r3, r3
 8005750:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005756:	f003 0308 	and.w	r3, r3, #8
 800575a:	2b00      	cmp	r3, #0
 800575c:	d102      	bne.n	8005764 <HAL_UART_IRQHandler+0x144>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d031      	beq.n	80057c8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f865 	bl	8005834 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005774:	2b40      	cmp	r3, #64	; 0x40
 8005776:	d123      	bne.n	80057c0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	695a      	ldr	r2, [r3, #20]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005786:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800578c:	2b00      	cmp	r3, #0
 800578e:	d013      	beq.n	80057b8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005794:	4a21      	ldr	r2, [pc, #132]	; (800581c <HAL_UART_IRQHandler+0x1fc>)
 8005796:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579c:	4618      	mov	r0, r3
 800579e:	f7fd fa71 	bl	8002c84 <HAL_DMA_Abort_IT>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d016      	beq.n	80057d6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057b2:	4610      	mov	r0, r2
 80057b4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b6:	e00e      	b.n	80057d6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f831 	bl	8005820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057be:	e00a      	b.n	80057d6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 f82d 	bl	8005820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c6:	e006      	b.n	80057d6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 f829 	bl	8005820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80057d4:	e01e      	b.n	8005814 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057d6:	bf00      	nop
    return;
 80057d8:	e01c      	b.n	8005814 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d008      	beq.n	80057f6 <HAL_UART_IRQHandler+0x1d6>
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f852 	bl	8005898 <UART_Transmit_IT>
    return;
 80057f4:	e00f      	b.n	8005816 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00a      	beq.n	8005816 <HAL_UART_IRQHandler+0x1f6>
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005806:	2b00      	cmp	r3, #0
 8005808:	d005      	beq.n	8005816 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f89a 	bl	8005944 <UART_EndTransmit_IT>
    return;
 8005810:	bf00      	nop
 8005812:	e000      	b.n	8005816 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005814:	bf00      	nop
  }
}
 8005816:	3720      	adds	r7, #32
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	08005871 	.word	0x08005871

08005820 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68da      	ldr	r2, [r3, #12]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800584a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	695a      	ldr	r2, [r3, #20]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 0201 	bic.w	r2, r2, #1
 800585a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2220      	movs	r2, #32
 8005860:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f7ff ffc8 	bl	8005820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005890:	bf00      	nop
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b21      	cmp	r3, #33	; 0x21
 80058aa:	d144      	bne.n	8005936 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058b4:	d11a      	bne.n	80058ec <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	881b      	ldrh	r3, [r3, #0]
 80058c0:	461a      	mov	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058ca:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d105      	bne.n	80058e0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	1c9a      	adds	r2, r3, #2
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	621a      	str	r2, [r3, #32]
 80058de:	e00e      	b.n	80058fe <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	1c5a      	adds	r2, r3, #1
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	621a      	str	r2, [r3, #32]
 80058ea:	e008      	b.n	80058fe <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a1b      	ldr	r3, [r3, #32]
 80058f0:	1c59      	adds	r1, r3, #1
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	6211      	str	r1, [r2, #32]
 80058f6:	781a      	ldrb	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005902:	b29b      	uxth	r3, r3
 8005904:	3b01      	subs	r3, #1
 8005906:	b29b      	uxth	r3, r3
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	4619      	mov	r1, r3
 800590c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10f      	bne.n	8005932 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68da      	ldr	r2, [r3, #12]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005920:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68da      	ldr	r2, [r3, #12]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005930:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005932:	2300      	movs	r3, #0
 8005934:	e000      	b.n	8005938 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005936:	2302      	movs	r3, #2
  }
}
 8005938:	4618      	mov	r0, r3
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68da      	ldr	r2, [r3, #12]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800595a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2220      	movs	r2, #32
 8005960:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f7fb fec1 	bl	80016ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3708      	adds	r7, #8
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b22      	cmp	r3, #34	; 0x22
 8005986:	d171      	bne.n	8005a6c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005990:	d123      	bne.n	80059da <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005996:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10e      	bne.n	80059be <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b6:	1c9a      	adds	r2, r3, #2
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	629a      	str	r2, [r3, #40]	; 0x28
 80059bc:	e029      	b.n	8005a12 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d2:	1c5a      	adds	r2, r3, #1
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	629a      	str	r2, [r3, #40]	; 0x28
 80059d8:	e01b      	b.n	8005a12 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10a      	bne.n	80059f8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	6858      	ldr	r0, [r3, #4]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ec:	1c59      	adds	r1, r3, #1
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	6291      	str	r1, [r2, #40]	; 0x28
 80059f2:	b2c2      	uxtb	r2, r0
 80059f4:	701a      	strb	r2, [r3, #0]
 80059f6:	e00c      	b.n	8005a12 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a04:	1c58      	adds	r0, r3, #1
 8005a06:	6879      	ldr	r1, [r7, #4]
 8005a08:	6288      	str	r0, [r1, #40]	; 0x28
 8005a0a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a0e:	b2d2      	uxtb	r2, r2
 8005a10:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	4619      	mov	r1, r3
 8005a20:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d120      	bne.n	8005a68 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f022 0220 	bic.w	r2, r2, #32
 8005a34:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68da      	ldr	r2, [r3, #12]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a44:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	695a      	ldr	r2, [r3, #20]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 0201 	bic.w	r2, r2, #1
 8005a54:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7fb fdee 	bl	8001640 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005a64:	2300      	movs	r3, #0
 8005a66:	e002      	b.n	8005a6e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	e000      	b.n	8005a6e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005a6c:	2302      	movs	r3, #2
  }
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
	...

08005a78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a7c:	b085      	sub	sp, #20
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68da      	ldr	r2, [r3, #12]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	430a      	orrs	r2, r1
 8005a96:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	431a      	orrs	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	69db      	ldr	r3, [r3, #28]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005aba:	f023 030c 	bic.w	r3, r3, #12
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	6812      	ldr	r2, [r2, #0]
 8005ac2:	68f9      	ldr	r1, [r7, #12]
 8005ac4:	430b      	orrs	r3, r1
 8005ac6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699a      	ldr	r2, [r3, #24]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ae6:	f040 8199 	bne.w	8005e1c <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4ac6      	ldr	r2, [pc, #792]	; (8005e08 <UART_SetConfig+0x390>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d00f      	beq.n	8005b14 <UART_SetConfig+0x9c>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4ac4      	ldr	r2, [pc, #784]	; (8005e0c <UART_SetConfig+0x394>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d00a      	beq.n	8005b14 <UART_SetConfig+0x9c>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4ac3      	ldr	r2, [pc, #780]	; (8005e10 <UART_SetConfig+0x398>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d005      	beq.n	8005b14 <UART_SetConfig+0x9c>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4ac1      	ldr	r2, [pc, #772]	; (8005e14 <UART_SetConfig+0x39c>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	f040 80bd 	bne.w	8005c8e <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b14:	f7fe f82a 	bl	8003b6c <HAL_RCC_GetPCLK2Freq>
 8005b18:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	461d      	mov	r5, r3
 8005b1e:	f04f 0600 	mov.w	r6, #0
 8005b22:	46a8      	mov	r8, r5
 8005b24:	46b1      	mov	r9, r6
 8005b26:	eb18 0308 	adds.w	r3, r8, r8
 8005b2a:	eb49 0409 	adc.w	r4, r9, r9
 8005b2e:	4698      	mov	r8, r3
 8005b30:	46a1      	mov	r9, r4
 8005b32:	eb18 0805 	adds.w	r8, r8, r5
 8005b36:	eb49 0906 	adc.w	r9, r9, r6
 8005b3a:	f04f 0100 	mov.w	r1, #0
 8005b3e:	f04f 0200 	mov.w	r2, #0
 8005b42:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b46:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b4a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b4e:	4688      	mov	r8, r1
 8005b50:	4691      	mov	r9, r2
 8005b52:	eb18 0005 	adds.w	r0, r8, r5
 8005b56:	eb49 0106 	adc.w	r1, r9, r6
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	461d      	mov	r5, r3
 8005b60:	f04f 0600 	mov.w	r6, #0
 8005b64:	196b      	adds	r3, r5, r5
 8005b66:	eb46 0406 	adc.w	r4, r6, r6
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	4623      	mov	r3, r4
 8005b6e:	f7fa ff91 	bl	8000a94 <__aeabi_uldivmod>
 8005b72:	4603      	mov	r3, r0
 8005b74:	460c      	mov	r4, r1
 8005b76:	461a      	mov	r2, r3
 8005b78:	4ba7      	ldr	r3, [pc, #668]	; (8005e18 <UART_SetConfig+0x3a0>)
 8005b7a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b7e:	095b      	lsrs	r3, r3, #5
 8005b80:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	461d      	mov	r5, r3
 8005b88:	f04f 0600 	mov.w	r6, #0
 8005b8c:	46a9      	mov	r9, r5
 8005b8e:	46b2      	mov	sl, r6
 8005b90:	eb19 0309 	adds.w	r3, r9, r9
 8005b94:	eb4a 040a 	adc.w	r4, sl, sl
 8005b98:	4699      	mov	r9, r3
 8005b9a:	46a2      	mov	sl, r4
 8005b9c:	eb19 0905 	adds.w	r9, r9, r5
 8005ba0:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ba4:	f04f 0100 	mov.w	r1, #0
 8005ba8:	f04f 0200 	mov.w	r2, #0
 8005bac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bb0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bb4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bb8:	4689      	mov	r9, r1
 8005bba:	4692      	mov	sl, r2
 8005bbc:	eb19 0005 	adds.w	r0, r9, r5
 8005bc0:	eb4a 0106 	adc.w	r1, sl, r6
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	461d      	mov	r5, r3
 8005bca:	f04f 0600 	mov.w	r6, #0
 8005bce:	196b      	adds	r3, r5, r5
 8005bd0:	eb46 0406 	adc.w	r4, r6, r6
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	4623      	mov	r3, r4
 8005bd8:	f7fa ff5c 	bl	8000a94 <__aeabi_uldivmod>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	460c      	mov	r4, r1
 8005be0:	461a      	mov	r2, r3
 8005be2:	4b8d      	ldr	r3, [pc, #564]	; (8005e18 <UART_SetConfig+0x3a0>)
 8005be4:	fba3 1302 	umull	r1, r3, r3, r2
 8005be8:	095b      	lsrs	r3, r3, #5
 8005bea:	2164      	movs	r1, #100	; 0x64
 8005bec:	fb01 f303 	mul.w	r3, r1, r3
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	3332      	adds	r3, #50	; 0x32
 8005bf6:	4a88      	ldr	r2, [pc, #544]	; (8005e18 <UART_SetConfig+0x3a0>)
 8005bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bfc:	095b      	lsrs	r3, r3, #5
 8005bfe:	005b      	lsls	r3, r3, #1
 8005c00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c04:	4498      	add	r8, r3
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	461d      	mov	r5, r3
 8005c0a:	f04f 0600 	mov.w	r6, #0
 8005c0e:	46a9      	mov	r9, r5
 8005c10:	46b2      	mov	sl, r6
 8005c12:	eb19 0309 	adds.w	r3, r9, r9
 8005c16:	eb4a 040a 	adc.w	r4, sl, sl
 8005c1a:	4699      	mov	r9, r3
 8005c1c:	46a2      	mov	sl, r4
 8005c1e:	eb19 0905 	adds.w	r9, r9, r5
 8005c22:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c26:	f04f 0100 	mov.w	r1, #0
 8005c2a:	f04f 0200 	mov.w	r2, #0
 8005c2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c3a:	4689      	mov	r9, r1
 8005c3c:	4692      	mov	sl, r2
 8005c3e:	eb19 0005 	adds.w	r0, r9, r5
 8005c42:	eb4a 0106 	adc.w	r1, sl, r6
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	461d      	mov	r5, r3
 8005c4c:	f04f 0600 	mov.w	r6, #0
 8005c50:	196b      	adds	r3, r5, r5
 8005c52:	eb46 0406 	adc.w	r4, r6, r6
 8005c56:	461a      	mov	r2, r3
 8005c58:	4623      	mov	r3, r4
 8005c5a:	f7fa ff1b 	bl	8000a94 <__aeabi_uldivmod>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	460c      	mov	r4, r1
 8005c62:	461a      	mov	r2, r3
 8005c64:	4b6c      	ldr	r3, [pc, #432]	; (8005e18 <UART_SetConfig+0x3a0>)
 8005c66:	fba3 1302 	umull	r1, r3, r3, r2
 8005c6a:	095b      	lsrs	r3, r3, #5
 8005c6c:	2164      	movs	r1, #100	; 0x64
 8005c6e:	fb01 f303 	mul.w	r3, r1, r3
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	00db      	lsls	r3, r3, #3
 8005c76:	3332      	adds	r3, #50	; 0x32
 8005c78:	4a67      	ldr	r2, [pc, #412]	; (8005e18 <UART_SetConfig+0x3a0>)
 8005c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7e:	095b      	lsrs	r3, r3, #5
 8005c80:	f003 0207 	and.w	r2, r3, #7
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4442      	add	r2, r8
 8005c8a:	609a      	str	r2, [r3, #8]
 8005c8c:	e27d      	b.n	800618a <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c8e:	f7fd ff59 	bl	8003b44 <HAL_RCC_GetPCLK1Freq>
 8005c92:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	461d      	mov	r5, r3
 8005c98:	f04f 0600 	mov.w	r6, #0
 8005c9c:	46a8      	mov	r8, r5
 8005c9e:	46b1      	mov	r9, r6
 8005ca0:	eb18 0308 	adds.w	r3, r8, r8
 8005ca4:	eb49 0409 	adc.w	r4, r9, r9
 8005ca8:	4698      	mov	r8, r3
 8005caa:	46a1      	mov	r9, r4
 8005cac:	eb18 0805 	adds.w	r8, r8, r5
 8005cb0:	eb49 0906 	adc.w	r9, r9, r6
 8005cb4:	f04f 0100 	mov.w	r1, #0
 8005cb8:	f04f 0200 	mov.w	r2, #0
 8005cbc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005cc0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005cc4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005cc8:	4688      	mov	r8, r1
 8005cca:	4691      	mov	r9, r2
 8005ccc:	eb18 0005 	adds.w	r0, r8, r5
 8005cd0:	eb49 0106 	adc.w	r1, r9, r6
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	461d      	mov	r5, r3
 8005cda:	f04f 0600 	mov.w	r6, #0
 8005cde:	196b      	adds	r3, r5, r5
 8005ce0:	eb46 0406 	adc.w	r4, r6, r6
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	4623      	mov	r3, r4
 8005ce8:	f7fa fed4 	bl	8000a94 <__aeabi_uldivmod>
 8005cec:	4603      	mov	r3, r0
 8005cee:	460c      	mov	r4, r1
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	4b49      	ldr	r3, [pc, #292]	; (8005e18 <UART_SetConfig+0x3a0>)
 8005cf4:	fba3 2302 	umull	r2, r3, r3, r2
 8005cf8:	095b      	lsrs	r3, r3, #5
 8005cfa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	461d      	mov	r5, r3
 8005d02:	f04f 0600 	mov.w	r6, #0
 8005d06:	46a9      	mov	r9, r5
 8005d08:	46b2      	mov	sl, r6
 8005d0a:	eb19 0309 	adds.w	r3, r9, r9
 8005d0e:	eb4a 040a 	adc.w	r4, sl, sl
 8005d12:	4699      	mov	r9, r3
 8005d14:	46a2      	mov	sl, r4
 8005d16:	eb19 0905 	adds.w	r9, r9, r5
 8005d1a:	eb4a 0a06 	adc.w	sl, sl, r6
 8005d1e:	f04f 0100 	mov.w	r1, #0
 8005d22:	f04f 0200 	mov.w	r2, #0
 8005d26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d32:	4689      	mov	r9, r1
 8005d34:	4692      	mov	sl, r2
 8005d36:	eb19 0005 	adds.w	r0, r9, r5
 8005d3a:	eb4a 0106 	adc.w	r1, sl, r6
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	461d      	mov	r5, r3
 8005d44:	f04f 0600 	mov.w	r6, #0
 8005d48:	196b      	adds	r3, r5, r5
 8005d4a:	eb46 0406 	adc.w	r4, r6, r6
 8005d4e:	461a      	mov	r2, r3
 8005d50:	4623      	mov	r3, r4
 8005d52:	f7fa fe9f 	bl	8000a94 <__aeabi_uldivmod>
 8005d56:	4603      	mov	r3, r0
 8005d58:	460c      	mov	r4, r1
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	4b2e      	ldr	r3, [pc, #184]	; (8005e18 <UART_SetConfig+0x3a0>)
 8005d5e:	fba3 1302 	umull	r1, r3, r3, r2
 8005d62:	095b      	lsrs	r3, r3, #5
 8005d64:	2164      	movs	r1, #100	; 0x64
 8005d66:	fb01 f303 	mul.w	r3, r1, r3
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	00db      	lsls	r3, r3, #3
 8005d6e:	3332      	adds	r3, #50	; 0x32
 8005d70:	4a29      	ldr	r2, [pc, #164]	; (8005e18 <UART_SetConfig+0x3a0>)
 8005d72:	fba2 2303 	umull	r2, r3, r2, r3
 8005d76:	095b      	lsrs	r3, r3, #5
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d7e:	4498      	add	r8, r3
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	461d      	mov	r5, r3
 8005d84:	f04f 0600 	mov.w	r6, #0
 8005d88:	46a9      	mov	r9, r5
 8005d8a:	46b2      	mov	sl, r6
 8005d8c:	eb19 0309 	adds.w	r3, r9, r9
 8005d90:	eb4a 040a 	adc.w	r4, sl, sl
 8005d94:	4699      	mov	r9, r3
 8005d96:	46a2      	mov	sl, r4
 8005d98:	eb19 0905 	adds.w	r9, r9, r5
 8005d9c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005da0:	f04f 0100 	mov.w	r1, #0
 8005da4:	f04f 0200 	mov.w	r2, #0
 8005da8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005db0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005db4:	4689      	mov	r9, r1
 8005db6:	4692      	mov	sl, r2
 8005db8:	eb19 0005 	adds.w	r0, r9, r5
 8005dbc:	eb4a 0106 	adc.w	r1, sl, r6
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	461d      	mov	r5, r3
 8005dc6:	f04f 0600 	mov.w	r6, #0
 8005dca:	196b      	adds	r3, r5, r5
 8005dcc:	eb46 0406 	adc.w	r4, r6, r6
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	4623      	mov	r3, r4
 8005dd4:	f7fa fe5e 	bl	8000a94 <__aeabi_uldivmod>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	460c      	mov	r4, r1
 8005ddc:	461a      	mov	r2, r3
 8005dde:	4b0e      	ldr	r3, [pc, #56]	; (8005e18 <UART_SetConfig+0x3a0>)
 8005de0:	fba3 1302 	umull	r1, r3, r3, r2
 8005de4:	095b      	lsrs	r3, r3, #5
 8005de6:	2164      	movs	r1, #100	; 0x64
 8005de8:	fb01 f303 	mul.w	r3, r1, r3
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	00db      	lsls	r3, r3, #3
 8005df0:	3332      	adds	r3, #50	; 0x32
 8005df2:	4a09      	ldr	r2, [pc, #36]	; (8005e18 <UART_SetConfig+0x3a0>)
 8005df4:	fba2 2303 	umull	r2, r3, r2, r3
 8005df8:	095b      	lsrs	r3, r3, #5
 8005dfa:	f003 0207 	and.w	r2, r3, #7
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4442      	add	r2, r8
 8005e04:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005e06:	e1c0      	b.n	800618a <UART_SetConfig+0x712>
 8005e08:	40011000 	.word	0x40011000
 8005e0c:	40011400 	.word	0x40011400
 8005e10:	40011800 	.word	0x40011800
 8005e14:	40011c00 	.word	0x40011c00
 8005e18:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4adc      	ldr	r2, [pc, #880]	; (8006194 <UART_SetConfig+0x71c>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d00f      	beq.n	8005e46 <UART_SetConfig+0x3ce>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4adb      	ldr	r2, [pc, #876]	; (8006198 <UART_SetConfig+0x720>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d00a      	beq.n	8005e46 <UART_SetConfig+0x3ce>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4ad9      	ldr	r2, [pc, #868]	; (800619c <UART_SetConfig+0x724>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d005      	beq.n	8005e46 <UART_SetConfig+0x3ce>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4ad8      	ldr	r2, [pc, #864]	; (80061a0 <UART_SetConfig+0x728>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	f040 80d1 	bne.w	8005fe8 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e46:	f7fd fe91 	bl	8003b6c <HAL_RCC_GetPCLK2Freq>
 8005e4a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	469a      	mov	sl, r3
 8005e50:	f04f 0b00 	mov.w	fp, #0
 8005e54:	46d0      	mov	r8, sl
 8005e56:	46d9      	mov	r9, fp
 8005e58:	eb18 0308 	adds.w	r3, r8, r8
 8005e5c:	eb49 0409 	adc.w	r4, r9, r9
 8005e60:	4698      	mov	r8, r3
 8005e62:	46a1      	mov	r9, r4
 8005e64:	eb18 080a 	adds.w	r8, r8, sl
 8005e68:	eb49 090b 	adc.w	r9, r9, fp
 8005e6c:	f04f 0100 	mov.w	r1, #0
 8005e70:	f04f 0200 	mov.w	r2, #0
 8005e74:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005e78:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005e7c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005e80:	4688      	mov	r8, r1
 8005e82:	4691      	mov	r9, r2
 8005e84:	eb1a 0508 	adds.w	r5, sl, r8
 8005e88:	eb4b 0609 	adc.w	r6, fp, r9
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	4619      	mov	r1, r3
 8005e92:	f04f 0200 	mov.w	r2, #0
 8005e96:	f04f 0300 	mov.w	r3, #0
 8005e9a:	f04f 0400 	mov.w	r4, #0
 8005e9e:	0094      	lsls	r4, r2, #2
 8005ea0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ea4:	008b      	lsls	r3, r1, #2
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	4623      	mov	r3, r4
 8005eaa:	4628      	mov	r0, r5
 8005eac:	4631      	mov	r1, r6
 8005eae:	f7fa fdf1 	bl	8000a94 <__aeabi_uldivmod>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	460c      	mov	r4, r1
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	4bba      	ldr	r3, [pc, #744]	; (80061a4 <UART_SetConfig+0x72c>)
 8005eba:	fba3 2302 	umull	r2, r3, r3, r2
 8005ebe:	095b      	lsrs	r3, r3, #5
 8005ec0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	469b      	mov	fp, r3
 8005ec8:	f04f 0c00 	mov.w	ip, #0
 8005ecc:	46d9      	mov	r9, fp
 8005ece:	46e2      	mov	sl, ip
 8005ed0:	eb19 0309 	adds.w	r3, r9, r9
 8005ed4:	eb4a 040a 	adc.w	r4, sl, sl
 8005ed8:	4699      	mov	r9, r3
 8005eda:	46a2      	mov	sl, r4
 8005edc:	eb19 090b 	adds.w	r9, r9, fp
 8005ee0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005ee4:	f04f 0100 	mov.w	r1, #0
 8005ee8:	f04f 0200 	mov.w	r2, #0
 8005eec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ef0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ef4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ef8:	4689      	mov	r9, r1
 8005efa:	4692      	mov	sl, r2
 8005efc:	eb1b 0509 	adds.w	r5, fp, r9
 8005f00:	eb4c 060a 	adc.w	r6, ip, sl
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	4619      	mov	r1, r3
 8005f0a:	f04f 0200 	mov.w	r2, #0
 8005f0e:	f04f 0300 	mov.w	r3, #0
 8005f12:	f04f 0400 	mov.w	r4, #0
 8005f16:	0094      	lsls	r4, r2, #2
 8005f18:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f1c:	008b      	lsls	r3, r1, #2
 8005f1e:	461a      	mov	r2, r3
 8005f20:	4623      	mov	r3, r4
 8005f22:	4628      	mov	r0, r5
 8005f24:	4631      	mov	r1, r6
 8005f26:	f7fa fdb5 	bl	8000a94 <__aeabi_uldivmod>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	460c      	mov	r4, r1
 8005f2e:	461a      	mov	r2, r3
 8005f30:	4b9c      	ldr	r3, [pc, #624]	; (80061a4 <UART_SetConfig+0x72c>)
 8005f32:	fba3 1302 	umull	r1, r3, r3, r2
 8005f36:	095b      	lsrs	r3, r3, #5
 8005f38:	2164      	movs	r1, #100	; 0x64
 8005f3a:	fb01 f303 	mul.w	r3, r1, r3
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	011b      	lsls	r3, r3, #4
 8005f42:	3332      	adds	r3, #50	; 0x32
 8005f44:	4a97      	ldr	r2, [pc, #604]	; (80061a4 <UART_SetConfig+0x72c>)
 8005f46:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4a:	095b      	lsrs	r3, r3, #5
 8005f4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f50:	4498      	add	r8, r3
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	469b      	mov	fp, r3
 8005f56:	f04f 0c00 	mov.w	ip, #0
 8005f5a:	46d9      	mov	r9, fp
 8005f5c:	46e2      	mov	sl, ip
 8005f5e:	eb19 0309 	adds.w	r3, r9, r9
 8005f62:	eb4a 040a 	adc.w	r4, sl, sl
 8005f66:	4699      	mov	r9, r3
 8005f68:	46a2      	mov	sl, r4
 8005f6a:	eb19 090b 	adds.w	r9, r9, fp
 8005f6e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f72:	f04f 0100 	mov.w	r1, #0
 8005f76:	f04f 0200 	mov.w	r2, #0
 8005f7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f86:	4689      	mov	r9, r1
 8005f88:	4692      	mov	sl, r2
 8005f8a:	eb1b 0509 	adds.w	r5, fp, r9
 8005f8e:	eb4c 060a 	adc.w	r6, ip, sl
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	4619      	mov	r1, r3
 8005f98:	f04f 0200 	mov.w	r2, #0
 8005f9c:	f04f 0300 	mov.w	r3, #0
 8005fa0:	f04f 0400 	mov.w	r4, #0
 8005fa4:	0094      	lsls	r4, r2, #2
 8005fa6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005faa:	008b      	lsls	r3, r1, #2
 8005fac:	461a      	mov	r2, r3
 8005fae:	4623      	mov	r3, r4
 8005fb0:	4628      	mov	r0, r5
 8005fb2:	4631      	mov	r1, r6
 8005fb4:	f7fa fd6e 	bl	8000a94 <__aeabi_uldivmod>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	460c      	mov	r4, r1
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	4b79      	ldr	r3, [pc, #484]	; (80061a4 <UART_SetConfig+0x72c>)
 8005fc0:	fba3 1302 	umull	r1, r3, r3, r2
 8005fc4:	095b      	lsrs	r3, r3, #5
 8005fc6:	2164      	movs	r1, #100	; 0x64
 8005fc8:	fb01 f303 	mul.w	r3, r1, r3
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	011b      	lsls	r3, r3, #4
 8005fd0:	3332      	adds	r3, #50	; 0x32
 8005fd2:	4a74      	ldr	r2, [pc, #464]	; (80061a4 <UART_SetConfig+0x72c>)
 8005fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd8:	095b      	lsrs	r3, r3, #5
 8005fda:	f003 020f 	and.w	r2, r3, #15
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4442      	add	r2, r8
 8005fe4:	609a      	str	r2, [r3, #8]
 8005fe6:	e0d0      	b.n	800618a <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005fe8:	f7fd fdac 	bl	8003b44 <HAL_RCC_GetPCLK1Freq>
 8005fec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	469a      	mov	sl, r3
 8005ff2:	f04f 0b00 	mov.w	fp, #0
 8005ff6:	46d0      	mov	r8, sl
 8005ff8:	46d9      	mov	r9, fp
 8005ffa:	eb18 0308 	adds.w	r3, r8, r8
 8005ffe:	eb49 0409 	adc.w	r4, r9, r9
 8006002:	4698      	mov	r8, r3
 8006004:	46a1      	mov	r9, r4
 8006006:	eb18 080a 	adds.w	r8, r8, sl
 800600a:	eb49 090b 	adc.w	r9, r9, fp
 800600e:	f04f 0100 	mov.w	r1, #0
 8006012:	f04f 0200 	mov.w	r2, #0
 8006016:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800601a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800601e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006022:	4688      	mov	r8, r1
 8006024:	4691      	mov	r9, r2
 8006026:	eb1a 0508 	adds.w	r5, sl, r8
 800602a:	eb4b 0609 	adc.w	r6, fp, r9
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	4619      	mov	r1, r3
 8006034:	f04f 0200 	mov.w	r2, #0
 8006038:	f04f 0300 	mov.w	r3, #0
 800603c:	f04f 0400 	mov.w	r4, #0
 8006040:	0094      	lsls	r4, r2, #2
 8006042:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006046:	008b      	lsls	r3, r1, #2
 8006048:	461a      	mov	r2, r3
 800604a:	4623      	mov	r3, r4
 800604c:	4628      	mov	r0, r5
 800604e:	4631      	mov	r1, r6
 8006050:	f7fa fd20 	bl	8000a94 <__aeabi_uldivmod>
 8006054:	4603      	mov	r3, r0
 8006056:	460c      	mov	r4, r1
 8006058:	461a      	mov	r2, r3
 800605a:	4b52      	ldr	r3, [pc, #328]	; (80061a4 <UART_SetConfig+0x72c>)
 800605c:	fba3 2302 	umull	r2, r3, r3, r2
 8006060:	095b      	lsrs	r3, r3, #5
 8006062:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	469b      	mov	fp, r3
 800606a:	f04f 0c00 	mov.w	ip, #0
 800606e:	46d9      	mov	r9, fp
 8006070:	46e2      	mov	sl, ip
 8006072:	eb19 0309 	adds.w	r3, r9, r9
 8006076:	eb4a 040a 	adc.w	r4, sl, sl
 800607a:	4699      	mov	r9, r3
 800607c:	46a2      	mov	sl, r4
 800607e:	eb19 090b 	adds.w	r9, r9, fp
 8006082:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006086:	f04f 0100 	mov.w	r1, #0
 800608a:	f04f 0200 	mov.w	r2, #0
 800608e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006092:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006096:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800609a:	4689      	mov	r9, r1
 800609c:	4692      	mov	sl, r2
 800609e:	eb1b 0509 	adds.w	r5, fp, r9
 80060a2:	eb4c 060a 	adc.w	r6, ip, sl
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	4619      	mov	r1, r3
 80060ac:	f04f 0200 	mov.w	r2, #0
 80060b0:	f04f 0300 	mov.w	r3, #0
 80060b4:	f04f 0400 	mov.w	r4, #0
 80060b8:	0094      	lsls	r4, r2, #2
 80060ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060be:	008b      	lsls	r3, r1, #2
 80060c0:	461a      	mov	r2, r3
 80060c2:	4623      	mov	r3, r4
 80060c4:	4628      	mov	r0, r5
 80060c6:	4631      	mov	r1, r6
 80060c8:	f7fa fce4 	bl	8000a94 <__aeabi_uldivmod>
 80060cc:	4603      	mov	r3, r0
 80060ce:	460c      	mov	r4, r1
 80060d0:	461a      	mov	r2, r3
 80060d2:	4b34      	ldr	r3, [pc, #208]	; (80061a4 <UART_SetConfig+0x72c>)
 80060d4:	fba3 1302 	umull	r1, r3, r3, r2
 80060d8:	095b      	lsrs	r3, r3, #5
 80060da:	2164      	movs	r1, #100	; 0x64
 80060dc:	fb01 f303 	mul.w	r3, r1, r3
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	011b      	lsls	r3, r3, #4
 80060e4:	3332      	adds	r3, #50	; 0x32
 80060e6:	4a2f      	ldr	r2, [pc, #188]	; (80061a4 <UART_SetConfig+0x72c>)
 80060e8:	fba2 2303 	umull	r2, r3, r2, r3
 80060ec:	095b      	lsrs	r3, r3, #5
 80060ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060f2:	4498      	add	r8, r3
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	469b      	mov	fp, r3
 80060f8:	f04f 0c00 	mov.w	ip, #0
 80060fc:	46d9      	mov	r9, fp
 80060fe:	46e2      	mov	sl, ip
 8006100:	eb19 0309 	adds.w	r3, r9, r9
 8006104:	eb4a 040a 	adc.w	r4, sl, sl
 8006108:	4699      	mov	r9, r3
 800610a:	46a2      	mov	sl, r4
 800610c:	eb19 090b 	adds.w	r9, r9, fp
 8006110:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006114:	f04f 0100 	mov.w	r1, #0
 8006118:	f04f 0200 	mov.w	r2, #0
 800611c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006120:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006124:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006128:	4689      	mov	r9, r1
 800612a:	4692      	mov	sl, r2
 800612c:	eb1b 0509 	adds.w	r5, fp, r9
 8006130:	eb4c 060a 	adc.w	r6, ip, sl
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	4619      	mov	r1, r3
 800613a:	f04f 0200 	mov.w	r2, #0
 800613e:	f04f 0300 	mov.w	r3, #0
 8006142:	f04f 0400 	mov.w	r4, #0
 8006146:	0094      	lsls	r4, r2, #2
 8006148:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800614c:	008b      	lsls	r3, r1, #2
 800614e:	461a      	mov	r2, r3
 8006150:	4623      	mov	r3, r4
 8006152:	4628      	mov	r0, r5
 8006154:	4631      	mov	r1, r6
 8006156:	f7fa fc9d 	bl	8000a94 <__aeabi_uldivmod>
 800615a:	4603      	mov	r3, r0
 800615c:	460c      	mov	r4, r1
 800615e:	461a      	mov	r2, r3
 8006160:	4b10      	ldr	r3, [pc, #64]	; (80061a4 <UART_SetConfig+0x72c>)
 8006162:	fba3 1302 	umull	r1, r3, r3, r2
 8006166:	095b      	lsrs	r3, r3, #5
 8006168:	2164      	movs	r1, #100	; 0x64
 800616a:	fb01 f303 	mul.w	r3, r1, r3
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	011b      	lsls	r3, r3, #4
 8006172:	3332      	adds	r3, #50	; 0x32
 8006174:	4a0b      	ldr	r2, [pc, #44]	; (80061a4 <UART_SetConfig+0x72c>)
 8006176:	fba2 2303 	umull	r2, r3, r2, r3
 800617a:	095b      	lsrs	r3, r3, #5
 800617c:	f003 020f 	and.w	r2, r3, #15
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4442      	add	r2, r8
 8006186:	609a      	str	r2, [r3, #8]
}
 8006188:	e7ff      	b.n	800618a <UART_SetConfig+0x712>
 800618a:	bf00      	nop
 800618c:	3714      	adds	r7, #20
 800618e:	46bd      	mov	sp, r7
 8006190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006194:	40011000 	.word	0x40011000
 8006198:	40011400 	.word	0x40011400
 800619c:	40011800 	.word	0x40011800
 80061a0:	40011c00 	.word	0x40011c00
 80061a4:	51eb851f 	.word	0x51eb851f

080061a8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80061a8:	b084      	sub	sp, #16
 80061aa:	b480      	push	{r7}
 80061ac:	b085      	sub	sp, #20
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	f107 001c 	add.w	r0, r7, #28
 80061b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80061ba:	2300      	movs	r3, #0
 80061bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80061be:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80061c0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80061c2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80061c6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80061c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80061ca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80061cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80061ce:	431a      	orrs	r2, r3
             Init.ClockDiv
 80061d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80061d2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80061e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	431a      	orrs	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	b004      	add	sp, #16
 80061fc:	4770      	bx	lr

080061fe <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80061fe:	b580      	push	{r7, lr}
 8006200:	b082      	sub	sp, #8
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2203      	movs	r2, #3
 800620a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800620c:	2002      	movs	r0, #2
 800620e:	f7fb ff23 	bl	8002058 <HAL_Delay>
  
  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0303 	and.w	r3, r3, #3
}
 800622c:	4618      	mov	r0, r3
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006242:	2300      	movs	r3, #0
 8006244:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006256:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800625c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006262:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	4313      	orrs	r3, r2
 8006268:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006272:	f023 030f 	bic.w	r3, r3, #15
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	431a      	orrs	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3714      	adds	r7, #20
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	b2db      	uxtb	r3, r3
}
 800629a:	4618      	mov	r0, r3
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b085      	sub	sp, #20
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
 80062ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	3314      	adds	r3, #20
 80062b4:	461a      	mov	r2, r3
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	4413      	add	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
}  
 80062c0:	4618      	mov	r0, r3
 80062c2:	3714      	adds	r7, #20
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b08a      	sub	sp, #40	; 0x28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80062dc:	2307      	movs	r3, #7
 80062de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80062e0:	2340      	movs	r3, #64	; 0x40
 80062e2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80062e4:	2300      	movs	r3, #0
 80062e6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062ec:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80062ee:	f107 0310 	add.w	r3, r7, #16
 80062f2:	4619      	mov	r1, r3
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f7ff ff9f 	bl	8006238 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80062fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80062fe:	2107      	movs	r1, #7
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 f90f 	bl	8006524 <SDMMC_GetCmdResp1>
 8006306:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800630a:	4618      	mov	r0, r3
 800630c:	3728      	adds	r7, #40	; 0x28
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b088      	sub	sp, #32
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800631a:	2300      	movs	r3, #0
 800631c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800631e:	2300      	movs	r3, #0
 8006320:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006322:	2300      	movs	r3, #0
 8006324:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006326:	2300      	movs	r3, #0
 8006328:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800632a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800632e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006330:	f107 0308 	add.w	r3, r7, #8
 8006334:	4619      	mov	r1, r3
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7ff ff7e 	bl	8006238 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 f8c9 	bl	80064d4 <SDMMC_GetCmdError>
 8006342:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006344:	69fb      	ldr	r3, [r7, #28]
}
 8006346:	4618      	mov	r0, r3
 8006348:	3720      	adds	r7, #32
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b088      	sub	sp, #32
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006356:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800635a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800635c:	2308      	movs	r3, #8
 800635e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006360:	2340      	movs	r3, #64	; 0x40
 8006362:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006364:	2300      	movs	r3, #0
 8006366:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800636c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800636e:	f107 0308 	add.w	r3, r7, #8
 8006372:	4619      	mov	r1, r3
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f7ff ff5f 	bl	8006238 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 fab2 	bl	80068e4 <SDMMC_GetCmdResp7>
 8006380:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006382:	69fb      	ldr	r3, [r7, #28]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3720      	adds	r7, #32
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b088      	sub	sp, #32
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800639a:	2337      	movs	r3, #55	; 0x37
 800639c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800639e:	2340      	movs	r3, #64	; 0x40
 80063a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80063a2:	2300      	movs	r3, #0
 80063a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80063a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80063ac:	f107 0308 	add.w	r3, r7, #8
 80063b0:	4619      	mov	r1, r3
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f7ff ff40 	bl	8006238 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80063b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80063bc:	2137      	movs	r1, #55	; 0x37
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f8b0 	bl	8006524 <SDMMC_GetCmdResp1>
 80063c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063c6:	69fb      	ldr	r3, [r7, #28]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3720      	adds	r7, #32
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b088      	sub	sp, #32
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80063e6:	2329      	movs	r3, #41	; 0x29
 80063e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80063ea:	2340      	movs	r3, #64	; 0x40
 80063ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80063ee:	2300      	movs	r3, #0
 80063f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80063f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80063f8:	f107 0308 	add.w	r3, r7, #8
 80063fc:	4619      	mov	r1, r3
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f7ff ff1a 	bl	8006238 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 f9bf 	bl	8006788 <SDMMC_GetCmdResp3>
 800640a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800640c:	69fb      	ldr	r3, [r7, #28]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3720      	adds	r7, #32
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b088      	sub	sp, #32
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800641e:	2300      	movs	r3, #0
 8006420:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006422:	2302      	movs	r3, #2
 8006424:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006426:	23c0      	movs	r3, #192	; 0xc0
 8006428:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800642a:	2300      	movs	r3, #0
 800642c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800642e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006432:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006434:	f107 0308 	add.w	r3, r7, #8
 8006438:	4619      	mov	r1, r3
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f7ff fefc 	bl	8006238 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 f95b 	bl	80066fc <SDMMC_GetCmdResp2>
 8006446:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006448:	69fb      	ldr	r3, [r7, #28]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3720      	adds	r7, #32
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b088      	sub	sp, #32
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
 800645a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006460:	2309      	movs	r3, #9
 8006462:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006464:	23c0      	movs	r3, #192	; 0xc0
 8006466:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006468:	2300      	movs	r3, #0
 800646a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800646c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006470:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006472:	f107 0308 	add.w	r3, r7, #8
 8006476:	4619      	mov	r1, r3
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f7ff fedd 	bl	8006238 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f93c 	bl	80066fc <SDMMC_GetCmdResp2>
 8006484:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006486:	69fb      	ldr	r3, [r7, #28]
}
 8006488:	4618      	mov	r0, r3
 800648a:	3720      	adds	r7, #32
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b088      	sub	sp, #32
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800649a:	2300      	movs	r3, #0
 800649c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800649e:	2303      	movs	r3, #3
 80064a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80064a2:	2340      	movs	r3, #64	; 0x40
 80064a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80064a6:	2300      	movs	r3, #0
 80064a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80064aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80064b0:	f107 0308 	add.w	r3, r7, #8
 80064b4:	4619      	mov	r1, r3
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f7ff febe 	bl	8006238 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80064bc:	683a      	ldr	r2, [r7, #0]
 80064be:	2103      	movs	r1, #3
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 f99b 	bl	80067fc <SDMMC_GetCmdResp6>
 80064c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80064c8:	69fb      	ldr	r3, [r7, #28]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3720      	adds	r7, #32
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
	...

080064d4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80064d4:	b490      	push	{r4, r7}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80064dc:	4b0f      	ldr	r3, [pc, #60]	; (800651c <SDMMC_GetCmdError+0x48>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a0f      	ldr	r2, [pc, #60]	; (8006520 <SDMMC_GetCmdError+0x4c>)
 80064e2:	fba2 2303 	umull	r2, r3, r2, r3
 80064e6:	0a5b      	lsrs	r3, r3, #9
 80064e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80064ec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80064f0:	4623      	mov	r3, r4
 80064f2:	1e5c      	subs	r4, r3, #1
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d102      	bne.n	80064fe <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80064f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80064fc:	e009      	b.n	8006512 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006506:	2b00      	cmp	r3, #0
 8006508:	d0f2      	beq.n	80064f0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	22c5      	movs	r2, #197	; 0xc5
 800650e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bc90      	pop	{r4, r7}
 800651a:	4770      	bx	lr
 800651c:	20000020 	.word	0x20000020
 8006520:	10624dd3 	.word	0x10624dd3

08006524 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006524:	b590      	push	{r4, r7, lr}
 8006526:	b087      	sub	sp, #28
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	460b      	mov	r3, r1
 800652e:	607a      	str	r2, [r7, #4]
 8006530:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006532:	4b6f      	ldr	r3, [pc, #444]	; (80066f0 <SDMMC_GetCmdResp1+0x1cc>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a6f      	ldr	r2, [pc, #444]	; (80066f4 <SDMMC_GetCmdResp1+0x1d0>)
 8006538:	fba2 2303 	umull	r2, r3, r2, r3
 800653c:	0a5b      	lsrs	r3, r3, #9
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006544:	4623      	mov	r3, r4
 8006546:	1e5c      	subs	r4, r3, #1
 8006548:	2b00      	cmp	r3, #0
 800654a:	d102      	bne.n	8006552 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800654c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006550:	e0c9      	b.n	80066e6 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006556:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800655e:	2b00      	cmp	r3, #0
 8006560:	d0f0      	beq.n	8006544 <SDMMC_GetCmdResp1+0x20>
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1eb      	bne.n	8006544 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006570:	f003 0304 	and.w	r3, r3, #4
 8006574:	2b00      	cmp	r3, #0
 8006576:	d004      	beq.n	8006582 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2204      	movs	r2, #4
 800657c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800657e:	2304      	movs	r3, #4
 8006580:	e0b1      	b.n	80066e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	2b00      	cmp	r3, #0
 800658c:	d004      	beq.n	8006598 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2201      	movs	r2, #1
 8006592:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006594:	2301      	movs	r3, #1
 8006596:	e0a6      	b.n	80066e6 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	22c5      	movs	r2, #197	; 0xc5
 800659c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f7ff fe74 	bl	800628c <SDIO_GetCommandResponse>
 80065a4:	4603      	mov	r3, r0
 80065a6:	461a      	mov	r2, r3
 80065a8:	7afb      	ldrb	r3, [r7, #11]
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d001      	beq.n	80065b2 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e099      	b.n	80066e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80065b2:	2100      	movs	r1, #0
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f7ff fe76 	bl	80062a6 <SDIO_GetResponse>
 80065ba:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	4b4e      	ldr	r3, [pc, #312]	; (80066f8 <SDMMC_GetCmdResp1+0x1d4>)
 80065c0:	4013      	ands	r3, r2
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80065c6:	2300      	movs	r3, #0
 80065c8:	e08d      	b.n	80066e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	da02      	bge.n	80065d6 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80065d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065d4:	e087      	b.n	80066e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d001      	beq.n	80065e4 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80065e0:	2340      	movs	r3, #64	; 0x40
 80065e2:	e080      	b.n	80066e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80065ee:	2380      	movs	r3, #128	; 0x80
 80065f0:	e079      	b.n	80066e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d002      	beq.n	8006602 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80065fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006600:	e071      	b.n	80066e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d002      	beq.n	8006612 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800660c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006610:	e069      	b.n	80066e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d002      	beq.n	8006622 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800661c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006620:	e061      	b.n	80066e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d002      	beq.n	8006632 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800662c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006630:	e059      	b.n	80066e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d002      	beq.n	8006642 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800663c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006640:	e051      	b.n	80066e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d002      	beq.n	8006652 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800664c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006650:	e049      	b.n	80066e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d002      	beq.n	8006662 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800665c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006660:	e041      	b.n	80066e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006668:	2b00      	cmp	r3, #0
 800666a:	d002      	beq.n	8006672 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800666c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006670:	e039      	b.n	80066e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d002      	beq.n	8006682 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800667c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006680:	e031      	b.n	80066e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800668c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006690:	e029      	b.n	80066e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d002      	beq.n	80066a2 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800669c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80066a0:	e021      	b.n	80066e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d002      	beq.n	80066b2 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80066ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80066b0:	e019      	b.n	80066e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d002      	beq.n	80066c2 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80066bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80066c0:	e011      	b.n	80066e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80066cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80066d0:	e009      	b.n	80066e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f003 0308 	and.w	r3, r3, #8
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d002      	beq.n	80066e2 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80066dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80066e0:	e001      	b.n	80066e6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80066e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	371c      	adds	r7, #28
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd90      	pop	{r4, r7, pc}
 80066ee:	bf00      	nop
 80066f0:	20000020 	.word	0x20000020
 80066f4:	10624dd3 	.word	0x10624dd3
 80066f8:	fdffe008 	.word	0xfdffe008

080066fc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80066fc:	b490      	push	{r4, r7}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006704:	4b1e      	ldr	r3, [pc, #120]	; (8006780 <SDMMC_GetCmdResp2+0x84>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a1e      	ldr	r2, [pc, #120]	; (8006784 <SDMMC_GetCmdResp2+0x88>)
 800670a:	fba2 2303 	umull	r2, r3, r2, r3
 800670e:	0a5b      	lsrs	r3, r3, #9
 8006710:	f241 3288 	movw	r2, #5000	; 0x1388
 8006714:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006718:	4623      	mov	r3, r4
 800671a:	1e5c      	subs	r4, r3, #1
 800671c:	2b00      	cmp	r3, #0
 800671e:	d102      	bne.n	8006726 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006720:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006724:	e026      	b.n	8006774 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800672a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006732:	2b00      	cmp	r3, #0
 8006734:	d0f0      	beq.n	8006718 <SDMMC_GetCmdResp2+0x1c>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1eb      	bne.n	8006718 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006744:	f003 0304 	and.w	r3, r3, #4
 8006748:	2b00      	cmp	r3, #0
 800674a:	d004      	beq.n	8006756 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2204      	movs	r2, #4
 8006750:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006752:	2304      	movs	r3, #4
 8006754:	e00e      	b.n	8006774 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d004      	beq.n	800676c <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2201      	movs	r2, #1
 8006766:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006768:	2301      	movs	r3, #1
 800676a:	e003      	b.n	8006774 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	22c5      	movs	r2, #197	; 0xc5
 8006770:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bc90      	pop	{r4, r7}
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	20000020 	.word	0x20000020
 8006784:	10624dd3 	.word	0x10624dd3

08006788 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006788:	b490      	push	{r4, r7}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006790:	4b18      	ldr	r3, [pc, #96]	; (80067f4 <SDMMC_GetCmdResp3+0x6c>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a18      	ldr	r2, [pc, #96]	; (80067f8 <SDMMC_GetCmdResp3+0x70>)
 8006796:	fba2 2303 	umull	r2, r3, r2, r3
 800679a:	0a5b      	lsrs	r3, r3, #9
 800679c:	f241 3288 	movw	r2, #5000	; 0x1388
 80067a0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80067a4:	4623      	mov	r3, r4
 80067a6:	1e5c      	subs	r4, r3, #1
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d102      	bne.n	80067b2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80067ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80067b0:	e01b      	b.n	80067ea <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067b6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d0f0      	beq.n	80067a4 <SDMMC_GetCmdResp3+0x1c>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1eb      	bne.n	80067a4 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d0:	f003 0304 	and.w	r3, r3, #4
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d004      	beq.n	80067e2 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2204      	movs	r2, #4
 80067dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80067de:	2304      	movs	r3, #4
 80067e0:	e003      	b.n	80067ea <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	22c5      	movs	r2, #197	; 0xc5
 80067e6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bc90      	pop	{r4, r7}
 80067f2:	4770      	bx	lr
 80067f4:	20000020 	.word	0x20000020
 80067f8:	10624dd3 	.word	0x10624dd3

080067fc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80067fc:	b590      	push	{r4, r7, lr}
 80067fe:	b087      	sub	sp, #28
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	460b      	mov	r3, r1
 8006806:	607a      	str	r2, [r7, #4]
 8006808:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800680a:	4b34      	ldr	r3, [pc, #208]	; (80068dc <SDMMC_GetCmdResp6+0xe0>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a34      	ldr	r2, [pc, #208]	; (80068e0 <SDMMC_GetCmdResp6+0xe4>)
 8006810:	fba2 2303 	umull	r2, r3, r2, r3
 8006814:	0a5b      	lsrs	r3, r3, #9
 8006816:	f241 3288 	movw	r2, #5000	; 0x1388
 800681a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800681e:	4623      	mov	r3, r4
 8006820:	1e5c      	subs	r4, r3, #1
 8006822:	2b00      	cmp	r3, #0
 8006824:	d102      	bne.n	800682c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006826:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800682a:	e052      	b.n	80068d2 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006830:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006838:	2b00      	cmp	r3, #0
 800683a:	d0f0      	beq.n	800681e <SDMMC_GetCmdResp6+0x22>
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1eb      	bne.n	800681e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800684a:	f003 0304 	and.w	r3, r3, #4
 800684e:	2b00      	cmp	r3, #0
 8006850:	d004      	beq.n	800685c <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2204      	movs	r2, #4
 8006856:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006858:	2304      	movs	r3, #4
 800685a:	e03a      	b.n	80068d2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006860:	f003 0301 	and.w	r3, r3, #1
 8006864:	2b00      	cmp	r3, #0
 8006866:	d004      	beq.n	8006872 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2201      	movs	r2, #1
 800686c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800686e:	2301      	movs	r3, #1
 8006870:	e02f      	b.n	80068d2 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f7ff fd0a 	bl	800628c <SDIO_GetCommandResponse>
 8006878:	4603      	mov	r3, r0
 800687a:	461a      	mov	r2, r3
 800687c:	7afb      	ldrb	r3, [r7, #11]
 800687e:	4293      	cmp	r3, r2
 8006880:	d001      	beq.n	8006886 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006882:	2301      	movs	r3, #1
 8006884:	e025      	b.n	80068d2 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	22c5      	movs	r2, #197	; 0xc5
 800688a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800688c:	2100      	movs	r1, #0
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f7ff fd09 	bl	80062a6 <SDIO_GetResponse>
 8006894:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d106      	bne.n	80068ae <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	0c1b      	lsrs	r3, r3, #16
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80068aa:	2300      	movs	r3, #0
 80068ac:	e011      	b.n	80068d2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d002      	beq.n	80068be <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80068b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80068bc:	e009      	b.n	80068d2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d002      	beq.n	80068ce <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80068c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068cc:	e001      	b.n	80068d2 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80068ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	371c      	adds	r7, #28
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd90      	pop	{r4, r7, pc}
 80068da:	bf00      	nop
 80068dc:	20000020 	.word	0x20000020
 80068e0:	10624dd3 	.word	0x10624dd3

080068e4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80068e4:	b490      	push	{r4, r7}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80068ec:	4b21      	ldr	r3, [pc, #132]	; (8006974 <SDMMC_GetCmdResp7+0x90>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a21      	ldr	r2, [pc, #132]	; (8006978 <SDMMC_GetCmdResp7+0x94>)
 80068f2:	fba2 2303 	umull	r2, r3, r2, r3
 80068f6:	0a5b      	lsrs	r3, r3, #9
 80068f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80068fc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006900:	4623      	mov	r3, r4
 8006902:	1e5c      	subs	r4, r3, #1
 8006904:	2b00      	cmp	r3, #0
 8006906:	d102      	bne.n	800690e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006908:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800690c:	e02c      	b.n	8006968 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006912:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800691a:	2b00      	cmp	r3, #0
 800691c:	d0f0      	beq.n	8006900 <SDMMC_GetCmdResp7+0x1c>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1eb      	bne.n	8006900 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800692c:	f003 0304 	and.w	r3, r3, #4
 8006930:	2b00      	cmp	r3, #0
 8006932:	d004      	beq.n	800693e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2204      	movs	r2, #4
 8006938:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800693a:	2304      	movs	r3, #4
 800693c:	e014      	b.n	8006968 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b00      	cmp	r3, #0
 8006948:	d004      	beq.n	8006954 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006950:	2301      	movs	r3, #1
 8006952:	e009      	b.n	8006968 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695c:	2b00      	cmp	r3, #0
 800695e:	d002      	beq.n	8006966 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2240      	movs	r2, #64	; 0x40
 8006964:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006966:	2300      	movs	r3, #0
  
}
 8006968:	4618      	mov	r0, r3
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bc90      	pop	{r4, r7}
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	20000020 	.word	0x20000020
 8006978:	10624dd3 	.word	0x10624dd3

0800697c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800697c:	b084      	sub	sp, #16
 800697e:	b580      	push	{r7, lr}
 8006980:	b084      	sub	sp, #16
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
 8006986:	f107 001c 	add.w	r0, r7, #28
 800698a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800698e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006990:	2b01      	cmp	r3, #1
 8006992:	d122      	bne.n	80069da <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006998:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80069a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80069bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d105      	bne.n	80069ce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fa48 	bl	8006e64 <USB_CoreReset>
 80069d4:	4603      	mov	r3, r0
 80069d6:	73fb      	strb	r3, [r7, #15]
 80069d8:	e01a      	b.n	8006a10 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 fa3c 	bl	8006e64 <USB_CoreReset>
 80069ec:	4603      	mov	r3, r0
 80069ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80069f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d106      	bne.n	8006a04 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	639a      	str	r2, [r3, #56]	; 0x38
 8006a02:	e005      	b.n	8006a10 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d10b      	bne.n	8006a2e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f043 0206 	orr.w	r2, r3, #6
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f043 0220 	orr.w	r2, r3, #32
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a3a:	b004      	add	sp, #16
 8006a3c:	4770      	bx	lr

08006a3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b083      	sub	sp, #12
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f023 0201 	bic.w	r2, r3, #1
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	460b      	mov	r3, r1
 8006a6a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a78:	78fb      	ldrb	r3, [r7, #3]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d106      	bne.n	8006a8c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	60da      	str	r2, [r3, #12]
 8006a8a:	e00b      	b.n	8006aa4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a8c:	78fb      	ldrb	r3, [r7, #3]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d106      	bne.n	8006aa0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	60da      	str	r2, [r3, #12]
 8006a9e:	e001      	b.n	8006aa4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e003      	b.n	8006aac <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006aa4:	2032      	movs	r0, #50	; 0x32
 8006aa6:	f7fb fad7 	bl	8002058 <HAL_Delay>

  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ab4:	b084      	sub	sp, #16
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b086      	sub	sp, #24
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
 8006abe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006ac2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006ace:	2300      	movs	r3, #0
 8006ad0:	613b      	str	r3, [r7, #16]
 8006ad2:	e009      	b.n	8006ae8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	3340      	adds	r3, #64	; 0x40
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4413      	add	r3, r2
 8006ade:	2200      	movs	r2, #0
 8006ae0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	613b      	str	r3, [r7, #16]
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	2b0e      	cmp	r3, #14
 8006aec:	d9f2      	bls.n	8006ad4 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d11c      	bne.n	8006b2e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b02:	f043 0302 	orr.w	r3, r3, #2
 8006b06:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	601a      	str	r2, [r3, #0]
 8006b2c:	e005      	b.n	8006b3a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b40:	461a      	mov	r2, r3
 8006b42:	2300      	movs	r3, #0
 8006b44:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b54:	461a      	mov	r2, r3
 8006b56:	680b      	ldr	r3, [r1, #0]
 8006b58:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d10c      	bne.n	8006b7a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d104      	bne.n	8006b70 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006b66:	2100      	movs	r1, #0
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f949 	bl	8006e00 <USB_SetDevSpeed>
 8006b6e:	e008      	b.n	8006b82 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006b70:	2101      	movs	r1, #1
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f944 	bl	8006e00 <USB_SetDevSpeed>
 8006b78:	e003      	b.n	8006b82 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006b7a:	2103      	movs	r1, #3
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 f93f 	bl	8006e00 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b82:	2110      	movs	r1, #16
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 f8f3 	bl	8006d70 <USB_FlushTxFifo>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d001      	beq.n	8006b94 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 f911 	bl	8006dbc <USB_FlushRxFifo>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d001      	beq.n	8006ba4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006baa:	461a      	mov	r2, r3
 8006bac:	2300      	movs	r3, #0
 8006bae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	2300      	movs	r3, #0
 8006bba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bc8:	2300      	movs	r3, #0
 8006bca:	613b      	str	r3, [r7, #16]
 8006bcc:	e043      	b.n	8006c56 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	015a      	lsls	r2, r3, #5
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006be0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006be4:	d118      	bne.n	8006c18 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10a      	bne.n	8006c02 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	015a      	lsls	r2, r3, #5
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006bfe:	6013      	str	r3, [r2, #0]
 8006c00:	e013      	b.n	8006c2a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	015a      	lsls	r2, r3, #5
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4413      	add	r3, r2
 8006c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c0e:	461a      	mov	r2, r3
 8006c10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c14:	6013      	str	r3, [r2, #0]
 8006c16:	e008      	b.n	8006c2a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	015a      	lsls	r2, r3, #5
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4413      	add	r3, r2
 8006c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c24:	461a      	mov	r2, r3
 8006c26:	2300      	movs	r3, #0
 8006c28:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	015a      	lsls	r2, r3, #5
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	4413      	add	r3, r2
 8006c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c36:	461a      	mov	r2, r3
 8006c38:	2300      	movs	r3, #0
 8006c3a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	015a      	lsls	r2, r3, #5
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	4413      	add	r3, r2
 8006c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c48:	461a      	mov	r2, r3
 8006c4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	3301      	adds	r3, #1
 8006c54:	613b      	str	r3, [r7, #16]
 8006c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d3b7      	bcc.n	8006bce <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c5e:	2300      	movs	r3, #0
 8006c60:	613b      	str	r3, [r7, #16]
 8006c62:	e043      	b.n	8006cec <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	015a      	lsls	r2, r3, #5
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c7a:	d118      	bne.n	8006cae <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10a      	bne.n	8006c98 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	015a      	lsls	r2, r3, #5
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	4413      	add	r3, r2
 8006c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c8e:	461a      	mov	r2, r3
 8006c90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c94:	6013      	str	r3, [r2, #0]
 8006c96:	e013      	b.n	8006cc0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006caa:	6013      	str	r3, [r2, #0]
 8006cac:	e008      	b.n	8006cc0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	015a      	lsls	r2, r3, #5
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cba:	461a      	mov	r2, r3
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	015a      	lsls	r2, r3, #5
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ccc:	461a      	mov	r2, r3
 8006cce:	2300      	movs	r3, #0
 8006cd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	015a      	lsls	r2, r3, #5
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	4413      	add	r3, r2
 8006cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cde:	461a      	mov	r2, r3
 8006ce0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ce4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	613b      	str	r3, [r7, #16]
 8006cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cee:	693a      	ldr	r2, [r7, #16]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d3b7      	bcc.n	8006c64 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d06:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006d14:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d105      	bne.n	8006d28 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	f043 0210 	orr.w	r2, r3, #16
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	699a      	ldr	r2, [r3, #24]
 8006d2c:	4b0f      	ldr	r3, [pc, #60]	; (8006d6c <USB_DevInit+0x2b8>)
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d005      	beq.n	8006d46 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	f043 0208 	orr.w	r2, r3, #8
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d107      	bne.n	8006d5c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d54:	f043 0304 	orr.w	r3, r3, #4
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3718      	adds	r7, #24
 8006d62:	46bd      	mov	sp, r7
 8006d64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d68:	b004      	add	sp, #16
 8006d6a:	4770      	bx	lr
 8006d6c:	803c3800 	.word	0x803c3800

08006d70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	019b      	lsls	r3, r3, #6
 8006d82:	f043 0220 	orr.w	r2, r3, #32
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	60fb      	str	r3, [r7, #12]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	4a09      	ldr	r2, [pc, #36]	; (8006db8 <USB_FlushTxFifo+0x48>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d901      	bls.n	8006d9c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e006      	b.n	8006daa <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	f003 0320 	and.w	r3, r3, #32
 8006da4:	2b20      	cmp	r3, #32
 8006da6:	d0f0      	beq.n	8006d8a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3714      	adds	r7, #20
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	00030d40 	.word	0x00030d40

08006dbc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2210      	movs	r2, #16
 8006dcc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	60fb      	str	r3, [r7, #12]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	4a09      	ldr	r2, [pc, #36]	; (8006dfc <USB_FlushRxFifo+0x40>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d901      	bls.n	8006de0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e006      	b.n	8006dee <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	f003 0310 	and.w	r3, r3, #16
 8006de8:	2b10      	cmp	r3, #16
 8006dea:	d0f0      	beq.n	8006dce <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3714      	adds	r7, #20
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	00030d40 	.word	0x00030d40

08006e00 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	78fb      	ldrb	r3, [r7, #3]
 8006e1a:	68f9      	ldr	r1, [r7, #12]
 8006e1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e20:	4313      	orrs	r3, r2
 8006e22:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3714      	adds	r7, #20
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b084      	sub	sp, #16
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e4c:	f043 0302 	orr.w	r3, r3, #2
 8006e50:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006e52:	2003      	movs	r0, #3
 8006e54:	f7fb f900 	bl	8002058 <HAL_Delay>

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
	...

08006e64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	3301      	adds	r3, #1
 8006e74:	60fb      	str	r3, [r7, #12]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	4a13      	ldr	r2, [pc, #76]	; (8006ec8 <USB_CoreReset+0x64>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d901      	bls.n	8006e82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e01b      	b.n	8006eba <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	daf2      	bge.n	8006e70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	f043 0201 	orr.w	r2, r3, #1
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	60fb      	str	r3, [r7, #12]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	4a09      	ldr	r2, [pc, #36]	; (8006ec8 <USB_CoreReset+0x64>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d901      	bls.n	8006eac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e006      	b.n	8006eba <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	f003 0301 	and.w	r3, r3, #1
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d0f0      	beq.n	8006e9a <USB_CoreReset+0x36>

  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3714      	adds	r7, #20
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	00030d40 	.word	0x00030d40

08006ecc <__libc_init_array>:
 8006ecc:	b570      	push	{r4, r5, r6, lr}
 8006ece:	4e0d      	ldr	r6, [pc, #52]	; (8006f04 <__libc_init_array+0x38>)
 8006ed0:	4c0d      	ldr	r4, [pc, #52]	; (8006f08 <__libc_init_array+0x3c>)
 8006ed2:	1ba4      	subs	r4, r4, r6
 8006ed4:	10a4      	asrs	r4, r4, #2
 8006ed6:	2500      	movs	r5, #0
 8006ed8:	42a5      	cmp	r5, r4
 8006eda:	d109      	bne.n	8006ef0 <__libc_init_array+0x24>
 8006edc:	4e0b      	ldr	r6, [pc, #44]	; (8006f0c <__libc_init_array+0x40>)
 8006ede:	4c0c      	ldr	r4, [pc, #48]	; (8006f10 <__libc_init_array+0x44>)
 8006ee0:	f000 f820 	bl	8006f24 <_init>
 8006ee4:	1ba4      	subs	r4, r4, r6
 8006ee6:	10a4      	asrs	r4, r4, #2
 8006ee8:	2500      	movs	r5, #0
 8006eea:	42a5      	cmp	r5, r4
 8006eec:	d105      	bne.n	8006efa <__libc_init_array+0x2e>
 8006eee:	bd70      	pop	{r4, r5, r6, pc}
 8006ef0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ef4:	4798      	blx	r3
 8006ef6:	3501      	adds	r5, #1
 8006ef8:	e7ee      	b.n	8006ed8 <__libc_init_array+0xc>
 8006efa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006efe:	4798      	blx	r3
 8006f00:	3501      	adds	r5, #1
 8006f02:	e7f2      	b.n	8006eea <__libc_init_array+0x1e>
 8006f04:	08006f64 	.word	0x08006f64
 8006f08:	08006f64 	.word	0x08006f64
 8006f0c:	08006f64 	.word	0x08006f64
 8006f10:	08006f68 	.word	0x08006f68

08006f14 <memset>:
 8006f14:	4402      	add	r2, r0
 8006f16:	4603      	mov	r3, r0
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d100      	bne.n	8006f1e <memset+0xa>
 8006f1c:	4770      	bx	lr
 8006f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8006f22:	e7f9      	b.n	8006f18 <memset+0x4>

08006f24 <_init>:
 8006f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f26:	bf00      	nop
 8006f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f2a:	bc08      	pop	{r3}
 8006f2c:	469e      	mov	lr, r3
 8006f2e:	4770      	bx	lr

08006f30 <_fini>:
 8006f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f32:	bf00      	nop
 8006f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f36:	bc08      	pop	{r3}
 8006f38:	469e      	mov	lr, r3
 8006f3a:	4770      	bx	lr
