
Datenlogger_Schaltungstechnik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c54  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006e2c  08006e2c  00016e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e4c  08006e4c  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08006e4c  08006e4c  00016e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e54  08006e54  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e54  08006e54  00016e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e58  08006e58  00016e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08006e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000165b0  2000002c  08006e88  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200165dc  08006e88  000265dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001726b  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003310  00000000  00000000  000372c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001450  00000000  00000000  0003a5d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001298  00000000  00000000  0003ba28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024320  00000000  00000000  0003ccc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011e3b  00000000  00000000  00060fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d782a  00000000  00000000  00072e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014a645  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055e4  00000000  00000000  0014a6c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000002c 	.word	0x2000002c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006e14 	.word	0x08006e14

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000030 	.word	0x20000030
 8000214:	08006e14 	.word	0x08006e14

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b972 	b.w	8000d90 <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9e08      	ldr	r6, [sp, #32]
 8000aca:	4604      	mov	r4, r0
 8000acc:	4688      	mov	r8, r1
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d14b      	bne.n	8000b6a <__udivmoddi4+0xa6>
 8000ad2:	428a      	cmp	r2, r1
 8000ad4:	4615      	mov	r5, r2
 8000ad6:	d967      	bls.n	8000ba8 <__udivmoddi4+0xe4>
 8000ad8:	fab2 f282 	clz	r2, r2
 8000adc:	b14a      	cbz	r2, 8000af2 <__udivmoddi4+0x2e>
 8000ade:	f1c2 0720 	rsb	r7, r2, #32
 8000ae2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ae6:	fa20 f707 	lsr.w	r7, r0, r7
 8000aea:	4095      	lsls	r5, r2
 8000aec:	ea47 0803 	orr.w	r8, r7, r3
 8000af0:	4094      	lsls	r4, r2
 8000af2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000af6:	0c23      	lsrs	r3, r4, #16
 8000af8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000afc:	fa1f fc85 	uxth.w	ip, r5
 8000b00:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b04:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b08:	fb07 f10c 	mul.w	r1, r7, ip
 8000b0c:	4299      	cmp	r1, r3
 8000b0e:	d909      	bls.n	8000b24 <__udivmoddi4+0x60>
 8000b10:	18eb      	adds	r3, r5, r3
 8000b12:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b16:	f080 811b 	bcs.w	8000d50 <__udivmoddi4+0x28c>
 8000b1a:	4299      	cmp	r1, r3
 8000b1c:	f240 8118 	bls.w	8000d50 <__udivmoddi4+0x28c>
 8000b20:	3f02      	subs	r7, #2
 8000b22:	442b      	add	r3, r5
 8000b24:	1a5b      	subs	r3, r3, r1
 8000b26:	b2a4      	uxth	r4, r4
 8000b28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b34:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b38:	45a4      	cmp	ip, r4
 8000b3a:	d909      	bls.n	8000b50 <__udivmoddi4+0x8c>
 8000b3c:	192c      	adds	r4, r5, r4
 8000b3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b42:	f080 8107 	bcs.w	8000d54 <__udivmoddi4+0x290>
 8000b46:	45a4      	cmp	ip, r4
 8000b48:	f240 8104 	bls.w	8000d54 <__udivmoddi4+0x290>
 8000b4c:	3802      	subs	r0, #2
 8000b4e:	442c      	add	r4, r5
 8000b50:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b54:	eba4 040c 	sub.w	r4, r4, ip
 8000b58:	2700      	movs	r7, #0
 8000b5a:	b11e      	cbz	r6, 8000b64 <__udivmoddi4+0xa0>
 8000b5c:	40d4      	lsrs	r4, r2
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e9c6 4300 	strd	r4, r3, [r6]
 8000b64:	4639      	mov	r1, r7
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d909      	bls.n	8000b82 <__udivmoddi4+0xbe>
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	f000 80eb 	beq.w	8000d4a <__udivmoddi4+0x286>
 8000b74:	2700      	movs	r7, #0
 8000b76:	e9c6 0100 	strd	r0, r1, [r6]
 8000b7a:	4638      	mov	r0, r7
 8000b7c:	4639      	mov	r1, r7
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	fab3 f783 	clz	r7, r3
 8000b86:	2f00      	cmp	r7, #0
 8000b88:	d147      	bne.n	8000c1a <__udivmoddi4+0x156>
 8000b8a:	428b      	cmp	r3, r1
 8000b8c:	d302      	bcc.n	8000b94 <__udivmoddi4+0xd0>
 8000b8e:	4282      	cmp	r2, r0
 8000b90:	f200 80fa 	bhi.w	8000d88 <__udivmoddi4+0x2c4>
 8000b94:	1a84      	subs	r4, r0, r2
 8000b96:	eb61 0303 	sbc.w	r3, r1, r3
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	4698      	mov	r8, r3
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	d0e0      	beq.n	8000b64 <__udivmoddi4+0xa0>
 8000ba2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ba6:	e7dd      	b.n	8000b64 <__udivmoddi4+0xa0>
 8000ba8:	b902      	cbnz	r2, 8000bac <__udivmoddi4+0xe8>
 8000baa:	deff      	udf	#255	; 0xff
 8000bac:	fab2 f282 	clz	r2, r2
 8000bb0:	2a00      	cmp	r2, #0
 8000bb2:	f040 808f 	bne.w	8000cd4 <__udivmoddi4+0x210>
 8000bb6:	1b49      	subs	r1, r1, r5
 8000bb8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bbc:	fa1f f885 	uxth.w	r8, r5
 8000bc0:	2701      	movs	r7, #1
 8000bc2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bc6:	0c23      	lsrs	r3, r4, #16
 8000bc8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bcc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd0:	fb08 f10c 	mul.w	r1, r8, ip
 8000bd4:	4299      	cmp	r1, r3
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x124>
 8000bd8:	18eb      	adds	r3, r5, r3
 8000bda:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x122>
 8000be0:	4299      	cmp	r1, r3
 8000be2:	f200 80cd 	bhi.w	8000d80 <__udivmoddi4+0x2bc>
 8000be6:	4684      	mov	ip, r0
 8000be8:	1a59      	subs	r1, r3, r1
 8000bea:	b2a3      	uxth	r3, r4
 8000bec:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bf0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bf4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bf8:	fb08 f800 	mul.w	r8, r8, r0
 8000bfc:	45a0      	cmp	r8, r4
 8000bfe:	d907      	bls.n	8000c10 <__udivmoddi4+0x14c>
 8000c00:	192c      	adds	r4, r5, r4
 8000c02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x14a>
 8000c08:	45a0      	cmp	r8, r4
 8000c0a:	f200 80b6 	bhi.w	8000d7a <__udivmoddi4+0x2b6>
 8000c0e:	4618      	mov	r0, r3
 8000c10:	eba4 0408 	sub.w	r4, r4, r8
 8000c14:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c18:	e79f      	b.n	8000b5a <__udivmoddi4+0x96>
 8000c1a:	f1c7 0c20 	rsb	ip, r7, #32
 8000c1e:	40bb      	lsls	r3, r7
 8000c20:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c24:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c28:	fa01 f407 	lsl.w	r4, r1, r7
 8000c2c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c30:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c34:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c38:	4325      	orrs	r5, r4
 8000c3a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c3e:	0c2c      	lsrs	r4, r5, #16
 8000c40:	fb08 3319 	mls	r3, r8, r9, r3
 8000c44:	fa1f fa8e 	uxth.w	sl, lr
 8000c48:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c4c:	fb09 f40a 	mul.w	r4, r9, sl
 8000c50:	429c      	cmp	r4, r3
 8000c52:	fa02 f207 	lsl.w	r2, r2, r7
 8000c56:	fa00 f107 	lsl.w	r1, r0, r7
 8000c5a:	d90b      	bls.n	8000c74 <__udivmoddi4+0x1b0>
 8000c5c:	eb1e 0303 	adds.w	r3, lr, r3
 8000c60:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c64:	f080 8087 	bcs.w	8000d76 <__udivmoddi4+0x2b2>
 8000c68:	429c      	cmp	r4, r3
 8000c6a:	f240 8084 	bls.w	8000d76 <__udivmoddi4+0x2b2>
 8000c6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c72:	4473      	add	r3, lr
 8000c74:	1b1b      	subs	r3, r3, r4
 8000c76:	b2ad      	uxth	r5, r5
 8000c78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c7c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c80:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c84:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c88:	45a2      	cmp	sl, r4
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x1da>
 8000c8c:	eb1e 0404 	adds.w	r4, lr, r4
 8000c90:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c94:	d26b      	bcs.n	8000d6e <__udivmoddi4+0x2aa>
 8000c96:	45a2      	cmp	sl, r4
 8000c98:	d969      	bls.n	8000d6e <__udivmoddi4+0x2aa>
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	4474      	add	r4, lr
 8000c9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ca2:	fba0 8902 	umull	r8, r9, r0, r2
 8000ca6:	eba4 040a 	sub.w	r4, r4, sl
 8000caa:	454c      	cmp	r4, r9
 8000cac:	46c2      	mov	sl, r8
 8000cae:	464b      	mov	r3, r9
 8000cb0:	d354      	bcc.n	8000d5c <__udivmoddi4+0x298>
 8000cb2:	d051      	beq.n	8000d58 <__udivmoddi4+0x294>
 8000cb4:	2e00      	cmp	r6, #0
 8000cb6:	d069      	beq.n	8000d8c <__udivmoddi4+0x2c8>
 8000cb8:	ebb1 050a 	subs.w	r5, r1, sl
 8000cbc:	eb64 0403 	sbc.w	r4, r4, r3
 8000cc0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cc4:	40fd      	lsrs	r5, r7
 8000cc6:	40fc      	lsrs	r4, r7
 8000cc8:	ea4c 0505 	orr.w	r5, ip, r5
 8000ccc:	e9c6 5400 	strd	r5, r4, [r6]
 8000cd0:	2700      	movs	r7, #0
 8000cd2:	e747      	b.n	8000b64 <__udivmoddi4+0xa0>
 8000cd4:	f1c2 0320 	rsb	r3, r2, #32
 8000cd8:	fa20 f703 	lsr.w	r7, r0, r3
 8000cdc:	4095      	lsls	r5, r2
 8000cde:	fa01 f002 	lsl.w	r0, r1, r2
 8000ce2:	fa21 f303 	lsr.w	r3, r1, r3
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	4338      	orrs	r0, r7
 8000cec:	0c01      	lsrs	r1, r0, #16
 8000cee:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cf2:	fa1f f885 	uxth.w	r8, r5
 8000cf6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cfa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfe:	fb07 f308 	mul.w	r3, r7, r8
 8000d02:	428b      	cmp	r3, r1
 8000d04:	fa04 f402 	lsl.w	r4, r4, r2
 8000d08:	d907      	bls.n	8000d1a <__udivmoddi4+0x256>
 8000d0a:	1869      	adds	r1, r5, r1
 8000d0c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d10:	d22f      	bcs.n	8000d72 <__udivmoddi4+0x2ae>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d92d      	bls.n	8000d72 <__udivmoddi4+0x2ae>
 8000d16:	3f02      	subs	r7, #2
 8000d18:	4429      	add	r1, r5
 8000d1a:	1acb      	subs	r3, r1, r3
 8000d1c:	b281      	uxth	r1, r0
 8000d1e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d22:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d26:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d2a:	fb00 f308 	mul.w	r3, r0, r8
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x27e>
 8000d32:	1869      	adds	r1, r5, r1
 8000d34:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d38:	d217      	bcs.n	8000d6a <__udivmoddi4+0x2a6>
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	d915      	bls.n	8000d6a <__udivmoddi4+0x2a6>
 8000d3e:	3802      	subs	r0, #2
 8000d40:	4429      	add	r1, r5
 8000d42:	1ac9      	subs	r1, r1, r3
 8000d44:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d48:	e73b      	b.n	8000bc2 <__udivmoddi4+0xfe>
 8000d4a:	4637      	mov	r7, r6
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	e709      	b.n	8000b64 <__udivmoddi4+0xa0>
 8000d50:	4607      	mov	r7, r0
 8000d52:	e6e7      	b.n	8000b24 <__udivmoddi4+0x60>
 8000d54:	4618      	mov	r0, r3
 8000d56:	e6fb      	b.n	8000b50 <__udivmoddi4+0x8c>
 8000d58:	4541      	cmp	r1, r8
 8000d5a:	d2ab      	bcs.n	8000cb4 <__udivmoddi4+0x1f0>
 8000d5c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d60:	eb69 020e 	sbc.w	r2, r9, lr
 8000d64:	3801      	subs	r0, #1
 8000d66:	4613      	mov	r3, r2
 8000d68:	e7a4      	b.n	8000cb4 <__udivmoddi4+0x1f0>
 8000d6a:	4660      	mov	r0, ip
 8000d6c:	e7e9      	b.n	8000d42 <__udivmoddi4+0x27e>
 8000d6e:	4618      	mov	r0, r3
 8000d70:	e795      	b.n	8000c9e <__udivmoddi4+0x1da>
 8000d72:	4667      	mov	r7, ip
 8000d74:	e7d1      	b.n	8000d1a <__udivmoddi4+0x256>
 8000d76:	4681      	mov	r9, r0
 8000d78:	e77c      	b.n	8000c74 <__udivmoddi4+0x1b0>
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	442c      	add	r4, r5
 8000d7e:	e747      	b.n	8000c10 <__udivmoddi4+0x14c>
 8000d80:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d84:	442b      	add	r3, r5
 8000d86:	e72f      	b.n	8000be8 <__udivmoddi4+0x124>
 8000d88:	4638      	mov	r0, r7
 8000d8a:	e708      	b.n	8000b9e <__udivmoddi4+0xda>
 8000d8c:	4637      	mov	r7, r6
 8000d8e:	e6e9      	b.n	8000b64 <__udivmoddi4+0xa0>

08000d90 <__aeabi_idiv0>:
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop

08000d94 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000da6:	4b36      	ldr	r3, [pc, #216]	; (8000e80 <MX_ADC1_Init+0xec>)
 8000da8:	4a36      	ldr	r2, [pc, #216]	; (8000e84 <MX_ADC1_Init+0xf0>)
 8000daa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000dac:	4b34      	ldr	r3, [pc, #208]	; (8000e80 <MX_ADC1_Init+0xec>)
 8000dae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000db2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000db4:	4b32      	ldr	r3, [pc, #200]	; (8000e80 <MX_ADC1_Init+0xec>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000dba:	4b31      	ldr	r3, [pc, #196]	; (8000e80 <MX_ADC1_Init+0xec>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000dc0:	4b2f      	ldr	r3, [pc, #188]	; (8000e80 <MX_ADC1_Init+0xec>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dc6:	4b2e      	ldr	r3, [pc, #184]	; (8000e80 <MX_ADC1_Init+0xec>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dce:	4b2c      	ldr	r3, [pc, #176]	; (8000e80 <MX_ADC1_Init+0xec>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dd4:	4b2a      	ldr	r3, [pc, #168]	; (8000e80 <MX_ADC1_Init+0xec>)
 8000dd6:	4a2c      	ldr	r2, [pc, #176]	; (8000e88 <MX_ADC1_Init+0xf4>)
 8000dd8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dda:	4b29      	ldr	r3, [pc, #164]	; (8000e80 <MX_ADC1_Init+0xec>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000de0:	4b27      	ldr	r3, [pc, #156]	; (8000e80 <MX_ADC1_Init+0xec>)
 8000de2:	2204      	movs	r2, #4
 8000de4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000de6:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <MX_ADC1_Init+0xec>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000dee:	4b24      	ldr	r3, [pc, #144]	; (8000e80 <MX_ADC1_Init+0xec>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000df4:	4822      	ldr	r0, [pc, #136]	; (8000e80 <MX_ADC1_Init+0xec>)
 8000df6:	f001 f8c9 	bl	8001f8c <HAL_ADC_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e00:	f000 fd4c 	bl	800189c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e04:	2303      	movs	r3, #3
 8000e06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e10:	463b      	mov	r3, r7
 8000e12:	4619      	mov	r1, r3
 8000e14:	481a      	ldr	r0, [pc, #104]	; (8000e80 <MX_ADC1_Init+0xec>)
 8000e16:	f001 f9e5 	bl	80021e4 <HAL_ADC_ConfigChannel>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e20:	f000 fd3c 	bl	800189c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e24:	230a      	movs	r3, #10
 8000e26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4813      	ldr	r0, [pc, #76]	; (8000e80 <MX_ADC1_Init+0xec>)
 8000e32:	f001 f9d7 	bl	80021e4 <HAL_ADC_ConfigChannel>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000e3c:	f000 fd2e 	bl	800189c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000e40:	230d      	movs	r3, #13
 8000e42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000e44:	2303      	movs	r3, #3
 8000e46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e48:	463b      	mov	r3, r7
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	480c      	ldr	r0, [pc, #48]	; (8000e80 <MX_ADC1_Init+0xec>)
 8000e4e:	f001 f9c9 	bl	80021e4 <HAL_ADC_ConfigChannel>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000e58:	f000 fd20 	bl	800189c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e5c:	230b      	movs	r3, #11
 8000e5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000e60:	2304      	movs	r3, #4
 8000e62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e64:	463b      	mov	r3, r7
 8000e66:	4619      	mov	r1, r3
 8000e68:	4805      	ldr	r0, [pc, #20]	; (8000e80 <MX_ADC1_Init+0xec>)
 8000e6a:	f001 f9bb 	bl	80021e4 <HAL_ADC_ConfigChannel>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000e74:	f000 fd12 	bl	800189c <Error_Handler>
  }

}
 8000e78:	bf00      	nop
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000074 	.word	0x20000074
 8000e84:	40012000 	.word	0x40012000
 8000e88:	0f000001 	.word	0x0f000001

08000e8c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08a      	sub	sp, #40	; 0x28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a3c      	ldr	r2, [pc, #240]	; (8000f9c <HAL_ADC_MspInit+0x110>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d172      	bne.n	8000f94 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	4b3b      	ldr	r3, [pc, #236]	; (8000fa0 <HAL_ADC_MspInit+0x114>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	4a3a      	ldr	r2, [pc, #232]	; (8000fa0 <HAL_ADC_MspInit+0x114>)
 8000eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ebe:	4b38      	ldr	r3, [pc, #224]	; (8000fa0 <HAL_ADC_MspInit+0x114>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	4b34      	ldr	r3, [pc, #208]	; (8000fa0 <HAL_ADC_MspInit+0x114>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a33      	ldr	r2, [pc, #204]	; (8000fa0 <HAL_ADC_MspInit+0x114>)
 8000ed4:	f043 0304 	orr.w	r3, r3, #4
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b31      	ldr	r3, [pc, #196]	; (8000fa0 <HAL_ADC_MspInit+0x114>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0304 	and.w	r3, r3, #4
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <HAL_ADC_MspInit+0x114>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a2c      	ldr	r2, [pc, #176]	; (8000fa0 <HAL_ADC_MspInit+0x114>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b2a      	ldr	r3, [pc, #168]	; (8000fa0 <HAL_ADC_MspInit+0x114>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC3     ------> ADC1_IN13
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8000f02:	230b      	movs	r3, #11
 8000f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f06:	2303      	movs	r3, #3
 8000f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	4823      	ldr	r0, [pc, #140]	; (8000fa4 <HAL_ADC_MspInit+0x118>)
 8000f16:	f002 f8b7 	bl	8003088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f1a:	2308      	movs	r3, #8
 8000f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	481e      	ldr	r0, [pc, #120]	; (8000fa8 <HAL_ADC_MspInit+0x11c>)
 8000f2e:	f002 f8ab 	bl	8003088 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f32:	4b1e      	ldr	r3, [pc, #120]	; (8000fac <HAL_ADC_MspInit+0x120>)
 8000f34:	4a1e      	ldr	r2, [pc, #120]	; (8000fb0 <HAL_ADC_MspInit+0x124>)
 8000f36:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f38:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <HAL_ADC_MspInit+0x120>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <HAL_ADC_MspInit+0x120>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f44:	4b19      	ldr	r3, [pc, #100]	; (8000fac <HAL_ADC_MspInit+0x120>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <HAL_ADC_MspInit+0x120>)
 8000f4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f50:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f52:	4b16      	ldr	r3, [pc, #88]	; (8000fac <HAL_ADC_MspInit+0x120>)
 8000f54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f58:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f5a:	4b14      	ldr	r3, [pc, #80]	; (8000fac <HAL_ADC_MspInit+0x120>)
 8000f5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f60:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f62:	4b12      	ldr	r3, [pc, #72]	; (8000fac <HAL_ADC_MspInit+0x120>)
 8000f64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f68:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f6a:	4b10      	ldr	r3, [pc, #64]	; (8000fac <HAL_ADC_MspInit+0x120>)
 8000f6c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f70:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <HAL_ADC_MspInit+0x120>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f78:	480c      	ldr	r0, [pc, #48]	; (8000fac <HAL_ADC_MspInit+0x120>)
 8000f7a:	f001 fcf5 	bl	8002968 <HAL_DMA_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8000f84:	f000 fc8a 	bl	800189c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a08      	ldr	r2, [pc, #32]	; (8000fac <HAL_ADC_MspInit+0x120>)
 8000f8c:	639a      	str	r2, [r3, #56]	; 0x38
 8000f8e:	4a07      	ldr	r2, [pc, #28]	; (8000fac <HAL_ADC_MspInit+0x120>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f94:	bf00      	nop
 8000f96:	3728      	adds	r7, #40	; 0x28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40012000 	.word	0x40012000
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020800 	.word	0x40020800
 8000fa8:	40020000 	.word	0x40020000
 8000fac:	200000bc 	.word	0x200000bc
 8000fb0:	40026410 	.word	0x40026410

08000fb4 <HAL_ADC_ConvCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	Cnt_adcConvCplt++;
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <HAL_ADC_ConvCpltCallback+0x20>)
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <HAL_ADC_ConvCpltCallback+0x20>)
 8000fc6:	801a      	strh	r2, [r3, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	20000048 	.word	0x20000048

08000fd8 <adc_transform>:

float adc_transform(uint16_t adcVal, uint8_t idx) {
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	460a      	mov	r2, r1
 8000fe2:	80fb      	strh	r3, [r7, #6]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	717b      	strb	r3, [r7, #5]
return ((float)((int16_t)adcVal - Hwcal_Data[idx].offset) * Hwcal_Data[idx].gain);
 8000fe8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fec:	4619      	mov	r1, r3
 8000fee:	797b      	ldrb	r3, [r7, #5]
 8000ff0:	4a0b      	ldr	r2, [pc, #44]	; (8001020 <adc_transform+0x48>)
 8000ff2:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8000ff6:	1acb      	subs	r3, r1, r3
 8000ff8:	ee07 3a90 	vmov	s15, r3
 8000ffc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001000:	797b      	ldrb	r3, [r7, #5]
 8001002:	4a07      	ldr	r2, [pc, #28]	; (8001020 <adc_transform+0x48>)
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	4413      	add	r3, r2
 8001008:	3304      	adds	r3, #4
 800100a:	edd3 7a00 	vldr	s15, [r3]
 800100e:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001012:	eeb0 0a67 	vmov.f32	s0, s15
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	20000000 	.word	0x20000000

08001024 <adc_100us>:

void adc_100us(void) {
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	V_U_Analog[0] = adc_transform(adcSamples[0], 0);
 8001028:	4b16      	ldr	r3, [pc, #88]	; (8001084 <adc_100us+0x60>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff ffd2 	bl	8000fd8 <adc_transform>
 8001034:	eef0 7a40 	vmov.f32	s15, s0
 8001038:	4b13      	ldr	r3, [pc, #76]	; (8001088 <adc_100us+0x64>)
 800103a:	edc3 7a00 	vstr	s15, [r3]
	V_U_Analog[1] = adc_transform(adcSamples[1], 1);
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <adc_100us+0x60>)
 8001040:	885b      	ldrh	r3, [r3, #2]
 8001042:	2101      	movs	r1, #1
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ffc7 	bl	8000fd8 <adc_transform>
 800104a:	eef0 7a40 	vmov.f32	s15, s0
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <adc_100us+0x64>)
 8001050:	edc3 7a01 	vstr	s15, [r3, #4]
	V_U_Analog[2] = adc_transform(adcSamples[2], 2);
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <adc_100us+0x60>)
 8001056:	889b      	ldrh	r3, [r3, #4]
 8001058:	2102      	movs	r1, #2
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ffbc 	bl	8000fd8 <adc_transform>
 8001060:	eef0 7a40 	vmov.f32	s15, s0
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <adc_100us+0x64>)
 8001066:	edc3 7a02 	vstr	s15, [r3, #8]
	V_U_Analog[3] = adc_transform(adcSamples[3], 3);
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <adc_100us+0x60>)
 800106c:	88db      	ldrh	r3, [r3, #6]
 800106e:	2103      	movs	r1, #3
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ffb1 	bl	8000fd8 <adc_transform>
 8001076:	eef0 7a40 	vmov.f32	s15, s0
 800107a:	4b03      	ldr	r3, [pc, #12]	; (8001088 <adc_100us+0x64>)
 800107c:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	2000011c 	.word	0x2000011c
 8001088:	20000124 	.word	0x20000124

0800108c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <MX_DMA_Init+0x3c>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <MX_DMA_Init+0x3c>)
 800109c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <MX_DMA_Init+0x3c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	2038      	movs	r0, #56	; 0x38
 80010b4:	f001 fc21 	bl	80028fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010b8:	2038      	movs	r0, #56	; 0x38
 80010ba:	f001 fc3a 	bl	8002932 <HAL_NVIC_EnableIRQ>

}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40023800 	.word	0x40023800

080010cc <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA5   ------> SPI1_SCK
*/
void MX_GPIO_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08c      	sub	sp, #48	; 0x30
 80010d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
 80010e6:	4b59      	ldr	r3, [pc, #356]	; (800124c <MX_GPIO_Init+0x180>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a58      	ldr	r2, [pc, #352]	; (800124c <MX_GPIO_Init+0x180>)
 80010ec:	f043 0304 	orr.w	r3, r3, #4
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b56      	ldr	r3, [pc, #344]	; (800124c <MX_GPIO_Init+0x180>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0304 	and.w	r3, r3, #4
 80010fa:	61bb      	str	r3, [r7, #24]
 80010fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	4b52      	ldr	r3, [pc, #328]	; (800124c <MX_GPIO_Init+0x180>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a51      	ldr	r2, [pc, #324]	; (800124c <MX_GPIO_Init+0x180>)
 8001108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b4f      	ldr	r3, [pc, #316]	; (800124c <MX_GPIO_Init+0x180>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	4b4b      	ldr	r3, [pc, #300]	; (800124c <MX_GPIO_Init+0x180>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a4a      	ldr	r2, [pc, #296]	; (800124c <MX_GPIO_Init+0x180>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b48      	ldr	r3, [pc, #288]	; (800124c <MX_GPIO_Init+0x180>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b44      	ldr	r3, [pc, #272]	; (800124c <MX_GPIO_Init+0x180>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a43      	ldr	r2, [pc, #268]	; (800124c <MX_GPIO_Init+0x180>)
 8001140:	f043 0302 	orr.w	r3, r3, #2
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b41      	ldr	r3, [pc, #260]	; (800124c <MX_GPIO_Init+0x180>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	4b3d      	ldr	r3, [pc, #244]	; (800124c <MX_GPIO_Init+0x180>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a3c      	ldr	r2, [pc, #240]	; (800124c <MX_GPIO_Init+0x180>)
 800115c:	f043 0308 	orr.w	r3, r3, #8
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b3a      	ldr	r3, [pc, #232]	; (800124c <MX_GPIO_Init+0x180>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0308 	and.w	r3, r3, #8
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	4b36      	ldr	r3, [pc, #216]	; (800124c <MX_GPIO_Init+0x180>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a35      	ldr	r2, [pc, #212]	; (800124c <MX_GPIO_Init+0x180>)
 8001178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b33      	ldr	r3, [pc, #204]	; (800124c <MX_GPIO_Init+0x180>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001190:	482f      	ldr	r0, [pc, #188]	; (8001250 <MX_GPIO_Init+0x184>)
 8001192:	f002 f923 	bl	80033dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	2140      	movs	r1, #64	; 0x40
 800119a:	482e      	ldr	r0, [pc, #184]	; (8001254 <MX_GPIO_Init+0x188>)
 800119c:	f002 f91e 	bl	80033dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011a6:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <MX_GPIO_Init+0x18c>)
 80011a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	4619      	mov	r1, r3
 80011b4:	4829      	ldr	r0, [pc, #164]	; (800125c <MX_GPIO_Init+0x190>)
 80011b6:	f001 ff67 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011ba:	2320      	movs	r3, #32
 80011bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011ca:	2305      	movs	r3, #5
 80011cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ce:	f107 031c 	add.w	r3, r7, #28
 80011d2:	4619      	mov	r1, r3
 80011d4:	4822      	ldr	r0, [pc, #136]	; (8001260 <MX_GPIO_Init+0x194>)
 80011d6:	f001 ff57 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 80011da:	f244 0381 	movw	r3, #16513	; 0x4081
 80011de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e0:	2301      	movs	r3, #1
 80011e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	4619      	mov	r1, r3
 80011f2:	4817      	ldr	r0, [pc, #92]	; (8001250 <MX_GPIO_Init+0x184>)
 80011f4:	f001 ff48 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011f8:	2340      	movs	r3, #64	; 0x40
 80011fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fc:	2301      	movs	r3, #1
 80011fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	2300      	movs	r3, #0
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001208:	f107 031c 	add.w	r3, r7, #28
 800120c:	4619      	mov	r1, r3
 800120e:	4811      	ldr	r0, [pc, #68]	; (8001254 <MX_GPIO_Init+0x188>)
 8001210:	f001 ff3a 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001214:	2380      	movs	r3, #128	; 0x80
 8001216:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001218:	2300      	movs	r3, #0
 800121a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001220:	f107 031c 	add.w	r3, r7, #28
 8001224:	4619      	mov	r1, r3
 8001226:	480b      	ldr	r0, [pc, #44]	; (8001254 <MX_GPIO_Init+0x188>)
 8001228:	f001 ff2e 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800122c:	23f0      	movs	r3, #240	; 0xf0
 800122e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001230:	2300      	movs	r3, #0
 8001232:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001234:	2301      	movs	r3, #1
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001238:	f107 031c 	add.w	r3, r7, #28
 800123c:	4619      	mov	r1, r3
 800123e:	4809      	ldr	r0, [pc, #36]	; (8001264 <MX_GPIO_Init+0x198>)
 8001240:	f001 ff22 	bl	8003088 <HAL_GPIO_Init>

}
 8001244:	bf00      	nop
 8001246:	3730      	adds	r7, #48	; 0x30
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40023800 	.word	0x40023800
 8001250:	40020400 	.word	0x40020400
 8001254:	40021800 	.word	0x40021800
 8001258:	10110000 	.word	0x10110000
 800125c:	40020800 	.word	0x40020800
 8001260:	40020000 	.word	0x40020000
 8001264:	40020c00 	.word	0x40020c00

08001268 <TrigHandler>:
uint8_t triggered = 0;
uint8_t sendChunk = 0;		// send data is divided in 4 chunks. first 2 chunks for analog signals are send, then 2 for digital signals are send

uint16_t CntSampleRemaining = 0;

void TrigHandler(void) {
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	switch (Trigger.eTrigStatus) {
 800126c:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <TrigHandler+0x90>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b06      	cmp	r3, #6
 8001272:	d83e      	bhi.n	80012f2 <TrigHandler+0x8a>
 8001274:	a201      	add	r2, pc, #4	; (adr r2, 800127c <TrigHandler+0x14>)
 8001276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800127a:	bf00      	nop
 800127c:	080012f3 	.word	0x080012f3
 8001280:	08001299 	.word	0x08001299
 8001284:	080012c3 	.word	0x080012c3
 8001288:	080012f3 	.word	0x080012f3
 800128c:	080012f3 	.word	0x080012f3
 8001290:	080012ed 	.word	0x080012ed
 8001294:	080012f3 	.word	0x080012f3
		case TRIG_IDLE:
			break;
		case TRIG_ANA_POS:
			getSample();
 8001298:	f000 f862 	bl	8001360 <getSample>
			if (V_U_Analog[Trigger.idxChannel] >= Trigger.fTrigVal) {
 800129c:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <TrigHandler+0x90>)
 800129e:	785b      	ldrb	r3, [r3, #1]
 80012a0:	4a16      	ldr	r2, [pc, #88]	; (80012fc <TrigHandler+0x94>)
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	ed93 7a00 	vldr	s14, [r3]
 80012aa:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <TrigHandler+0x90>)
 80012ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80012b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b8:	da00      	bge.n	80012bc <TrigHandler+0x54>
				SignalTriggered();
			}
			break;
 80012ba:	e01b      	b.n	80012f4 <TrigHandler+0x8c>
				SignalTriggered();
 80012bc:	f000 f820 	bl	8001300 <SignalTriggered>
			break;
 80012c0:	e018      	b.n	80012f4 <TrigHandler+0x8c>
		case TRIG_ANA_NEG:
			getSample();
 80012c2:	f000 f84d 	bl	8001360 <getSample>
			if (V_U_Analog[Trigger.idxChannel] <= Trigger.fTrigVal) {
 80012c6:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <TrigHandler+0x90>)
 80012c8:	785b      	ldrb	r3, [r3, #1]
 80012ca:	4a0c      	ldr	r2, [pc, #48]	; (80012fc <TrigHandler+0x94>)
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	ed93 7a00 	vldr	s14, [r3]
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <TrigHandler+0x90>)
 80012d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80012da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e2:	d900      	bls.n	80012e6 <TrigHandler+0x7e>
				SignalTriggered();
			}
			break;
 80012e4:	e006      	b.n	80012f4 <TrigHandler+0x8c>
				SignalTriggered();
 80012e6:	f000 f80b 	bl	8001300 <SignalTriggered>
			break;
 80012ea:	e003      	b.n	80012f4 <TrigHandler+0x8c>
		case TRIG_ENDREC:
			getSample();
 80012ec:	f000 f838 	bl	8001360 <getSample>
			break;
 80012f0:	e000      	b.n	80012f4 <TrigHandler+0x8c>
		case TRIG_SENDDATA:
			break;
		default:
			break;
 80012f2:	bf00      	nop
	}
}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	2000004c 	.word	0x2000004c
 80012fc:	20000124 	.word	0x20000124

08001300 <SignalTriggered>:

void SignalTriggered(void) {
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
	Trigger.eTrigStatus = TRIG_ENDREC;
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <SignalTriggered+0x4c>)
 8001306:	2205      	movs	r2, #5
 8001308:	701a      	strb	r2, [r3, #0]
	if (BuffIdx > SAMPLES / 2) {
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <SignalTriggered+0x50>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001312:	4293      	cmp	r3, r2
 8001314:	d907      	bls.n	8001326 <SignalTriggered+0x26>
		StartSendIdx = BuffIdx - SAMPLES / 2;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <SignalTriggered+0x50>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f5a3 536a 	sub.w	r3, r3, #14976	; 0x3a80
 800131e:	3b18      	subs	r3, #24
 8001320:	4a0c      	ldr	r2, [pc, #48]	; (8001354 <SignalTriggered+0x54>)
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	e006      	b.n	8001334 <SignalTriggered+0x34>
	} else {
		StartSendIdx = BuffIdx + SAMPLES / 2;
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <SignalTriggered+0x50>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 800132e:	3318      	adds	r3, #24
 8001330:	4a08      	ldr	r2, [pc, #32]	; (8001354 <SignalTriggered+0x54>)
 8001332:	6013      	str	r3, [r2, #0]
	}
	triggered = 1;
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <SignalTriggered+0x58>)
 8001336:	2201      	movs	r2, #1
 8001338:	701a      	strb	r2, [r3, #0]
	CntSampleRemaining = SAMPLES / 2; // Trigger zunächst auf 50% fixiert
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <SignalTriggered+0x5c>)
 800133c:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001340:	801a      	strh	r2, [r3, #0]
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	2000004c 	.word	0x2000004c
 8001350:	2000005c 	.word	0x2000005c
 8001354:	20000060 	.word	0x20000060
 8001358:	20000064 	.word	0x20000064
 800135c:	20000066 	.word	0x20000066

08001360 <getSample>:

void getSample(void) {
 8001360:	b598      	push	{r3, r4, r7, lr}
 8001362:	af00      	add	r7, sp, #0
	// Add Analog channels if used
	if (Trigger.smplCh & 0x01) {
 8001364:	4b5b      	ldr	r3, [pc, #364]	; (80014d4 <getSample+0x174>)
 8001366:	7a1b      	ldrb	r3, [r3, #8]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	2b00      	cmp	r3, #0
 800136e:	d01c      	beq.n	80013aa <getSample+0x4a>
		BuffAna_q11[BuffIdx] = encode_q11(V_U_Analog[0]);
 8001370:	4b59      	ldr	r3, [pc, #356]	; (80014d8 <getSample+0x178>)
 8001372:	edd3 7a00 	vldr	s15, [r3]
 8001376:	4b59      	ldr	r3, [pc, #356]	; (80014dc <getSample+0x17c>)
 8001378:	681c      	ldr	r4, [r3, #0]
 800137a:	eeb0 0a67 	vmov.f32	s0, s15
 800137e:	f000 f937 	bl	80015f0 <encode_q11>
 8001382:	4603      	mov	r3, r0
 8001384:	461a      	mov	r2, r3
 8001386:	4b56      	ldr	r3, [pc, #344]	; (80014e0 <getSample+0x180>)
 8001388:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		BuffDig_q11[BuffIdx] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7);
 800138c:	4b53      	ldr	r3, [pc, #332]	; (80014dc <getSample+0x17c>)
 800138e:	681c      	ldr	r4, [r3, #0]
 8001390:	2180      	movs	r1, #128	; 0x80
 8001392:	4854      	ldr	r0, [pc, #336]	; (80014e4 <getSample+0x184>)
 8001394:	f002 f80a 	bl	80033ac <HAL_GPIO_ReadPin>
 8001398:	4603      	mov	r3, r0
 800139a:	461a      	mov	r2, r3
 800139c:	4b52      	ldr	r3, [pc, #328]	; (80014e8 <getSample+0x188>)
 800139e:	551a      	strb	r2, [r3, r4]
		BuffIdx++;
 80013a0:	4b4e      	ldr	r3, [pc, #312]	; (80014dc <getSample+0x17c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	3301      	adds	r3, #1
 80013a6:	4a4d      	ldr	r2, [pc, #308]	; (80014dc <getSample+0x17c>)
 80013a8:	6013      	str	r3, [r2, #0]
	}
	if (Trigger.smplCh & 0x02) {
 80013aa:	4b4a      	ldr	r3, [pc, #296]	; (80014d4 <getSample+0x174>)
 80013ac:	7a1b      	ldrb	r3, [r3, #8]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d01c      	beq.n	80013f0 <getSample+0x90>
		BuffAna_q11[BuffIdx] = encode_q11(V_U_Analog[1]);
 80013b6:	4b48      	ldr	r3, [pc, #288]	; (80014d8 <getSample+0x178>)
 80013b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80013bc:	4b47      	ldr	r3, [pc, #284]	; (80014dc <getSample+0x17c>)
 80013be:	681c      	ldr	r4, [r3, #0]
 80013c0:	eeb0 0a67 	vmov.f32	s0, s15
 80013c4:	f000 f914 	bl	80015f0 <encode_q11>
 80013c8:	4603      	mov	r3, r0
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b44      	ldr	r3, [pc, #272]	; (80014e0 <getSample+0x180>)
 80013ce:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		BuffDig_q11[BuffIdx] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6);
 80013d2:	4b42      	ldr	r3, [pc, #264]	; (80014dc <getSample+0x17c>)
 80013d4:	681c      	ldr	r4, [r3, #0]
 80013d6:	2140      	movs	r1, #64	; 0x40
 80013d8:	4842      	ldr	r0, [pc, #264]	; (80014e4 <getSample+0x184>)
 80013da:	f001 ffe7 	bl	80033ac <HAL_GPIO_ReadPin>
 80013de:	4603      	mov	r3, r0
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b41      	ldr	r3, [pc, #260]	; (80014e8 <getSample+0x188>)
 80013e4:	551a      	strb	r2, [r3, r4]
		BuffIdx++;
 80013e6:	4b3d      	ldr	r3, [pc, #244]	; (80014dc <getSample+0x17c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	3301      	adds	r3, #1
 80013ec:	4a3b      	ldr	r2, [pc, #236]	; (80014dc <getSample+0x17c>)
 80013ee:	6013      	str	r3, [r2, #0]
	}
	if (Trigger.smplCh & 0x04) {
 80013f0:	4b38      	ldr	r3, [pc, #224]	; (80014d4 <getSample+0x174>)
 80013f2:	7a1b      	ldrb	r3, [r3, #8]
 80013f4:	f003 0304 	and.w	r3, r3, #4
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d01c      	beq.n	8001436 <getSample+0xd6>
		BuffAna_q11[BuffIdx] = encode_q11(V_U_Analog[2]);
 80013fc:	4b36      	ldr	r3, [pc, #216]	; (80014d8 <getSample+0x178>)
 80013fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8001402:	4b36      	ldr	r3, [pc, #216]	; (80014dc <getSample+0x17c>)
 8001404:	681c      	ldr	r4, [r3, #0]
 8001406:	eeb0 0a67 	vmov.f32	s0, s15
 800140a:	f000 f8f1 	bl	80015f0 <encode_q11>
 800140e:	4603      	mov	r3, r0
 8001410:	461a      	mov	r2, r3
 8001412:	4b33      	ldr	r3, [pc, #204]	; (80014e0 <getSample+0x180>)
 8001414:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		BuffDig_q11[BuffIdx] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5);
 8001418:	4b30      	ldr	r3, [pc, #192]	; (80014dc <getSample+0x17c>)
 800141a:	681c      	ldr	r4, [r3, #0]
 800141c:	2120      	movs	r1, #32
 800141e:	4831      	ldr	r0, [pc, #196]	; (80014e4 <getSample+0x184>)
 8001420:	f001 ffc4 	bl	80033ac <HAL_GPIO_ReadPin>
 8001424:	4603      	mov	r3, r0
 8001426:	461a      	mov	r2, r3
 8001428:	4b2f      	ldr	r3, [pc, #188]	; (80014e8 <getSample+0x188>)
 800142a:	551a      	strb	r2, [r3, r4]
		BuffIdx++;
 800142c:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <getSample+0x17c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	3301      	adds	r3, #1
 8001432:	4a2a      	ldr	r2, [pc, #168]	; (80014dc <getSample+0x17c>)
 8001434:	6013      	str	r3, [r2, #0]
	}
	if (Trigger.smplCh & 0x08) {
 8001436:	4b27      	ldr	r3, [pc, #156]	; (80014d4 <getSample+0x174>)
 8001438:	7a1b      	ldrb	r3, [r3, #8]
 800143a:	f003 0308 	and.w	r3, r3, #8
 800143e:	2b00      	cmp	r3, #0
 8001440:	d01c      	beq.n	800147c <getSample+0x11c>
		BuffAna_q11[BuffIdx] = encode_q11(V_U_Analog[3]);
 8001442:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <getSample+0x178>)
 8001444:	edd3 7a03 	vldr	s15, [r3, #12]
 8001448:	4b24      	ldr	r3, [pc, #144]	; (80014dc <getSample+0x17c>)
 800144a:	681c      	ldr	r4, [r3, #0]
 800144c:	eeb0 0a67 	vmov.f32	s0, s15
 8001450:	f000 f8ce 	bl	80015f0 <encode_q11>
 8001454:	4603      	mov	r3, r0
 8001456:	461a      	mov	r2, r3
 8001458:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <getSample+0x180>)
 800145a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		BuffDig_q11[BuffIdx] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4);
 800145e:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <getSample+0x17c>)
 8001460:	681c      	ldr	r4, [r3, #0]
 8001462:	2110      	movs	r1, #16
 8001464:	481f      	ldr	r0, [pc, #124]	; (80014e4 <getSample+0x184>)
 8001466:	f001 ffa1 	bl	80033ac <HAL_GPIO_ReadPin>
 800146a:	4603      	mov	r3, r0
 800146c:	461a      	mov	r2, r3
 800146e:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <getSample+0x188>)
 8001470:	551a      	strb	r2, [r3, r4]
		BuffIdx++;
 8001472:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <getSample+0x17c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	3301      	adds	r3, #1
 8001478:	4a18      	ldr	r2, [pc, #96]	; (80014dc <getSample+0x17c>)
 800147a:	6013      	str	r3, [r2, #0]
	}

	if (BuffIdx == SAMPLES) BuffIdx = 0;
 800147c:	4b17      	ldr	r3, [pc, #92]	; (80014dc <getSample+0x17c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f247 5230 	movw	r2, #30000	; 0x7530
 8001484:	4293      	cmp	r3, r2
 8001486:	d102      	bne.n	800148e <getSample+0x12e>
 8001488:	4b14      	ldr	r3, [pc, #80]	; (80014dc <getSample+0x17c>)
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
	if (triggered) {
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <getSample+0x18c>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d008      	beq.n	80014a8 <getSample+0x148>
		CntSampleRemaining -= Trigger.numSmplCh;
 8001496:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <getSample+0x190>)
 8001498:	881a      	ldrh	r2, [r3, #0]
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <getSample+0x174>)
 800149c:	7a5b      	ldrb	r3, [r3, #9]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <getSample+0x190>)
 80014a6:	801a      	strh	r2, [r3, #0]
	}
	if ((CntSampleRemaining == 0) && triggered) {
 80014a8:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <getSample+0x190>)
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d10f      	bne.n	80014d0 <getSample+0x170>
 80014b0:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <getSample+0x18c>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d00b      	beq.n	80014d0 <getSample+0x170>
		triggered = 0;
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <getSample+0x18c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]
		Trigger.eTrigStatus = TRIG_IDLE;
 80014be:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <getSample+0x174>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
		BuffIdx = 0;
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <getSample+0x17c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
		Datahandler = DATA_SEND;
 80014ca:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <getSample+0x194>)
 80014cc:	2202      	movs	r2, #2
 80014ce:	701a      	strb	r2, [r3, #0]
	}

}
 80014d0:	bf00      	nop
 80014d2:	bd98      	pop	{r3, r4, r7, pc}
 80014d4:	2000004c 	.word	0x2000004c
 80014d8:	20000124 	.word	0x20000124
 80014dc:	2000005c 	.word	0x2000005c
 80014e0:	20007664 	.word	0x20007664
 80014e4:	40020c00 	.word	0x40020c00
 80014e8:	20000134 	.word	0x20000134
 80014ec:	20000064 	.word	0x20000064
 80014f0:	20000066 	.word	0x20000066
 80014f4:	20000058 	.word	0x20000058

080014f8 <DataHandler>:
void DataHandler(void) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
	switch (Datahandler) {
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <DataHandler+0x50>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d01d      	beq.n	8001540 <DataHandler+0x48>
 8001504:	2b02      	cmp	r3, #2
 8001506:	d000      	beq.n	800150a <DataHandler+0x12>
			HAL_UART_Transmit_IT(&huart3, &BuffAna_q11[StartSendIdx], (SAMPLES-StartSendIdx)*2);
			sendChunk = 1;
			Datahandler = DATA_IDLE;
			break;
		default:
			break;
 8001508:	e01b      	b.n	8001542 <DataHandler+0x4a>
			HAL_UART_Transmit_IT(&huart3, &BuffAna_q11[StartSendIdx], (SAMPLES-StartSendIdx)*2);
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <DataHandler+0x54>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	4a0f      	ldr	r2, [pc, #60]	; (8001550 <DataHandler+0x58>)
 8001512:	1899      	adds	r1, r3, r2
 8001514:	4b0d      	ldr	r3, [pc, #52]	; (800154c <DataHandler+0x54>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	b29b      	uxth	r3, r3
 800151a:	461a      	mov	r2, r3
 800151c:	03d2      	lsls	r2, r2, #15
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	b29b      	uxth	r3, r3
 8001524:	f5a3 53ad 	sub.w	r3, r3, #5536	; 0x15a0
 8001528:	b29b      	uxth	r3, r3
 800152a:	461a      	mov	r2, r3
 800152c:	4809      	ldr	r0, [pc, #36]	; (8001554 <DataHandler+0x5c>)
 800152e:	f003 ff54 	bl	80053da <HAL_UART_Transmit_IT>
			sendChunk = 1;
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <DataHandler+0x60>)
 8001534:	2201      	movs	r2, #1
 8001536:	701a      	strb	r2, [r3, #0]
			Datahandler = DATA_IDLE;
 8001538:	4b03      	ldr	r3, [pc, #12]	; (8001548 <DataHandler+0x50>)
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
			break;
 800153e:	e000      	b.n	8001542 <DataHandler+0x4a>
			break;
 8001540:	bf00      	nop
	}
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000058 	.word	0x20000058
 800154c:	20000060 	.word	0x20000060
 8001550:	20007664 	.word	0x20007664
 8001554:	20016190 	.word	0x20016190
 8001558:	20000065 	.word	0x20000065

0800155c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
	if (sendChunk == 1) {
 8001564:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <HAL_UART_TxCpltCallback+0x80>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d10d      	bne.n	8001588 <HAL_UART_TxCpltCallback+0x2c>
		HAL_UART_Transmit_IT(&huart3, &BuffAna_q11[0], StartSendIdx*2);
 800156c:	4b1c      	ldr	r3, [pc, #112]	; (80015e0 <HAL_UART_TxCpltCallback+0x84>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	b29b      	uxth	r3, r3
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	b29b      	uxth	r3, r3
 8001576:	461a      	mov	r2, r3
 8001578:	491a      	ldr	r1, [pc, #104]	; (80015e4 <HAL_UART_TxCpltCallback+0x88>)
 800157a:	481b      	ldr	r0, [pc, #108]	; (80015e8 <HAL_UART_TxCpltCallback+0x8c>)
 800157c:	f003 ff2d 	bl	80053da <HAL_UART_Transmit_IT>
		sendChunk = 2;
 8001580:	4b16      	ldr	r3, [pc, #88]	; (80015dc <HAL_UART_TxCpltCallback+0x80>)
 8001582:	2202      	movs	r2, #2
 8001584:	701a      	strb	r2, [r3, #0]
		sendChunk = 3;
	} else if (sendChunk == 3) {
		HAL_UART_Transmit_IT(&huart3, &BuffDig_q11[0], StartSendIdx);
		sendChunk = 0;
	}
}
 8001586:	e025      	b.n	80015d4 <HAL_UART_TxCpltCallback+0x78>
	} else if (sendChunk == 2) {
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <HAL_UART_TxCpltCallback+0x80>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b02      	cmp	r3, #2
 800158e:	d112      	bne.n	80015b6 <HAL_UART_TxCpltCallback+0x5a>
		HAL_UART_Transmit_IT(&huart3, &BuffDig_q11[StartSendIdx], (SAMPLES-StartSendIdx));
 8001590:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <HAL_UART_TxCpltCallback+0x84>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a15      	ldr	r2, [pc, #84]	; (80015ec <HAL_UART_TxCpltCallback+0x90>)
 8001596:	1899      	adds	r1, r3, r2
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <HAL_UART_TxCpltCallback+0x84>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	b29b      	uxth	r3, r3
 800159e:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 80015a2:	3330      	adds	r3, #48	; 0x30
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	461a      	mov	r2, r3
 80015a8:	480f      	ldr	r0, [pc, #60]	; (80015e8 <HAL_UART_TxCpltCallback+0x8c>)
 80015aa:	f003 ff16 	bl	80053da <HAL_UART_Transmit_IT>
		sendChunk = 3;
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <HAL_UART_TxCpltCallback+0x80>)
 80015b0:	2203      	movs	r2, #3
 80015b2:	701a      	strb	r2, [r3, #0]
}
 80015b4:	e00e      	b.n	80015d4 <HAL_UART_TxCpltCallback+0x78>
	} else if (sendChunk == 3) {
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <HAL_UART_TxCpltCallback+0x80>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	d10a      	bne.n	80015d4 <HAL_UART_TxCpltCallback+0x78>
		HAL_UART_Transmit_IT(&huart3, &BuffDig_q11[0], StartSendIdx);
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <HAL_UART_TxCpltCallback+0x84>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	461a      	mov	r2, r3
 80015c6:	4909      	ldr	r1, [pc, #36]	; (80015ec <HAL_UART_TxCpltCallback+0x90>)
 80015c8:	4807      	ldr	r0, [pc, #28]	; (80015e8 <HAL_UART_TxCpltCallback+0x8c>)
 80015ca:	f003 ff06 	bl	80053da <HAL_UART_Transmit_IT>
		sendChunk = 0;
 80015ce:	4b03      	ldr	r3, [pc, #12]	; (80015dc <HAL_UART_TxCpltCallback+0x80>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000065 	.word	0x20000065
 80015e0:	20000060 	.word	0x20000060
 80015e4:	20007664 	.word	0x20007664
 80015e8:	20016190 	.word	0x20016190
 80015ec:	20000134 	.word	0x20000134

080015f0 <encode_q11>:

uint16_t encode_q11(float Val) {
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	ed87 0a01 	vstr	s0, [r7, #4]
	return (uint16_t)((Val * 2048) + 0.5);
 80015fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80015fe:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001630 <encode_q11+0x40>
 8001602:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001606:	ee17 0a90 	vmov	r0, s15
 800160a:	f7fe ff69 	bl	80004e0 <__aeabi_f2d>
 800160e:	f04f 0200 	mov.w	r2, #0
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <encode_q11+0x44>)
 8001614:	f7fe fe06 	bl	8000224 <__adddf3>
 8001618:	4603      	mov	r3, r0
 800161a:	460c      	mov	r4, r1
 800161c:	4618      	mov	r0, r3
 800161e:	4621      	mov	r1, r4
 8001620:	f7ff f9c8 	bl	80009b4 <__aeabi_d2uiz>
 8001624:	4603      	mov	r3, r0
 8001626:	b29b      	uxth	r3, r3
}
 8001628:	4618      	mov	r0, r3
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bd90      	pop	{r4, r7, pc}
 8001630:	45000000 	.word	0x45000000
 8001634:	3fe00000 	.word	0x3fe00000

08001638 <decode_q11>:

float decode_q11(uint16_t Val) {
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	80fb      	strh	r3, [r7, #6]
	return (Val / 2048.0);
 8001642:	88fb      	ldrh	r3, [r7, #6]
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe ff39 	bl	80004bc <__aeabi_i2d>
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <decode_q11+0x38>)
 8001650:	f7ff f8c8 	bl	80007e4 <__aeabi_ddiv>
 8001654:	4603      	mov	r3, r0
 8001656:	460c      	mov	r4, r1
 8001658:	4618      	mov	r0, r3
 800165a:	4621      	mov	r1, r4
 800165c:	f7ff f9ca 	bl	80009f4 <__aeabi_d2f>
 8001660:	4603      	mov	r3, r0
 8001662:	ee07 3a90 	vmov	s15, r3
}
 8001666:	eeb0 0a67 	vmov.f32	s0, s15
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	bd90      	pop	{r4, r7, pc}
 8001670:	40a00000 	.word	0x40a00000

08001674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001678:	f000 fbf4 	bl	8001e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800167c:	f000 f82e 	bl	80016dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001680:	f7ff fd24 	bl	80010cc <MX_GPIO_Init>
  MX_DMA_Init();
 8001684:	f7ff fd02 	bl	800108c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001688:	f000 fabe 	bl	8001c08 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800168c:	f7ff fb82 	bl	8000d94 <MX_ADC1_Init>
  MX_SDIO_SD_Init();
 8001690:	f000 f90c 	bl	80018ac <MX_SDIO_SD_Init>
  MX_TIM4_Init();
 8001694:	f000 fa44 	bl	8001b20 <MX_TIM4_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001698:	f000 fb30 	bl	8001cfc <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcSamples, 4);
 800169c:	2204      	movs	r2, #4
 800169e:	4909      	ldr	r1, [pc, #36]	; (80016c4 <main+0x50>)
 80016a0:	4809      	ldr	r0, [pc, #36]	; (80016c8 <main+0x54>)
 80016a2:	f000 fcb7 	bl	8002014 <HAL_ADC_Start_DMA>
  HAL_UART_Receive_IT(&huart3, rxData, sizeof(rxData));
 80016a6:	2206      	movs	r2, #6
 80016a8:	4908      	ldr	r1, [pc, #32]	; (80016cc <main+0x58>)
 80016aa:	4809      	ldr	r0, [pc, #36]	; (80016d0 <main+0x5c>)
 80016ac:	f003 feda 	bl	8005464 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80016b0:	4808      	ldr	r0, [pc, #32]	; (80016d4 <main+0x60>)
 80016b2:	f003 fa70 	bl	8004b96 <HAL_TIM_Base_Start_IT>
	  sprintf (buf, "%u", adcSamples[idx]);
	  strcat(str, buf);
	  strcat(str, "\n\r");
	  HAL_UART_Transmit(&huart3, (uint8_t*)str, strlen(str), 0xFFFF);
	  */
	  Cnt_Loop++;
 80016b6:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <main+0x64>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	3301      	adds	r3, #1
 80016bc:	4a06      	ldr	r2, [pc, #24]	; (80016d8 <main+0x64>)
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	e7f9      	b.n	80016b6 <main+0x42>
 80016c2:	bf00      	nop
 80016c4:	2000011c 	.word	0x2000011c
 80016c8:	20000074 	.word	0x20000074
 80016cc:	200160c4 	.word	0x200160c4
 80016d0:	20016190 	.word	0x20016190
 80016d4:	20016150 	.word	0x20016150
 80016d8:	20000068 	.word	0x20000068

080016dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b0aa      	sub	sp, #168	; 0xa8
 80016e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016e6:	2234      	movs	r2, #52	; 0x34
 80016e8:	2100      	movs	r1, #0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f005 fb8a 	bl	8006e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001700:	f107 0308 	add.w	r3, r7, #8
 8001704:	2258      	movs	r2, #88	; 0x58
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f005 fb7b 	bl	8006e04 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	4b35      	ldr	r3, [pc, #212]	; (80017e8 <SystemClock_Config+0x10c>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	4a34      	ldr	r2, [pc, #208]	; (80017e8 <SystemClock_Config+0x10c>)
 8001718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800171c:	6413      	str	r3, [r2, #64]	; 0x40
 800171e:	4b32      	ldr	r3, [pc, #200]	; (80017e8 <SystemClock_Config+0x10c>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800172a:	2300      	movs	r3, #0
 800172c:	603b      	str	r3, [r7, #0]
 800172e:	4b2f      	ldr	r3, [pc, #188]	; (80017ec <SystemClock_Config+0x110>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a2e      	ldr	r2, [pc, #184]	; (80017ec <SystemClock_Config+0x110>)
 8001734:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	4b2c      	ldr	r3, [pc, #176]	; (80017ec <SystemClock_Config+0x110>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001746:	2301      	movs	r3, #1
 8001748:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800174a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800174e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001750:	2302      	movs	r3, #2
 8001752:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001756:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800175a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 8;
 800175e:	2308      	movs	r3, #8
 8001760:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 384;
 8001764:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001768:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800176c:	2304      	movs	r3, #4
 800176e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001772:	2308      	movs	r3, #8
 8001774:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001778:	2302      	movs	r3, #2
 800177a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800177e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001782:	4618      	mov	r0, r3
 8001784:	f002 fc0a 	bl	8003f9c <HAL_RCC_OscConfig>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800178e:	f000 f885 	bl	800189c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001792:	230f      	movs	r3, #15
 8001794:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001796:	2302      	movs	r3, #2
 8001798:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800179a:	2300      	movs	r3, #0
 800179c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800179e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017a4:	2300      	movs	r3, #0
 80017a6:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80017a8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80017ac:	2103      	movs	r1, #3
 80017ae:	4618      	mov	r0, r3
 80017b0:	f001 ff76 	bl	80036a0 <HAL_RCC_ClockConfig>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80017ba:	f000 f86f 	bl	800189c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80017be:	2360      	movs	r3, #96	; 0x60
 80017c0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80017c2:	2300      	movs	r3, #0
 80017c4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80017c6:	2300      	movs	r3, #0
 80017c8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ca:	f107 0308 	add.w	r3, r7, #8
 80017ce:	4618      	mov	r0, r3
 80017d0:	f002 f958 	bl	8003a84 <HAL_RCCEx_PeriphCLKConfig>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <SystemClock_Config+0x102>
  {
    Error_Handler();
 80017da:	f000 f85f 	bl	800189c <Error_Handler>
  }
}
 80017de:	bf00      	nop
 80017e0:	37a8      	adds	r7, #168	; 0xa8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40007000 	.word	0x40007000

080017f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	adc_100us();
 80017f8:	f7ff fc14 	bl	8001024 <adc_100us>
	TrigHandler();
 80017fc:	f7ff fd34 	bl	8001268 <TrigHandler>
	DataHandler();
 8001800:	f7ff fe7a 	bl	80014f8 <DataHandler>
	Cnt_tim4++;
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	3301      	adds	r3, #1
 800180a:	4a03      	ldr	r2, [pc, #12]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800180c:	6013      	str	r3, [r2, #0]
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	2000006c 	.word	0x2000006c

0800181c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	Trigger.eTrigStatus = rxData[0] & 0x0F;
 8001824:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <HAL_UART_RxCpltCallback+0x74>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	f003 030f 	and.w	r3, r3, #15
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4b19      	ldr	r3, [pc, #100]	; (8001894 <HAL_UART_RxCpltCallback+0x78>)
 8001830:	701a      	strb	r2, [r3, #0]
	Trigger.idxChannel = rxData[1] & 0x0F;
 8001832:	4b17      	ldr	r3, [pc, #92]	; (8001890 <HAL_UART_RxCpltCallback+0x74>)
 8001834:	785b      	ldrb	r3, [r3, #1]
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	b2da      	uxtb	r2, r3
 800183c:	4b15      	ldr	r3, [pc, #84]	; (8001894 <HAL_UART_RxCpltCallback+0x78>)
 800183e:	705a      	strb	r2, [r3, #1]
	uint16_t tmp = (rxData[2] << 8) + rxData[3];
 8001840:	4b13      	ldr	r3, [pc, #76]	; (8001890 <HAL_UART_RxCpltCallback+0x74>)
 8001842:	789b      	ldrb	r3, [r3, #2]
 8001844:	b29b      	uxth	r3, r3
 8001846:	021b      	lsls	r3, r3, #8
 8001848:	b29a      	uxth	r2, r3
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <HAL_UART_RxCpltCallback+0x74>)
 800184c:	78db      	ldrb	r3, [r3, #3]
 800184e:	b29b      	uxth	r3, r3
 8001850:	4413      	add	r3, r2
 8001852:	81fb      	strh	r3, [r7, #14]
	Trigger.fTrigVal = decode_q11(tmp);
 8001854:	89fb      	ldrh	r3, [r7, #14]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff feee 	bl	8001638 <decode_q11>
 800185c:	eef0 7a40 	vmov.f32	s15, s0
 8001860:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <HAL_UART_RxCpltCallback+0x78>)
 8001862:	edc3 7a01 	vstr	s15, [r3, #4]
	Trigger.smplCh = rxData[4];
 8001866:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <HAL_UART_RxCpltCallback+0x74>)
 8001868:	791a      	ldrb	r2, [r3, #4]
 800186a:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <HAL_UART_RxCpltCallback+0x78>)
 800186c:	721a      	strb	r2, [r3, #8]
	Trigger.numSmplCh = rxData[5] & 0x0F;
 800186e:	4b08      	ldr	r3, [pc, #32]	; (8001890 <HAL_UART_RxCpltCallback+0x74>)
 8001870:	795b      	ldrb	r3, [r3, #5]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	b2da      	uxtb	r2, r3
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_UART_RxCpltCallback+0x78>)
 800187a:	725a      	strb	r2, [r3, #9]
	HAL_UART_Receive_IT(&huart3, rxData, sizeof(rxData));
 800187c:	2206      	movs	r2, #6
 800187e:	4904      	ldr	r1, [pc, #16]	; (8001890 <HAL_UART_RxCpltCallback+0x74>)
 8001880:	4805      	ldr	r0, [pc, #20]	; (8001898 <HAL_UART_RxCpltCallback+0x7c>)
 8001882:	f003 fdef 	bl	8005464 <HAL_UART_Receive_IT>
}
 8001886:	bf00      	nop
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200160c4 	.word	0x200160c4
 8001894:	2000004c 	.word	0x2000004c
 8001898:	20016190 	.word	0x20016190

0800189c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <MX_SDIO_SD_Init+0x44>)
 80018b2:	4a10      	ldr	r2, [pc, #64]	; (80018f4 <MX_SDIO_SD_Init+0x48>)
 80018b4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <MX_SDIO_SD_Init+0x44>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <MX_SDIO_SD_Init+0x44>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <MX_SDIO_SD_Init+0x44>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <MX_SDIO_SD_Init+0x44>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <MX_SDIO_SD_Init+0x44>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <MX_SDIO_SD_Init+0x44>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 80018da:	4805      	ldr	r0, [pc, #20]	; (80018f0 <MX_SDIO_SD_Init+0x44>)
 80018dc:	f002 fda0 	bl	8004420 <HAL_SD_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 80018e6:	f7ff ffd9 	bl	800189c <Error_Handler>
  }

}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200160cc 	.word	0x200160cc
 80018f4:	40012c00 	.word	0x40012c00

080018f8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08c      	sub	sp, #48	; 0x30
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 031c 	add.w	r3, r7, #28
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a38      	ldr	r2, [pc, #224]	; (80019f8 <HAL_SD_MspInit+0x100>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d169      	bne.n	80019ee <HAL_SD_MspInit+0xf6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	61bb      	str	r3, [r7, #24]
 800191e:	4b37      	ldr	r3, [pc, #220]	; (80019fc <HAL_SD_MspInit+0x104>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	4a36      	ldr	r2, [pc, #216]	; (80019fc <HAL_SD_MspInit+0x104>)
 8001924:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001928:	6453      	str	r3, [r2, #68]	; 0x44
 800192a:	4b34      	ldr	r3, [pc, #208]	; (80019fc <HAL_SD_MspInit+0x104>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001932:	61bb      	str	r3, [r7, #24]
 8001934:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	4b30      	ldr	r3, [pc, #192]	; (80019fc <HAL_SD_MspInit+0x104>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a2f      	ldr	r2, [pc, #188]	; (80019fc <HAL_SD_MspInit+0x104>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <HAL_SD_MspInit+0x104>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	4b29      	ldr	r3, [pc, #164]	; (80019fc <HAL_SD_MspInit+0x104>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a28      	ldr	r2, [pc, #160]	; (80019fc <HAL_SD_MspInit+0x104>)
 800195c:	f043 0302 	orr.w	r3, r3, #2
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b26      	ldr	r3, [pc, #152]	; (80019fc <HAL_SD_MspInit+0x104>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	4b22      	ldr	r3, [pc, #136]	; (80019fc <HAL_SD_MspInit+0x104>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a21      	ldr	r2, [pc, #132]	; (80019fc <HAL_SD_MspInit+0x104>)
 8001978:	f043 0304 	orr.w	r3, r3, #4
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <HAL_SD_MspInit+0x104>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0304 	and.w	r3, r3, #4
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PA6     ------> SDIO_CMD
    PB15     ------> SDIO_CK
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800198a:	2340      	movs	r3, #64	; 0x40
 800198c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198e:	2302      	movs	r3, #2
 8001990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001996:	2303      	movs	r3, #3
 8001998:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800199a:	230c      	movs	r3, #12
 800199c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199e:	f107 031c 	add.w	r3, r7, #28
 80019a2:	4619      	mov	r1, r3
 80019a4:	4816      	ldr	r0, [pc, #88]	; (8001a00 <HAL_SD_MspInit+0x108>)
 80019a6:	f001 fb6f 	bl	8003088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80019aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b8:	2303      	movs	r3, #3
 80019ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80019bc:	230c      	movs	r3, #12
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c0:	f107 031c 	add.w	r3, r7, #28
 80019c4:	4619      	mov	r1, r3
 80019c6:	480f      	ldr	r0, [pc, #60]	; (8001a04 <HAL_SD_MspInit+0x10c>)
 80019c8:	f001 fb5e 	bl	8003088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019da:	2303      	movs	r3, #3
 80019dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80019de:	230c      	movs	r3, #12
 80019e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e2:	f107 031c 	add.w	r3, r7, #28
 80019e6:	4619      	mov	r1, r3
 80019e8:	4807      	ldr	r0, [pc, #28]	; (8001a08 <HAL_SD_MspInit+0x110>)
 80019ea:	f001 fb4d 	bl	8003088 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80019ee:	bf00      	nop
 80019f0:	3730      	adds	r7, #48	; 0x30
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40012c00 	.word	0x40012c00
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40020000 	.word	0x40020000
 8001a04:	40020400 	.word	0x40020400
 8001a08:	40020800 	.word	0x40020800

08001a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <HAL_MspInit+0x4c>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	4a0f      	ldr	r2, [pc, #60]	; (8001a58 <HAL_MspInit+0x4c>)
 8001a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a20:	6453      	str	r3, [r2, #68]	; 0x44
 8001a22:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <HAL_MspInit+0x4c>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	603b      	str	r3, [r7, #0]
 8001a32:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <HAL_MspInit+0x4c>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	4a08      	ldr	r2, [pc, #32]	; (8001a58 <HAL_MspInit+0x4c>)
 8001a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_MspInit+0x4c>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800

08001a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <HardFault_Handler+0x4>

08001a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <MemManage_Handler+0x4>

08001a76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a7a:	e7fe      	b.n	8001a7a <BusFault_Handler+0x4>

08001a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <UsageFault_Handler+0x4>

08001a82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ab0:	f000 fa2a 	bl	8001f08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <TIM4_IRQHandler+0x10>)
 8001abe:	f003 f88e 	bl	8004bde <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20016150 	.word	0x20016150

08001acc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ad0:	4802      	ldr	r0, [pc, #8]	; (8001adc <USART3_IRQHandler+0x10>)
 8001ad2:	f003 fd1d 	bl	8005510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20016190 	.word	0x20016190

08001ae0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ae4:	4802      	ldr	r0, [pc, #8]	; (8001af0 <DMA2_Stream0_IRQHandler+0x10>)
 8001ae6:	f001 f867 	bl	8002bb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	200000bc 	.word	0x200000bc

08001af4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001af8:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <SystemInit+0x28>)
 8001afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001afe:	4a07      	ldr	r2, [pc, #28]	; (8001b1c <SystemInit+0x28>)
 8001b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b08:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <SystemInit+0x28>)
 8001b0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b0e:	609a      	str	r2, [r3, #8]
#endif
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b26:	f107 0308 	add.w	r3, r7, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b34:	463b      	mov	r3, r7
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8001b3c:	4b1c      	ldr	r3, [pc, #112]	; (8001bb0 <MX_TIM4_Init+0x90>)
 8001b3e:	4a1d      	ldr	r2, [pc, #116]	; (8001bb4 <MX_TIM4_Init+0x94>)
 8001b40:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 96;
 8001b42:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <MX_TIM4_Init+0x90>)
 8001b44:	2260      	movs	r2, #96	; 0x60
 8001b46:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b48:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <MX_TIM4_Init+0x90>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8001b4e:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <MX_TIM4_Init+0x90>)
 8001b50:	2264      	movs	r2, #100	; 0x64
 8001b52:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b54:	4b16      	ldr	r3, [pc, #88]	; (8001bb0 <MX_TIM4_Init+0x90>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b5a:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <MX_TIM4_Init+0x90>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b60:	4813      	ldr	r0, [pc, #76]	; (8001bb0 <MX_TIM4_Init+0x90>)
 8001b62:	f002 ffed 	bl	8004b40 <HAL_TIM_Base_Init>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8001b6c:	f7ff fe96 	bl	800189c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b76:	f107 0308 	add.w	r3, r7, #8
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	480c      	ldr	r0, [pc, #48]	; (8001bb0 <MX_TIM4_Init+0x90>)
 8001b7e:	f003 f936 	bl	8004dee <HAL_TIM_ConfigClockSource>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8001b88:	f7ff fe88 	bl	800189c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b94:	463b      	mov	r3, r7
 8001b96:	4619      	mov	r1, r3
 8001b98:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <MX_TIM4_Init+0x90>)
 8001b9a:	f003 fb41 	bl	8005220 <HAL_TIMEx_MasterConfigSynchronization>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001ba4:	f7ff fe7a 	bl	800189c <Error_Handler>
  }

}
 8001ba8:	bf00      	nop
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20016150 	.word	0x20016150
 8001bb4:	40000800 	.word	0x40000800

08001bb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a0e      	ldr	r2, [pc, #56]	; (8001c00 <HAL_TIM_Base_MspInit+0x48>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d115      	bne.n	8001bf6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <HAL_TIM_Base_MspInit+0x4c>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	4a0c      	ldr	r2, [pc, #48]	; (8001c04 <HAL_TIM_Base_MspInit+0x4c>)
 8001bd4:	f043 0304 	orr.w	r3, r3, #4
 8001bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bda:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <HAL_TIM_Base_MspInit+0x4c>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	f003 0304 	and.w	r3, r3, #4
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2100      	movs	r1, #0
 8001bea:	201e      	movs	r0, #30
 8001bec:	f000 fe85 	bl	80028fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001bf0:	201e      	movs	r0, #30
 8001bf2:	f000 fe9e 	bl	8002932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40000800 	.word	0x40000800
 8001c04:	40023800 	.word	0x40023800

08001c08 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001c0c:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <MX_USART3_UART_Init+0x4c>)
 8001c0e:	4a12      	ldr	r2, [pc, #72]	; (8001c58 <MX_USART3_UART_Init+0x50>)
 8001c10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c12:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <MX_USART3_UART_Init+0x4c>)
 8001c14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <MX_USART3_UART_Init+0x4c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <MX_USART3_UART_Init+0x4c>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c26:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <MX_USART3_UART_Init+0x4c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c2c:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <MX_USART3_UART_Init+0x4c>)
 8001c2e:	220c      	movs	r2, #12
 8001c30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c32:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <MX_USART3_UART_Init+0x4c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <MX_USART3_UART_Init+0x4c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c3e:	4805      	ldr	r0, [pc, #20]	; (8001c54 <MX_USART3_UART_Init+0x4c>)
 8001c40:	f003 fb7e 	bl	8005340 <HAL_UART_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001c4a:	f7ff fe27 	bl	800189c <Error_Handler>
  }

}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20016190 	.word	0x20016190
 8001c58:	40004800 	.word	0x40004800

08001c5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08a      	sub	sp, #40	; 0x28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a1d      	ldr	r2, [pc, #116]	; (8001cf0 <HAL_UART_MspInit+0x94>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d134      	bne.n	8001ce8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	4b1c      	ldr	r3, [pc, #112]	; (8001cf4 <HAL_UART_MspInit+0x98>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	4a1b      	ldr	r2, [pc, #108]	; (8001cf4 <HAL_UART_MspInit+0x98>)
 8001c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8e:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <HAL_UART_MspInit+0x98>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <HAL_UART_MspInit+0x98>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	4a14      	ldr	r2, [pc, #80]	; (8001cf4 <HAL_UART_MspInit+0x98>)
 8001ca4:	f043 0308 	orr.w	r3, r3, #8
 8001ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8001caa:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <HAL_UART_MspInit+0x98>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cc8:	2307      	movs	r3, #7
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4809      	ldr	r0, [pc, #36]	; (8001cf8 <HAL_UART_MspInit+0x9c>)
 8001cd4:	f001 f9d8 	bl	8003088 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2100      	movs	r1, #0
 8001cdc:	2027      	movs	r0, #39	; 0x27
 8001cde:	f000 fe0c 	bl	80028fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ce2:	2027      	movs	r0, #39	; 0x27
 8001ce4:	f000 fe25 	bl	8002932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ce8:	bf00      	nop
 8001cea:	3728      	adds	r7, #40	; 0x28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40004800 	.word	0x40004800
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40020c00 	.word	0x40020c00

08001cfc <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001d00:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d02:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001d06:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001d08:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d0a:	2206      	movs	r2, #6
 8001d0c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001d0e:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d10:	2202      	movs	r2, #2
 8001d12:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001d14:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001d20:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001d26:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001d2c:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001d3e:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001d44:	4804      	ldr	r0, [pc, #16]	; (8001d58 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d46:	f001 fb62 	bl	800340e <HAL_PCD_Init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 8001d50:	f7ff fda4 	bl	800189c <Error_Handler>
  }

}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	200161d0 	.word	0x200161d0

08001d5c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08a      	sub	sp, #40	; 0x28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 0314 	add.w	r3, r7, #20
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d7c:	d13f      	bne.n	8001dfe <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	4b21      	ldr	r3, [pc, #132]	; (8001e08 <HAL_PCD_MspInit+0xac>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a20      	ldr	r2, [pc, #128]	; (8001e08 <HAL_PCD_MspInit+0xac>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	4b1e      	ldr	r3, [pc, #120]	; (8001e08 <HAL_PCD_MspInit+0xac>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001d9a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da0:	2302      	movs	r3, #2
 8001da2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da8:	2303      	movs	r3, #3
 8001daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001dac:	230a      	movs	r3, #10
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	4619      	mov	r1, r3
 8001db6:	4815      	ldr	r0, [pc, #84]	; (8001e0c <HAL_PCD_MspInit+0xb0>)
 8001db8:	f001 f966 	bl	8003088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001dbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dca:	f107 0314 	add.w	r3, r7, #20
 8001dce:	4619      	mov	r1, r3
 8001dd0:	480e      	ldr	r0, [pc, #56]	; (8001e0c <HAL_PCD_MspInit+0xb0>)
 8001dd2:	f001 f959 	bl	8003088 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001dd6:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <HAL_PCD_MspInit+0xac>)
 8001dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dda:	4a0b      	ldr	r2, [pc, #44]	; (8001e08 <HAL_PCD_MspInit+0xac>)
 8001ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de0:	6353      	str	r3, [r2, #52]	; 0x34
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <HAL_PCD_MspInit+0xac>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	4a07      	ldr	r2, [pc, #28]	; (8001e08 <HAL_PCD_MspInit+0xac>)
 8001dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df0:	6453      	str	r3, [r2, #68]	; 0x44
 8001df2:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <HAL_PCD_MspInit+0xac>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001dfe:	bf00      	nop
 8001e00:	3728      	adds	r7, #40	; 0x28
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40020000 	.word	0x40020000

08001e10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e48 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001e14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e16:	e003      	b.n	8001e20 <LoopCopyDataInit>

08001e18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e1e:	3104      	adds	r1, #4

08001e20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e20:	480b      	ldr	r0, [pc, #44]	; (8001e50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e22:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e28:	d3f6      	bcc.n	8001e18 <CopyDataInit>
  ldr  r2, =_sbss
 8001e2a:	4a0b      	ldr	r2, [pc, #44]	; (8001e58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e2c:	e002      	b.n	8001e34 <LoopFillZerobss>

08001e2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001e2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e30:	f842 3b04 	str.w	r3, [r2], #4

08001e34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e34:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e38:	d3f9      	bcc.n	8001e2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e3a:	f7ff fe5b 	bl	8001af4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e3e:	f004 ffbd 	bl	8006dbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e42:	f7ff fc17 	bl	8001674 <main>
  bx  lr    
 8001e46:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e48:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001e4c:	08006e5c 	.word	0x08006e5c
  ldr  r0, =_sdata
 8001e50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e54:	2000002c 	.word	0x2000002c
  ldr  r2, =_sbss
 8001e58:	2000002c 	.word	0x2000002c
  ldr  r3, = _ebss
 8001e5c:	200165dc 	.word	0x200165dc

08001e60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e60:	e7fe      	b.n	8001e60 <ADC_IRQHandler>
	...

08001e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e68:	4b0e      	ldr	r3, [pc, #56]	; (8001ea4 <HAL_Init+0x40>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ea4 <HAL_Init+0x40>)
 8001e6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <HAL_Init+0x40>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <HAL_Init+0x40>)
 8001e7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e80:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <HAL_Init+0x40>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a07      	ldr	r2, [pc, #28]	; (8001ea4 <HAL_Init+0x40>)
 8001e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e8c:	2003      	movs	r0, #3
 8001e8e:	f000 fd29 	bl	80028e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e92:	2000      	movs	r0, #0
 8001e94:	f000 f808 	bl	8001ea8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e98:	f7ff fdb8 	bl	8001a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40023c00 	.word	0x40023c00

08001ea8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eb0:	4b12      	ldr	r3, [pc, #72]	; (8001efc <HAL_InitTick+0x54>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <HAL_InitTick+0x58>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ebe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f000 fd41 	bl	800294e <HAL_SYSTICK_Config>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e00e      	b.n	8001ef4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b0f      	cmp	r3, #15
 8001eda:	d80a      	bhi.n	8001ef2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001edc:	2200      	movs	r2, #0
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee4:	f000 fd09 	bl	80028fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ee8:	4a06      	ldr	r2, [pc, #24]	; (8001f04 <HAL_InitTick+0x5c>)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	e000      	b.n	8001ef4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000020 	.word	0x20000020
 8001f00:	20000028 	.word	0x20000028
 8001f04:	20000024 	.word	0x20000024

08001f08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f0c:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_IncTick+0x20>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	461a      	mov	r2, r3
 8001f12:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_IncTick+0x24>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4413      	add	r3, r2
 8001f18:	4a04      	ldr	r2, [pc, #16]	; (8001f2c <HAL_IncTick+0x24>)
 8001f1a:	6013      	str	r3, [r2, #0]
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	20000028 	.word	0x20000028
 8001f2c:	200165d8 	.word	0x200165d8

08001f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return uwTick;
 8001f34:	4b03      	ldr	r3, [pc, #12]	; (8001f44 <HAL_GetTick+0x14>)
 8001f36:	681b      	ldr	r3, [r3, #0]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	200165d8 	.word	0x200165d8

08001f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f50:	f7ff ffee 	bl	8001f30 <HAL_GetTick>
 8001f54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f60:	d005      	beq.n	8001f6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <HAL_Delay+0x40>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	461a      	mov	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f6e:	bf00      	nop
 8001f70:	f7ff ffde 	bl	8001f30 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d8f7      	bhi.n	8001f70 <HAL_Delay+0x28>
  {
  }
}
 8001f80:	bf00      	nop
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000028 	.word	0x20000028

08001f8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f94:	2300      	movs	r3, #0
 8001f96:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e033      	b.n	800200a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d109      	bne.n	8001fbe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7fe ff6e 	bl	8000e8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	f003 0310 	and.w	r3, r3, #16
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d118      	bne.n	8001ffc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fd2:	f023 0302 	bic.w	r3, r3, #2
 8001fd6:	f043 0202 	orr.w	r2, r3, #2
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 fa32 	bl	8002448 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f023 0303 	bic.w	r3, r3, #3
 8001ff2:	f043 0201 	orr.w	r2, r3, #1
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	641a      	str	r2, [r3, #64]	; 0x40
 8001ffa:	e001      	b.n	8002000 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002008:	7bfb      	ldrb	r3, [r7, #15]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002020:	2300      	movs	r3, #0
 8002022:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800202a:	2b01      	cmp	r3, #1
 800202c:	d101      	bne.n	8002032 <HAL_ADC_Start_DMA+0x1e>
 800202e:	2302      	movs	r3, #2
 8002030:	e0b1      	b.n	8002196 <HAL_ADC_Start_DMA+0x182>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b01      	cmp	r3, #1
 8002046:	d018      	beq.n	800207a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0201 	orr.w	r2, r2, #1
 8002056:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002058:	4b51      	ldr	r3, [pc, #324]	; (80021a0 <HAL_ADC_Start_DMA+0x18c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a51      	ldr	r2, [pc, #324]	; (80021a4 <HAL_ADC_Start_DMA+0x190>)
 800205e:	fba2 2303 	umull	r2, r3, r2, r3
 8002062:	0c9a      	lsrs	r2, r3, #18
 8002064:	4613      	mov	r3, r2
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4413      	add	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800206c:	e002      	b.n	8002074 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	3b01      	subs	r3, #1
 8002072:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f9      	bne.n	800206e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b01      	cmp	r3, #1
 8002086:	f040 8085 	bne.w	8002194 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002092:	f023 0301 	bic.w	r3, r3, #1
 8002096:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d007      	beq.n	80020bc <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020c8:	d106      	bne.n	80020d8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	f023 0206 	bic.w	r2, r3, #6
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	645a      	str	r2, [r3, #68]	; 0x44
 80020d6:	e002      	b.n	80020de <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020e6:	4b30      	ldr	r3, [pc, #192]	; (80021a8 <HAL_ADC_Start_DMA+0x194>)
 80020e8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ee:	4a2f      	ldr	r2, [pc, #188]	; (80021ac <HAL_ADC_Start_DMA+0x198>)
 80020f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f6:	4a2e      	ldr	r2, [pc, #184]	; (80021b0 <HAL_ADC_Start_DMA+0x19c>)
 80020f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fe:	4a2d      	ldr	r2, [pc, #180]	; (80021b4 <HAL_ADC_Start_DMA+0x1a0>)
 8002100:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800210a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800211a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800212a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	334c      	adds	r3, #76	; 0x4c
 8002136:	4619      	mov	r1, r3
 8002138:	68ba      	ldr	r2, [r7, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f000 fcc2 	bl	8002ac4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 031f 	and.w	r3, r3, #31
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10f      	bne.n	800216c <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d11c      	bne.n	8002194 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002168:	609a      	str	r2, [r3, #8]
 800216a:	e013      	b.n	8002194 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a11      	ldr	r2, [pc, #68]	; (80021b8 <HAL_ADC_Start_DMA+0x1a4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d10e      	bne.n	8002194 <HAL_ADC_Start_DMA+0x180>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d107      	bne.n	8002194 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689a      	ldr	r2, [r3, #8]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002192:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000020 	.word	0x20000020
 80021a4:	431bde83 	.word	0x431bde83
 80021a8:	40012300 	.word	0x40012300
 80021ac:	08002641 	.word	0x08002641
 80021b0:	080026fb 	.word	0x080026fb
 80021b4:	08002717 	.word	0x08002717
 80021b8:	40012000 	.word	0x40012000

080021bc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d101      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x1c>
 80021fc:	2302      	movs	r3, #2
 80021fe:	e113      	b.n	8002428 <HAL_ADC_ConfigChannel+0x244>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2b09      	cmp	r3, #9
 800220e:	d925      	bls.n	800225c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68d9      	ldr	r1, [r3, #12]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	b29b      	uxth	r3, r3
 800221c:	461a      	mov	r2, r3
 800221e:	4613      	mov	r3, r2
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	4413      	add	r3, r2
 8002224:	3b1e      	subs	r3, #30
 8002226:	2207      	movs	r2, #7
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43da      	mvns	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	400a      	ands	r2, r1
 8002234:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68d9      	ldr	r1, [r3, #12]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	b29b      	uxth	r3, r3
 8002246:	4618      	mov	r0, r3
 8002248:	4603      	mov	r3, r0
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	4403      	add	r3, r0
 800224e:	3b1e      	subs	r3, #30
 8002250:	409a      	lsls	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	e022      	b.n	80022a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6919      	ldr	r1, [r3, #16]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	b29b      	uxth	r3, r3
 8002268:	461a      	mov	r2, r3
 800226a:	4613      	mov	r3, r2
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	4413      	add	r3, r2
 8002270:	2207      	movs	r2, #7
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43da      	mvns	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	400a      	ands	r2, r1
 800227e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6919      	ldr	r1, [r3, #16]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	b29b      	uxth	r3, r3
 8002290:	4618      	mov	r0, r3
 8002292:	4603      	mov	r3, r0
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4403      	add	r3, r0
 8002298:	409a      	lsls	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b06      	cmp	r3, #6
 80022a8:	d824      	bhi.n	80022f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	4613      	mov	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	3b05      	subs	r3, #5
 80022bc:	221f      	movs	r2, #31
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43da      	mvns	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	400a      	ands	r2, r1
 80022ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	4618      	mov	r0, r3
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	3b05      	subs	r3, #5
 80022e6:	fa00 f203 	lsl.w	r2, r0, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	635a      	str	r2, [r3, #52]	; 0x34
 80022f2:	e04c      	b.n	800238e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b0c      	cmp	r3, #12
 80022fa:	d824      	bhi.n	8002346 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	3b23      	subs	r3, #35	; 0x23
 800230e:	221f      	movs	r2, #31
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43da      	mvns	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	400a      	ands	r2, r1
 800231c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	b29b      	uxth	r3, r3
 800232a:	4618      	mov	r0, r3
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	4613      	mov	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	3b23      	subs	r3, #35	; 0x23
 8002338:	fa00 f203 	lsl.w	r2, r0, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	631a      	str	r2, [r3, #48]	; 0x30
 8002344:	e023      	b.n	800238e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	3b41      	subs	r3, #65	; 0x41
 8002358:	221f      	movs	r2, #31
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43da      	mvns	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	400a      	ands	r2, r1
 8002366:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	b29b      	uxth	r3, r3
 8002374:	4618      	mov	r0, r3
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	3b41      	subs	r3, #65	; 0x41
 8002382:	fa00 f203 	lsl.w	r2, r0, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800238e:	4b29      	ldr	r3, [pc, #164]	; (8002434 <HAL_ADC_ConfigChannel+0x250>)
 8002390:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a28      	ldr	r2, [pc, #160]	; (8002438 <HAL_ADC_ConfigChannel+0x254>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d10f      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x1d8>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b12      	cmp	r3, #18
 80023a2:	d10b      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a1d      	ldr	r2, [pc, #116]	; (8002438 <HAL_ADC_ConfigChannel+0x254>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d12b      	bne.n	800241e <HAL_ADC_ConfigChannel+0x23a>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a1c      	ldr	r2, [pc, #112]	; (800243c <HAL_ADC_ConfigChannel+0x258>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d003      	beq.n	80023d8 <HAL_ADC_ConfigChannel+0x1f4>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b11      	cmp	r3, #17
 80023d6:	d122      	bne.n	800241e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a11      	ldr	r2, [pc, #68]	; (800243c <HAL_ADC_ConfigChannel+0x258>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d111      	bne.n	800241e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023fa:	4b11      	ldr	r3, [pc, #68]	; (8002440 <HAL_ADC_ConfigChannel+0x25c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a11      	ldr	r2, [pc, #68]	; (8002444 <HAL_ADC_ConfigChannel+0x260>)
 8002400:	fba2 2303 	umull	r2, r3, r2, r3
 8002404:	0c9a      	lsrs	r2, r3, #18
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002410:	e002      	b.n	8002418 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	3b01      	subs	r3, #1
 8002416:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f9      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	40012300 	.word	0x40012300
 8002438:	40012000 	.word	0x40012000
 800243c:	10000012 	.word	0x10000012
 8002440:	20000020 	.word	0x20000020
 8002444:	431bde83 	.word	0x431bde83

08002448 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002450:	4b79      	ldr	r3, [pc, #484]	; (8002638 <ADC_Init+0x1f0>)
 8002452:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	431a      	orrs	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800247c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6859      	ldr	r1, [r3, #4]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	021a      	lsls	r2, r3, #8
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80024a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6859      	ldr	r1, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6899      	ldr	r1, [r3, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024da:	4a58      	ldr	r2, [pc, #352]	; (800263c <ADC_Init+0x1f4>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d022      	beq.n	8002526 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6899      	ldr	r1, [r3, #8]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002510:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6899      	ldr	r1, [r3, #8]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	e00f      	b.n	8002546 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002534:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002544:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0202 	bic.w	r2, r2, #2
 8002554:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6899      	ldr	r1, [r3, #8]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	7e1b      	ldrb	r3, [r3, #24]
 8002560:	005a      	lsls	r2, r3, #1
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d01b      	beq.n	80025ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002582:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002592:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6859      	ldr	r1, [r3, #4]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	3b01      	subs	r3, #1
 80025a0:	035a      	lsls	r2, r3, #13
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	e007      	b.n	80025bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80025ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	051a      	lsls	r2, r3, #20
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6899      	ldr	r1, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025fe:	025a      	lsls	r2, r3, #9
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002616:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6899      	ldr	r1, [r3, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	029a      	lsls	r2, r3, #10
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	609a      	str	r2, [r3, #8]
}
 800262c:	bf00      	nop
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	40012300 	.word	0x40012300
 800263c:	0f000001 	.word	0x0f000001

08002640 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002656:	2b00      	cmp	r3, #0
 8002658:	d13c      	bne.n	80026d4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d12b      	bne.n	80026cc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002678:	2b00      	cmp	r3, #0
 800267a:	d127      	bne.n	80026cc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002682:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002686:	2b00      	cmp	r3, #0
 8002688:	d006      	beq.n	8002698 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002694:	2b00      	cmp	r3, #0
 8002696:	d119      	bne.n	80026cc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0220 	bic.w	r2, r2, #32
 80026a6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d105      	bne.n	80026cc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	f043 0201 	orr.w	r2, r3, #1
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f7fe fc71 	bl	8000fb4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80026d2:	e00e      	b.n	80026f2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	f003 0310 	and.w	r3, r3, #16
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d003      	beq.n	80026e8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f7ff fd75 	bl	80021d0 <HAL_ADC_ErrorCallback>
}
 80026e6:	e004      	b.n	80026f2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	4798      	blx	r3
}
 80026f2:	bf00      	nop
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b084      	sub	sp, #16
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002706:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f7ff fd57 	bl	80021bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800270e:	bf00      	nop
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b084      	sub	sp, #16
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002722:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2240      	movs	r2, #64	; 0x40
 8002728:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272e:	f043 0204 	orr.w	r2, r3, #4
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f7ff fd4a 	bl	80021d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800273c:	bf00      	nop
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002754:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <__NVIC_SetPriorityGrouping+0x44>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002760:	4013      	ands	r3, r2
 8002762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800276c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002776:	4a04      	ldr	r2, [pc, #16]	; (8002788 <__NVIC_SetPriorityGrouping+0x44>)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	60d3      	str	r3, [r2, #12]
}
 800277c:	bf00      	nop
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	e000ed00 	.word	0xe000ed00

0800278c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002790:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	0a1b      	lsrs	r3, r3, #8
 8002796:	f003 0307 	and.w	r3, r3, #7
}
 800279a:	4618      	mov	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	db0b      	blt.n	80027d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	f003 021f 	and.w	r2, r3, #31
 80027c0:	4907      	ldr	r1, [pc, #28]	; (80027e0 <__NVIC_EnableIRQ+0x38>)
 80027c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	2001      	movs	r0, #1
 80027ca:	fa00 f202 	lsl.w	r2, r0, r2
 80027ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	e000e100 	.word	0xe000e100

080027e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	6039      	str	r1, [r7, #0]
 80027ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	db0a      	blt.n	800280e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	490c      	ldr	r1, [pc, #48]	; (8002830 <__NVIC_SetPriority+0x4c>)
 80027fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002802:	0112      	lsls	r2, r2, #4
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	440b      	add	r3, r1
 8002808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800280c:	e00a      	b.n	8002824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	b2da      	uxtb	r2, r3
 8002812:	4908      	ldr	r1, [pc, #32]	; (8002834 <__NVIC_SetPriority+0x50>)
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	3b04      	subs	r3, #4
 800281c:	0112      	lsls	r2, r2, #4
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	440b      	add	r3, r1
 8002822:	761a      	strb	r2, [r3, #24]
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	e000e100 	.word	0xe000e100
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002838:	b480      	push	{r7}
 800283a:	b089      	sub	sp, #36	; 0x24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f1c3 0307 	rsb	r3, r3, #7
 8002852:	2b04      	cmp	r3, #4
 8002854:	bf28      	it	cs
 8002856:	2304      	movcs	r3, #4
 8002858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	3304      	adds	r3, #4
 800285e:	2b06      	cmp	r3, #6
 8002860:	d902      	bls.n	8002868 <NVIC_EncodePriority+0x30>
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	3b03      	subs	r3, #3
 8002866:	e000      	b.n	800286a <NVIC_EncodePriority+0x32>
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800286c:	f04f 32ff 	mov.w	r2, #4294967295
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43da      	mvns	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	401a      	ands	r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002880:	f04f 31ff 	mov.w	r1, #4294967295
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	fa01 f303 	lsl.w	r3, r1, r3
 800288a:	43d9      	mvns	r1, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002890:	4313      	orrs	r3, r2
         );
}
 8002892:	4618      	mov	r0, r3
 8002894:	3724      	adds	r7, #36	; 0x24
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
	...

080028a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3b01      	subs	r3, #1
 80028ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028b0:	d301      	bcc.n	80028b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028b2:	2301      	movs	r3, #1
 80028b4:	e00f      	b.n	80028d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028b6:	4a0a      	ldr	r2, [pc, #40]	; (80028e0 <SysTick_Config+0x40>)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3b01      	subs	r3, #1
 80028bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028be:	210f      	movs	r1, #15
 80028c0:	f04f 30ff 	mov.w	r0, #4294967295
 80028c4:	f7ff ff8e 	bl	80027e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028c8:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <SysTick_Config+0x40>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ce:	4b04      	ldr	r3, [pc, #16]	; (80028e0 <SysTick_Config+0x40>)
 80028d0:	2207      	movs	r2, #7
 80028d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	e000e010 	.word	0xe000e010

080028e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f7ff ff29 	bl	8002744 <__NVIC_SetPriorityGrouping>
}
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b086      	sub	sp, #24
 80028fe:	af00      	add	r7, sp, #0
 8002900:	4603      	mov	r3, r0
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
 8002906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800290c:	f7ff ff3e 	bl	800278c <__NVIC_GetPriorityGrouping>
 8002910:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	68b9      	ldr	r1, [r7, #8]
 8002916:	6978      	ldr	r0, [r7, #20]
 8002918:	f7ff ff8e 	bl	8002838 <NVIC_EncodePriority>
 800291c:	4602      	mov	r2, r0
 800291e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002922:	4611      	mov	r1, r2
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff ff5d 	bl	80027e4 <__NVIC_SetPriority>
}
 800292a:	bf00      	nop
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b082      	sub	sp, #8
 8002936:	af00      	add	r7, sp, #0
 8002938:	4603      	mov	r3, r0
 800293a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800293c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff ff31 	bl	80027a8 <__NVIC_EnableIRQ>
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7ff ffa2 	bl	80028a0 <SysTick_Config>
 800295c:	4603      	mov	r3, r0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
	...

08002968 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002974:	f7ff fadc 	bl	8001f30 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e099      	b.n	8002ab8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0201 	bic.w	r2, r2, #1
 80029a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029a4:	e00f      	b.n	80029c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029a6:	f7ff fac3 	bl	8001f30 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b05      	cmp	r3, #5
 80029b2:	d908      	bls.n	80029c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2220      	movs	r2, #32
 80029b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2203      	movs	r2, #3
 80029be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e078      	b.n	8002ab8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1e8      	bne.n	80029a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	4b38      	ldr	r3, [pc, #224]	; (8002ac0 <HAL_DMA_Init+0x158>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	d107      	bne.n	8002a30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	f023 0307 	bic.w	r3, r3, #7
 8002a46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d117      	bne.n	8002a8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00e      	beq.n	8002a8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 fa91 	bl	8002f94 <DMA_CheckFifoParam>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2240      	movs	r2, #64	; 0x40
 8002a7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a86:	2301      	movs	r3, #1
 8002a88:	e016      	b.n	8002ab8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 fa48 	bl	8002f28 <DMA_CalcBaseAndBitshift>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa0:	223f      	movs	r2, #63	; 0x3f
 8002aa2:	409a      	lsls	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	e010803f 	.word	0xe010803f

08002ac4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
 8002ad0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ada:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d101      	bne.n	8002aea <HAL_DMA_Start_IT+0x26>
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	e040      	b.n	8002b6c <HAL_DMA_Start_IT+0xa8>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d12f      	bne.n	8002b5e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2202      	movs	r2, #2
 8002b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	68b9      	ldr	r1, [r7, #8]
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 f9da 	bl	8002ecc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1c:	223f      	movs	r2, #63	; 0x3f
 8002b1e:	409a      	lsls	r2, r3
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0216 	orr.w	r2, r2, #22
 8002b32:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d007      	beq.n	8002b4c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0208 	orr.w	r2, r2, #8
 8002b4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0201 	orr.w	r2, r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	e005      	b.n	8002b6a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b66:	2302      	movs	r3, #2
 8002b68:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d004      	beq.n	8002b92 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2280      	movs	r2, #128	; 0x80
 8002b8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e00c      	b.n	8002bac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2205      	movs	r2, #5
 8002b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0201 	bic.w	r2, r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bc4:	4b92      	ldr	r3, [pc, #584]	; (8002e10 <HAL_DMA_IRQHandler+0x258>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a92      	ldr	r2, [pc, #584]	; (8002e14 <HAL_DMA_IRQHandler+0x25c>)
 8002bca:	fba2 2303 	umull	r2, r3, r2, r3
 8002bce:	0a9b      	lsrs	r3, r3, #10
 8002bd0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be2:	2208      	movs	r2, #8
 8002be4:	409a      	lsls	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4013      	ands	r3, r2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d01a      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d013      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0204 	bic.w	r2, r2, #4
 8002c0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c10:	2208      	movs	r2, #8
 8002c12:	409a      	lsls	r2, r3
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1c:	f043 0201 	orr.w	r2, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c28:	2201      	movs	r2, #1
 8002c2a:	409a      	lsls	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d012      	beq.n	8002c5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00b      	beq.n	8002c5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c46:	2201      	movs	r2, #1
 8002c48:	409a      	lsls	r2, r3
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c52:	f043 0202 	orr.w	r2, r3, #2
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5e:	2204      	movs	r2, #4
 8002c60:	409a      	lsls	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4013      	ands	r3, r2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d012      	beq.n	8002c90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00b      	beq.n	8002c90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7c:	2204      	movs	r2, #4
 8002c7e:	409a      	lsls	r2, r3
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c88:	f043 0204 	orr.w	r2, r3, #4
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c94:	2210      	movs	r2, #16
 8002c96:	409a      	lsls	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d043      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d03c      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb2:	2210      	movs	r2, #16
 8002cb4:	409a      	lsls	r2, r3
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d018      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d108      	bne.n	8002ce8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d024      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	4798      	blx	r3
 8002ce6:	e01f      	b.n	8002d28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d01b      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	4798      	blx	r3
 8002cf8:	e016      	b.n	8002d28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d107      	bne.n	8002d18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0208 	bic.w	r2, r2, #8
 8002d16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	409a      	lsls	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 808e 	beq.w	8002e56 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0310 	and.w	r3, r3, #16
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 8086 	beq.w	8002e56 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4e:	2220      	movs	r2, #32
 8002d50:	409a      	lsls	r2, r3
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b05      	cmp	r3, #5
 8002d60:	d136      	bne.n	8002dd0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0216 	bic.w	r2, r2, #22
 8002d70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695a      	ldr	r2, [r3, #20]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d103      	bne.n	8002d92 <HAL_DMA_IRQHandler+0x1da>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d007      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0208 	bic.w	r2, r2, #8
 8002da0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da6:	223f      	movs	r2, #63	; 0x3f
 8002da8:	409a      	lsls	r2, r3
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d07d      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	4798      	blx	r3
        }
        return;
 8002dce:	e078      	b.n	8002ec2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d01c      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d108      	bne.n	8002dfe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d030      	beq.n	8002e56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	4798      	blx	r3
 8002dfc:	e02b      	b.n	8002e56 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d027      	beq.n	8002e56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	4798      	blx	r3
 8002e0e:	e022      	b.n	8002e56 <HAL_DMA_IRQHandler+0x29e>
 8002e10:	20000020 	.word	0x20000020
 8002e14:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10f      	bne.n	8002e46 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0210 	bic.w	r2, r2, #16
 8002e34:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d032      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d022      	beq.n	8002eb0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2205      	movs	r2, #5
 8002e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0201 	bic.w	r2, r2, #1
 8002e80:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	3301      	adds	r3, #1
 8002e86:	60bb      	str	r3, [r7, #8]
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d307      	bcc.n	8002e9e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1f2      	bne.n	8002e82 <HAL_DMA_IRQHandler+0x2ca>
 8002e9c:	e000      	b.n	8002ea0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002e9e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	4798      	blx	r3
 8002ec0:	e000      	b.n	8002ec4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002ec2:	bf00      	nop
    }
  }
}
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop

08002ecc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ee8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	2b40      	cmp	r3, #64	; 0x40
 8002ef8:	d108      	bne.n	8002f0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f0a:	e007      	b.n	8002f1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	60da      	str	r2, [r3, #12]
}
 8002f1c:	bf00      	nop
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	3b10      	subs	r3, #16
 8002f38:	4a14      	ldr	r2, [pc, #80]	; (8002f8c <DMA_CalcBaseAndBitshift+0x64>)
 8002f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3e:	091b      	lsrs	r3, r3, #4
 8002f40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f42:	4a13      	ldr	r2, [pc, #76]	; (8002f90 <DMA_CalcBaseAndBitshift+0x68>)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4413      	add	r3, r2
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d909      	bls.n	8002f6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f5e:	f023 0303 	bic.w	r3, r3, #3
 8002f62:	1d1a      	adds	r2, r3, #4
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	659a      	str	r2, [r3, #88]	; 0x58
 8002f68:	e007      	b.n	8002f7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f72:	f023 0303 	bic.w	r3, r3, #3
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	aaaaaaab 	.word	0xaaaaaaab
 8002f90:	08006e44 	.word	0x08006e44

08002f94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d11f      	bne.n	8002fee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	d855      	bhi.n	8003060 <DMA_CheckFifoParam+0xcc>
 8002fb4:	a201      	add	r2, pc, #4	; (adr r2, 8002fbc <DMA_CheckFifoParam+0x28>)
 8002fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fba:	bf00      	nop
 8002fbc:	08002fcd 	.word	0x08002fcd
 8002fc0:	08002fdf 	.word	0x08002fdf
 8002fc4:	08002fcd 	.word	0x08002fcd
 8002fc8:	08003061 	.word	0x08003061
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d045      	beq.n	8003064 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fdc:	e042      	b.n	8003064 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fe6:	d13f      	bne.n	8003068 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fec:	e03c      	b.n	8003068 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ff6:	d121      	bne.n	800303c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d836      	bhi.n	800306c <DMA_CheckFifoParam+0xd8>
 8002ffe:	a201      	add	r2, pc, #4	; (adr r2, 8003004 <DMA_CheckFifoParam+0x70>)
 8003000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003004:	08003015 	.word	0x08003015
 8003008:	0800301b 	.word	0x0800301b
 800300c:	08003015 	.word	0x08003015
 8003010:	0800302d 	.word	0x0800302d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	73fb      	strb	r3, [r7, #15]
      break;
 8003018:	e02f      	b.n	800307a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d024      	beq.n	8003070 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800302a:	e021      	b.n	8003070 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003030:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003034:	d11e      	bne.n	8003074 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800303a:	e01b      	b.n	8003074 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d902      	bls.n	8003048 <DMA_CheckFifoParam+0xb4>
 8003042:	2b03      	cmp	r3, #3
 8003044:	d003      	beq.n	800304e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003046:	e018      	b.n	800307a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	73fb      	strb	r3, [r7, #15]
      break;
 800304c:	e015      	b.n	800307a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003052:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00e      	beq.n	8003078 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	73fb      	strb	r3, [r7, #15]
      break;
 800305e:	e00b      	b.n	8003078 <DMA_CheckFifoParam+0xe4>
      break;
 8003060:	bf00      	nop
 8003062:	e00a      	b.n	800307a <DMA_CheckFifoParam+0xe6>
      break;
 8003064:	bf00      	nop
 8003066:	e008      	b.n	800307a <DMA_CheckFifoParam+0xe6>
      break;
 8003068:	bf00      	nop
 800306a:	e006      	b.n	800307a <DMA_CheckFifoParam+0xe6>
      break;
 800306c:	bf00      	nop
 800306e:	e004      	b.n	800307a <DMA_CheckFifoParam+0xe6>
      break;
 8003070:	bf00      	nop
 8003072:	e002      	b.n	800307a <DMA_CheckFifoParam+0xe6>
      break;   
 8003074:	bf00      	nop
 8003076:	e000      	b.n	800307a <DMA_CheckFifoParam+0xe6>
      break;
 8003078:	bf00      	nop
    }
  } 
  
  return status; 
 800307a:	7bfb      	ldrb	r3, [r7, #15]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003088:	b480      	push	{r7}
 800308a:	b089      	sub	sp, #36	; 0x24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003096:	2300      	movs	r3, #0
 8003098:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800309a:	2300      	movs	r3, #0
 800309c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800309e:	2300      	movs	r3, #0
 80030a0:	61fb      	str	r3, [r7, #28]
 80030a2:	e165      	b.n	8003370 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030a4:	2201      	movs	r2, #1
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	4013      	ands	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	429a      	cmp	r2, r3
 80030be:	f040 8154 	bne.w	800336a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d00b      	beq.n	80030e2 <HAL_GPIO_Init+0x5a>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d007      	beq.n	80030e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030d6:	2b11      	cmp	r3, #17
 80030d8:	d003      	beq.n	80030e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b12      	cmp	r3, #18
 80030e0:	d130      	bne.n	8003144 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	2203      	movs	r2, #3
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	43db      	mvns	r3, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4013      	ands	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	4313      	orrs	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003118:	2201      	movs	r2, #1
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4013      	ands	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	091b      	lsrs	r3, r3, #4
 800312e:	f003 0201 	and.w	r2, r3, #1
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	2203      	movs	r2, #3
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	43db      	mvns	r3, r3
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4013      	ands	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4313      	orrs	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2b02      	cmp	r3, #2
 800317a:	d003      	beq.n	8003184 <HAL_GPIO_Init+0xfc>
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b12      	cmp	r3, #18
 8003182:	d123      	bne.n	80031cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	08da      	lsrs	r2, r3, #3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3208      	adds	r2, #8
 800318c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003190:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	220f      	movs	r2, #15
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	43db      	mvns	r3, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4013      	ands	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	691a      	ldr	r2, [r3, #16]
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	08da      	lsrs	r2, r3, #3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	3208      	adds	r2, #8
 80031c6:	69b9      	ldr	r1, [r7, #24]
 80031c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	2203      	movs	r2, #3
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4013      	ands	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f003 0203 	and.w	r2, r3, #3
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 80ae 	beq.w	800336a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	4b5c      	ldr	r3, [pc, #368]	; (8003384 <HAL_GPIO_Init+0x2fc>)
 8003214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003216:	4a5b      	ldr	r2, [pc, #364]	; (8003384 <HAL_GPIO_Init+0x2fc>)
 8003218:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800321c:	6453      	str	r3, [r2, #68]	; 0x44
 800321e:	4b59      	ldr	r3, [pc, #356]	; (8003384 <HAL_GPIO_Init+0x2fc>)
 8003220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800322a:	4a57      	ldr	r2, [pc, #348]	; (8003388 <HAL_GPIO_Init+0x300>)
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	089b      	lsrs	r3, r3, #2
 8003230:	3302      	adds	r3, #2
 8003232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003236:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	220f      	movs	r2, #15
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43db      	mvns	r3, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4013      	ands	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a4e      	ldr	r2, [pc, #312]	; (800338c <HAL_GPIO_Init+0x304>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d025      	beq.n	80032a2 <HAL_GPIO_Init+0x21a>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a4d      	ldr	r2, [pc, #308]	; (8003390 <HAL_GPIO_Init+0x308>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d01f      	beq.n	800329e <HAL_GPIO_Init+0x216>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a4c      	ldr	r2, [pc, #304]	; (8003394 <HAL_GPIO_Init+0x30c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d019      	beq.n	800329a <HAL_GPIO_Init+0x212>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a4b      	ldr	r2, [pc, #300]	; (8003398 <HAL_GPIO_Init+0x310>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d013      	beq.n	8003296 <HAL_GPIO_Init+0x20e>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a4a      	ldr	r2, [pc, #296]	; (800339c <HAL_GPIO_Init+0x314>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d00d      	beq.n	8003292 <HAL_GPIO_Init+0x20a>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a49      	ldr	r2, [pc, #292]	; (80033a0 <HAL_GPIO_Init+0x318>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d007      	beq.n	800328e <HAL_GPIO_Init+0x206>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a48      	ldr	r2, [pc, #288]	; (80033a4 <HAL_GPIO_Init+0x31c>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d101      	bne.n	800328a <HAL_GPIO_Init+0x202>
 8003286:	2306      	movs	r3, #6
 8003288:	e00c      	b.n	80032a4 <HAL_GPIO_Init+0x21c>
 800328a:	2307      	movs	r3, #7
 800328c:	e00a      	b.n	80032a4 <HAL_GPIO_Init+0x21c>
 800328e:	2305      	movs	r3, #5
 8003290:	e008      	b.n	80032a4 <HAL_GPIO_Init+0x21c>
 8003292:	2304      	movs	r3, #4
 8003294:	e006      	b.n	80032a4 <HAL_GPIO_Init+0x21c>
 8003296:	2303      	movs	r3, #3
 8003298:	e004      	b.n	80032a4 <HAL_GPIO_Init+0x21c>
 800329a:	2302      	movs	r3, #2
 800329c:	e002      	b.n	80032a4 <HAL_GPIO_Init+0x21c>
 800329e:	2301      	movs	r3, #1
 80032a0:	e000      	b.n	80032a4 <HAL_GPIO_Init+0x21c>
 80032a2:	2300      	movs	r3, #0
 80032a4:	69fa      	ldr	r2, [r7, #28]
 80032a6:	f002 0203 	and.w	r2, r2, #3
 80032aa:	0092      	lsls	r2, r2, #2
 80032ac:	4093      	lsls	r3, r2
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032b4:	4934      	ldr	r1, [pc, #208]	; (8003388 <HAL_GPIO_Init+0x300>)
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	089b      	lsrs	r3, r3, #2
 80032ba:	3302      	adds	r3, #2
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032c2:	4b39      	ldr	r3, [pc, #228]	; (80033a8 <HAL_GPIO_Init+0x320>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	43db      	mvns	r3, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4013      	ands	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032e6:	4a30      	ldr	r2, [pc, #192]	; (80033a8 <HAL_GPIO_Init+0x320>)
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80032ec:	4b2e      	ldr	r3, [pc, #184]	; (80033a8 <HAL_GPIO_Init+0x320>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	4313      	orrs	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003310:	4a25      	ldr	r2, [pc, #148]	; (80033a8 <HAL_GPIO_Init+0x320>)
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003316:	4b24      	ldr	r3, [pc, #144]	; (80033a8 <HAL_GPIO_Init+0x320>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	43db      	mvns	r3, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4013      	ands	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4313      	orrs	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800333a:	4a1b      	ldr	r2, [pc, #108]	; (80033a8 <HAL_GPIO_Init+0x320>)
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003340:	4b19      	ldr	r3, [pc, #100]	; (80033a8 <HAL_GPIO_Init+0x320>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	43db      	mvns	r3, r3
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	4013      	ands	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	4313      	orrs	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003364:	4a10      	ldr	r2, [pc, #64]	; (80033a8 <HAL_GPIO_Init+0x320>)
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	3301      	adds	r3, #1
 800336e:	61fb      	str	r3, [r7, #28]
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	2b0f      	cmp	r3, #15
 8003374:	f67f ae96 	bls.w	80030a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003378:	bf00      	nop
 800337a:	3724      	adds	r7, #36	; 0x24
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	40023800 	.word	0x40023800
 8003388:	40013800 	.word	0x40013800
 800338c:	40020000 	.word	0x40020000
 8003390:	40020400 	.word	0x40020400
 8003394:	40020800 	.word	0x40020800
 8003398:	40020c00 	.word	0x40020c00
 800339c:	40021000 	.word	0x40021000
 80033a0:	40021400 	.word	0x40021400
 80033a4:	40021800 	.word	0x40021800
 80033a8:	40013c00 	.word	0x40013c00

080033ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691a      	ldr	r2, [r3, #16]
 80033bc:	887b      	ldrh	r3, [r7, #2]
 80033be:	4013      	ands	r3, r2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d002      	beq.n	80033ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033c4:	2301      	movs	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]
 80033c8:	e001      	b.n	80033ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033ca:	2300      	movs	r3, #0
 80033cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	807b      	strh	r3, [r7, #2]
 80033e8:	4613      	mov	r3, r2
 80033ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033ec:	787b      	ldrb	r3, [r7, #1]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033f2:	887a      	ldrh	r2, [r7, #2]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033f8:	e003      	b.n	8003402 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033fa:	887b      	ldrh	r3, [r7, #2]
 80033fc:	041a      	lsls	r2, r3, #16
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	619a      	str	r2, [r3, #24]
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800340e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003410:	b08f      	sub	sp, #60	; 0x3c
 8003412:	af0a      	add	r7, sp, #40	; 0x28
 8003414:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e116      	b.n	800364e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d106      	bne.n	8003440 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7fe fc8e 	bl	8001d5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2203      	movs	r2, #3
 8003444:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003450:	2b00      	cmp	r3, #0
 8003452:	d102      	bne.n	800345a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f003 fa65 	bl	800692e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	603b      	str	r3, [r7, #0]
 800346a:	687e      	ldr	r6, [r7, #4]
 800346c:	466d      	mov	r5, sp
 800346e:	f106 0410 	add.w	r4, r6, #16
 8003472:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003474:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003476:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003478:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800347a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800347e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003482:	1d33      	adds	r3, r6, #4
 8003484:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003486:	6838      	ldr	r0, [r7, #0]
 8003488:	f003 f9f0 	bl	800686c <USB_CoreInit>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d005      	beq.n	800349e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2202      	movs	r2, #2
 8003496:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e0d7      	b.n	800364e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2100      	movs	r1, #0
 80034a4:	4618      	mov	r0, r3
 80034a6:	f003 fa53 	bl	8006950 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034aa:	2300      	movs	r3, #0
 80034ac:	73fb      	strb	r3, [r7, #15]
 80034ae:	e04a      	b.n	8003546 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034b0:	7bfa      	ldrb	r2, [r7, #15]
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	1a9b      	subs	r3, r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	333d      	adds	r3, #61	; 0x3d
 80034c0:	2201      	movs	r2, #1
 80034c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034c4:	7bfa      	ldrb	r2, [r7, #15]
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	4613      	mov	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	1a9b      	subs	r3, r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	333c      	adds	r3, #60	; 0x3c
 80034d4:	7bfa      	ldrb	r2, [r7, #15]
 80034d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034d8:	7bfa      	ldrb	r2, [r7, #15]
 80034da:	7bfb      	ldrb	r3, [r7, #15]
 80034dc:	b298      	uxth	r0, r3
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	4613      	mov	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	1a9b      	subs	r3, r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	3342      	adds	r3, #66	; 0x42
 80034ec:	4602      	mov	r2, r0
 80034ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034f0:	7bfa      	ldrb	r2, [r7, #15]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	1a9b      	subs	r3, r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	333f      	adds	r3, #63	; 0x3f
 8003500:	2200      	movs	r2, #0
 8003502:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003504:	7bfa      	ldrb	r2, [r7, #15]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	1a9b      	subs	r3, r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	3344      	adds	r3, #68	; 0x44
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003518:	7bfa      	ldrb	r2, [r7, #15]
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	4613      	mov	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	1a9b      	subs	r3, r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	3348      	adds	r3, #72	; 0x48
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800352c:	7bfa      	ldrb	r2, [r7, #15]
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	1a9b      	subs	r3, r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	3350      	adds	r3, #80	; 0x50
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003540:	7bfb      	ldrb	r3, [r7, #15]
 8003542:	3301      	adds	r3, #1
 8003544:	73fb      	strb	r3, [r7, #15]
 8003546:	7bfa      	ldrb	r2, [r7, #15]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	429a      	cmp	r2, r3
 800354e:	d3af      	bcc.n	80034b0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003550:	2300      	movs	r3, #0
 8003552:	73fb      	strb	r3, [r7, #15]
 8003554:	e044      	b.n	80035e0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003556:	7bfa      	ldrb	r2, [r7, #15]
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	4613      	mov	r3, r2
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	1a9b      	subs	r3, r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	440b      	add	r3, r1
 8003564:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003568:	2200      	movs	r2, #0
 800356a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800356c:	7bfa      	ldrb	r2, [r7, #15]
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	4613      	mov	r3, r2
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	1a9b      	subs	r3, r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800357e:	7bfa      	ldrb	r2, [r7, #15]
 8003580:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003582:	7bfa      	ldrb	r2, [r7, #15]
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	4613      	mov	r3, r2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	1a9b      	subs	r3, r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	440b      	add	r3, r1
 8003590:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003594:	2200      	movs	r2, #0
 8003596:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003598:	7bfa      	ldrb	r2, [r7, #15]
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	4613      	mov	r3, r2
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	1a9b      	subs	r3, r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	440b      	add	r3, r1
 80035a6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035ae:	7bfa      	ldrb	r2, [r7, #15]
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	4613      	mov	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	1a9b      	subs	r3, r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	440b      	add	r3, r1
 80035bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035c4:	7bfa      	ldrb	r2, [r7, #15]
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	4613      	mov	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	1a9b      	subs	r3, r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035da:	7bfb      	ldrb	r3, [r7, #15]
 80035dc:	3301      	adds	r3, #1
 80035de:	73fb      	strb	r3, [r7, #15]
 80035e0:	7bfa      	ldrb	r2, [r7, #15]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d3b5      	bcc.n	8003556 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	603b      	str	r3, [r7, #0]
 80035f0:	687e      	ldr	r6, [r7, #4]
 80035f2:	466d      	mov	r5, sp
 80035f4:	f106 0410 	add.w	r4, r6, #16
 80035f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003600:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003604:	e885 0003 	stmia.w	r5, {r0, r1}
 8003608:	1d33      	adds	r3, r6, #4
 800360a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800360c:	6838      	ldr	r0, [r7, #0]
 800360e:	f003 f9c9 	bl	80069a4 <USB_DevInit>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d005      	beq.n	8003624 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e014      	b.n	800364e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	2b01      	cmp	r3, #1
 800363a:	d102      	bne.n	8003642 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 f80a 	bl	8003656 <HAL_PCDEx_ActivateLPM>
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f003 fb6b 	bl	8006d22 <USB_DevDisconnect>

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003656 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003656:	b480      	push	{r7}
 8003658:	b085      	sub	sp, #20
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003688:	f043 0303 	orr.w	r3, r3, #3
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
	...

080036a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e0cc      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036b4:	4b68      	ldr	r3, [pc, #416]	; (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 030f 	and.w	r3, r3, #15
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d90c      	bls.n	80036dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c2:	4b65      	ldr	r3, [pc, #404]	; (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ca:	4b63      	ldr	r3, [pc, #396]	; (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d001      	beq.n	80036dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e0b8      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d020      	beq.n	800372a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036f4:	4b59      	ldr	r3, [pc, #356]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	4a58      	ldr	r2, [pc, #352]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0308 	and.w	r3, r3, #8
 8003708:	2b00      	cmp	r3, #0
 800370a:	d005      	beq.n	8003718 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800370c:	4b53      	ldr	r3, [pc, #332]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	4a52      	ldr	r2, [pc, #328]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003716:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003718:	4b50      	ldr	r3, [pc, #320]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	494d      	ldr	r1, [pc, #308]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	4313      	orrs	r3, r2
 8003728:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d044      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d107      	bne.n	800374e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373e:	4b47      	ldr	r3, [pc, #284]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d119      	bne.n	800377e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e07f      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b02      	cmp	r3, #2
 8003754:	d003      	beq.n	800375e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800375a:	2b03      	cmp	r3, #3
 800375c:	d107      	bne.n	800376e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800375e:	4b3f      	ldr	r3, [pc, #252]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d109      	bne.n	800377e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e06f      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800376e:	4b3b      	ldr	r3, [pc, #236]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e067      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800377e:	4b37      	ldr	r3, [pc, #220]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f023 0203 	bic.w	r2, r3, #3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	4934      	ldr	r1, [pc, #208]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 800378c:	4313      	orrs	r3, r2
 800378e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003790:	f7fe fbce 	bl	8001f30 <HAL_GetTick>
 8003794:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003796:	e00a      	b.n	80037ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003798:	f7fe fbca 	bl	8001f30 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e04f      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ae:	4b2b      	ldr	r3, [pc, #172]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 020c 	and.w	r2, r3, #12
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	429a      	cmp	r2, r3
 80037be:	d1eb      	bne.n	8003798 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037c0:	4b25      	ldr	r3, [pc, #148]	; (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 030f 	and.w	r3, r3, #15
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d20c      	bcs.n	80037e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ce:	4b22      	ldr	r3, [pc, #136]	; (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d6:	4b20      	ldr	r3, [pc, #128]	; (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d001      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e032      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f4:	4b19      	ldr	r3, [pc, #100]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	4916      	ldr	r1, [pc, #88]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	4313      	orrs	r3, r2
 8003804:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d009      	beq.n	8003826 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003812:	4b12      	ldr	r3, [pc, #72]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	490e      	ldr	r1, [pc, #56]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	4313      	orrs	r3, r2
 8003824:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003826:	f000 f821 	bl	800386c <HAL_RCC_GetSysClockFreq>
 800382a:	4601      	mov	r1, r0
 800382c:	4b0b      	ldr	r3, [pc, #44]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	091b      	lsrs	r3, r3, #4
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	4a0a      	ldr	r2, [pc, #40]	; (8003860 <HAL_RCC_ClockConfig+0x1c0>)
 8003838:	5cd3      	ldrb	r3, [r2, r3]
 800383a:	fa21 f303 	lsr.w	r3, r1, r3
 800383e:	4a09      	ldr	r2, [pc, #36]	; (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 8003840:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003842:	4b09      	ldr	r3, [pc, #36]	; (8003868 <HAL_RCC_ClockConfig+0x1c8>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f7fe fb2e 	bl	8001ea8 <HAL_InitTick>

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40023c00 	.word	0x40023c00
 800385c:	40023800 	.word	0x40023800
 8003860:	08006e2c 	.word	0x08006e2c
 8003864:	20000020 	.word	0x20000020
 8003868:	20000024 	.word	0x20000024

0800386c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800386c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003872:	2300      	movs	r3, #0
 8003874:	607b      	str	r3, [r7, #4]
 8003876:	2300      	movs	r3, #0
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	2300      	movs	r3, #0
 800387c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800387e:	2300      	movs	r3, #0
 8003880:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003882:	4b63      	ldr	r3, [pc, #396]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 030c 	and.w	r3, r3, #12
 800388a:	2b04      	cmp	r3, #4
 800388c:	d007      	beq.n	800389e <HAL_RCC_GetSysClockFreq+0x32>
 800388e:	2b08      	cmp	r3, #8
 8003890:	d008      	beq.n	80038a4 <HAL_RCC_GetSysClockFreq+0x38>
 8003892:	2b00      	cmp	r3, #0
 8003894:	f040 80b4 	bne.w	8003a00 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003898:	4b5e      	ldr	r3, [pc, #376]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800389a:	60bb      	str	r3, [r7, #8]
       break;
 800389c:	e0b3      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800389e:	4b5e      	ldr	r3, [pc, #376]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80038a0:	60bb      	str	r3, [r7, #8]
      break;
 80038a2:	e0b0      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038a4:	4b5a      	ldr	r3, [pc, #360]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038ac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038ae:	4b58      	ldr	r3, [pc, #352]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d04a      	beq.n	8003950 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ba:	4b55      	ldr	r3, [pc, #340]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	099b      	lsrs	r3, r3, #6
 80038c0:	f04f 0400 	mov.w	r4, #0
 80038c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	ea03 0501 	and.w	r5, r3, r1
 80038d0:	ea04 0602 	and.w	r6, r4, r2
 80038d4:	4629      	mov	r1, r5
 80038d6:	4632      	mov	r2, r6
 80038d8:	f04f 0300 	mov.w	r3, #0
 80038dc:	f04f 0400 	mov.w	r4, #0
 80038e0:	0154      	lsls	r4, r2, #5
 80038e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80038e6:	014b      	lsls	r3, r1, #5
 80038e8:	4619      	mov	r1, r3
 80038ea:	4622      	mov	r2, r4
 80038ec:	1b49      	subs	r1, r1, r5
 80038ee:	eb62 0206 	sbc.w	r2, r2, r6
 80038f2:	f04f 0300 	mov.w	r3, #0
 80038f6:	f04f 0400 	mov.w	r4, #0
 80038fa:	0194      	lsls	r4, r2, #6
 80038fc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003900:	018b      	lsls	r3, r1, #6
 8003902:	1a5b      	subs	r3, r3, r1
 8003904:	eb64 0402 	sbc.w	r4, r4, r2
 8003908:	f04f 0100 	mov.w	r1, #0
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	00e2      	lsls	r2, r4, #3
 8003912:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003916:	00d9      	lsls	r1, r3, #3
 8003918:	460b      	mov	r3, r1
 800391a:	4614      	mov	r4, r2
 800391c:	195b      	adds	r3, r3, r5
 800391e:	eb44 0406 	adc.w	r4, r4, r6
 8003922:	f04f 0100 	mov.w	r1, #0
 8003926:	f04f 0200 	mov.w	r2, #0
 800392a:	0262      	lsls	r2, r4, #9
 800392c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003930:	0259      	lsls	r1, r3, #9
 8003932:	460b      	mov	r3, r1
 8003934:	4614      	mov	r4, r2
 8003936:	4618      	mov	r0, r3
 8003938:	4621      	mov	r1, r4
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f04f 0400 	mov.w	r4, #0
 8003940:	461a      	mov	r2, r3
 8003942:	4623      	mov	r3, r4
 8003944:	f7fd f8a6 	bl	8000a94 <__aeabi_uldivmod>
 8003948:	4603      	mov	r3, r0
 800394a:	460c      	mov	r4, r1
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	e049      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003950:	4b2f      	ldr	r3, [pc, #188]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	099b      	lsrs	r3, r3, #6
 8003956:	f04f 0400 	mov.w	r4, #0
 800395a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	ea03 0501 	and.w	r5, r3, r1
 8003966:	ea04 0602 	and.w	r6, r4, r2
 800396a:	4629      	mov	r1, r5
 800396c:	4632      	mov	r2, r6
 800396e:	f04f 0300 	mov.w	r3, #0
 8003972:	f04f 0400 	mov.w	r4, #0
 8003976:	0154      	lsls	r4, r2, #5
 8003978:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800397c:	014b      	lsls	r3, r1, #5
 800397e:	4619      	mov	r1, r3
 8003980:	4622      	mov	r2, r4
 8003982:	1b49      	subs	r1, r1, r5
 8003984:	eb62 0206 	sbc.w	r2, r2, r6
 8003988:	f04f 0300 	mov.w	r3, #0
 800398c:	f04f 0400 	mov.w	r4, #0
 8003990:	0194      	lsls	r4, r2, #6
 8003992:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003996:	018b      	lsls	r3, r1, #6
 8003998:	1a5b      	subs	r3, r3, r1
 800399a:	eb64 0402 	sbc.w	r4, r4, r2
 800399e:	f04f 0100 	mov.w	r1, #0
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	00e2      	lsls	r2, r4, #3
 80039a8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80039ac:	00d9      	lsls	r1, r3, #3
 80039ae:	460b      	mov	r3, r1
 80039b0:	4614      	mov	r4, r2
 80039b2:	195b      	adds	r3, r3, r5
 80039b4:	eb44 0406 	adc.w	r4, r4, r6
 80039b8:	f04f 0100 	mov.w	r1, #0
 80039bc:	f04f 0200 	mov.w	r2, #0
 80039c0:	02a2      	lsls	r2, r4, #10
 80039c2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80039c6:	0299      	lsls	r1, r3, #10
 80039c8:	460b      	mov	r3, r1
 80039ca:	4614      	mov	r4, r2
 80039cc:	4618      	mov	r0, r3
 80039ce:	4621      	mov	r1, r4
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f04f 0400 	mov.w	r4, #0
 80039d6:	461a      	mov	r2, r3
 80039d8:	4623      	mov	r3, r4
 80039da:	f7fd f85b 	bl	8000a94 <__aeabi_uldivmod>
 80039de:	4603      	mov	r3, r0
 80039e0:	460c      	mov	r4, r1
 80039e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039e4:	4b0a      	ldr	r3, [pc, #40]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	0c1b      	lsrs	r3, r3, #16
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	3301      	adds	r3, #1
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fc:	60bb      	str	r3, [r7, #8]
      break;
 80039fe:	e002      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a00:	4b04      	ldr	r3, [pc, #16]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003a02:	60bb      	str	r3, [r7, #8]
      break;
 8003a04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a06:	68bb      	ldr	r3, [r7, #8]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a10:	40023800 	.word	0x40023800
 8003a14:	00f42400 	.word	0x00f42400
 8003a18:	007a1200 	.word	0x007a1200

08003a1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a20:	4b03      	ldr	r3, [pc, #12]	; (8003a30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a22:	681b      	ldr	r3, [r3, #0]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	20000020 	.word	0x20000020

08003a34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a38:	f7ff fff0 	bl	8003a1c <HAL_RCC_GetHCLKFreq>
 8003a3c:	4601      	mov	r1, r0
 8003a3e:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	0a9b      	lsrs	r3, r3, #10
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	4a03      	ldr	r2, [pc, #12]	; (8003a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a4a:	5cd3      	ldrb	r3, [r2, r3]
 8003a4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40023800 	.word	0x40023800
 8003a58:	08006e3c 	.word	0x08006e3c

08003a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a60:	f7ff ffdc 	bl	8003a1c <HAL_RCC_GetHCLKFreq>
 8003a64:	4601      	mov	r1, r0
 8003a66:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	0b5b      	lsrs	r3, r3, #13
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	4a03      	ldr	r2, [pc, #12]	; (8003a80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a72:	5cd3      	ldrb	r3, [r2, r3]
 8003a74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	08006e3c 	.word	0x08006e3c

08003a84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b088      	sub	sp, #32
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d010      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003aa8:	4b7a      	ldr	r3, [pc, #488]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aae:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	4977      	ldr	r1, [pc, #476]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d010      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003ad6:	4b6f      	ldr	r3, [pc, #444]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003adc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	496b      	ldr	r1, [pc, #428]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8003af4:	2301      	movs	r3, #1
 8003af6:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d022      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8003b04:	4b63      	ldr	r3, [pc, #396]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003b06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b12:	4960      	ldr	r1, [pc, #384]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8003b22:	2301      	movs	r3, #1
 8003b24:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b2e:	d10c      	bne.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8003b30:	4b58      	ldr	r3, [pc, #352]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b36:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	021b      	lsls	r3, r3, #8
 8003b42:	4954      	ldr	r1, [pc, #336]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d022      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8003b56:	4b4f      	ldr	r3, [pc, #316]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b64:	494b      	ldr	r1, [pc, #300]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003b74:	2301      	movs	r3, #1
 8003b76:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b80:	d10c      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8003b82:	4b44      	ldr	r3, [pc, #272]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b88:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	3b01      	subs	r3, #1
 8003b92:	021b      	lsls	r3, r3, #8
 8003b94:	493f      	ldr	r1, [pc, #252]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0308 	and.w	r3, r3, #8
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 808a 	beq.w	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003baa:	2300      	movs	r3, #0
 8003bac:	60fb      	str	r3, [r7, #12]
 8003bae:	4b39      	ldr	r3, [pc, #228]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	4a38      	ldr	r2, [pc, #224]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8003bba:	4b36      	ldr	r3, [pc, #216]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003bc6:	4b34      	ldr	r3, [pc, #208]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a33      	ldr	r2, [pc, #204]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8003bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003bd2:	f7fe f9ad 	bl	8001f30 <HAL_GetTick>
 8003bd6:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003bd8:	e008      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003bda:	f7fe f9a9 	bl	8001f30 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d901      	bls.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e1d1      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003bec:	4b2a      	ldr	r3, [pc, #168]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d0f0      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bf8:	4b26      	ldr	r3, [pc, #152]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c00:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d02f      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d028      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c16:	4b1f      	ldr	r3, [pc, #124]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c1e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c20:	4b1e      	ldr	r3, [pc, #120]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8003c22:	2201      	movs	r2, #1
 8003c24:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c26:	4b1d      	ldr	r3, [pc, #116]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003c2c:	4a19      	ldr	r2, [pc, #100]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c32:	4b18      	ldr	r3, [pc, #96]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d114      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003c3e:	f7fe f977 	bl	8001f30 <HAL_GetTick>
 8003c42:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c44:	e00a      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c46:	f7fe f973 	bl	8001f30 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e199      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c5c:	4b0d      	ldr	r3, [pc, #52]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0ee      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c74:	d114      	bne.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8003c76:	4b07      	ldr	r3, [pc, #28]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c8a:	4902      	ldr	r1, [pc, #8]	; (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	608b      	str	r3, [r1, #8]
 8003c90:	e00c      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x228>
 8003c92:	bf00      	nop
 8003c94:	40023800 	.word	0x40023800
 8003c98:	40007000 	.word	0x40007000
 8003c9c:	42470e40 	.word	0x42470e40
 8003ca0:	4b89      	ldr	r3, [pc, #548]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	4a88      	ldr	r2, [pc, #544]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003ca6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003caa:	6093      	str	r3, [r2, #8]
 8003cac:	4b86      	ldr	r3, [pc, #536]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003cae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb8:	4983      	ldr	r1, [pc, #524]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d004      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8003cd0:	4b7e      	ldr	r3, [pc, #504]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8003cd2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0310 	and.w	r3, r3, #16
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00a      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003ce0:	4b79      	ldr	r3, [pc, #484]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ce6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cee:	4976      	ldr	r1, [pc, #472]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0320 	and.w	r3, r3, #32
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d011      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d02:	4b71      	ldr	r3, [pc, #452]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d08:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	496d      	ldr	r1, [pc, #436]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d20:	d101      	bne.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8003d22:	2301      	movs	r3, #1
 8003d24:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00a      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003d32:	4b65      	ldr	r3, [pc, #404]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003d34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d38:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d40:	4961      	ldr	r1, [pc, #388]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d004      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2b80      	cmp	r3, #128	; 0x80
 8003d54:	f040 80c6 	bne.w	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d58:	4b5d      	ldr	r3, [pc, #372]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d5e:	f7fe f8e7 	bl	8001f30 <HAL_GetTick>
 8003d62:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d64:	e008      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d66:	f7fe f8e3 	bl	8001f30 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d901      	bls.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e10b      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d78:	4b53      	ldr	r3, [pc, #332]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1f0      	bne.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8003d84:	4a53      	ldr	r2, [pc, #332]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d8a:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d003      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d023      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d019      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d004      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dc8:	d00e      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d019      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d115      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x386>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003de6:	d110      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	019b      	lsls	r3, r3, #6
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	061b      	lsls	r3, r3, #24
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	071b      	lsls	r3, r3, #28
 8003e02:	4931      	ldr	r1, [pc, #196]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d009      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d026      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d122      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e32:	4b25      	ldr	r3, [pc, #148]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e38:	0e1b      	lsrs	r3, r3, #24
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	019b      	lsls	r3, r3, #6
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	061b      	lsls	r3, r3, #24
 8003e50:	431a      	orrs	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	071b      	lsls	r3, r3, #28
 8003e58:	491b      	ldr	r1, [pc, #108]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8003e60:	4b19      	ldr	r3, [pc, #100]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e66:	f023 021f 	bic.w	r2, r3, #31
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	4915      	ldr	r1, [pc, #84]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d010      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	019b      	lsls	r3, r3, #6
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	061b      	lsls	r3, r3, #24
 8003e96:	431a      	orrs	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	071b      	lsls	r3, r3, #28
 8003e9e:	490a      	ldr	r1, [pc, #40]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ea6:	4b0a      	ldr	r3, [pc, #40]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003eac:	f7fe f840 	bl	8001f30 <HAL_GetTick>
 8003eb0:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003eb2:	e011      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003eb4:	f7fe f83c 	bl	8001f30 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d90a      	bls.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e064      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003ec6:	bf00      	nop
 8003ec8:	40023800 	.word	0x40023800
 8003ecc:	424711e0 	.word	0x424711e0
 8003ed0:	42470068 	.word	0x42470068
 8003ed4:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ed8:	4b2f      	ldr	r3, [pc, #188]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d0e7      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00a      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ef0:	4b29      	ldr	r3, [pc, #164]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ef6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efe:	4926      	ldr	r1, [pc, #152]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00a      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003f12:	4b21      	ldr	r3, [pc, #132]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f18:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f20:	491d      	ldr	r1, [pc, #116]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00a      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003f34:	4b18      	ldr	r3, [pc, #96]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003f36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f3a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f42:	4915      	ldr	r1, [pc, #84]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00a      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8003f56:	4b10      	ldr	r3, [pc, #64]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f5c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f64:	490c      	ldr	r1, [pc, #48]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00a      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f78:	4b07      	ldr	r3, [pc, #28]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f7e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f86:	4904      	ldr	r1, [pc, #16]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3720      	adds	r7, #32
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40023800 	.word	0x40023800

08003f9c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d075      	beq.n	80040a0 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003fb4:	4ba2      	ldr	r3, [pc, #648]	; (8004240 <HAL_RCC_OscConfig+0x2a4>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 030c 	and.w	r3, r3, #12
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d00c      	beq.n	8003fda <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fc0:	4b9f      	ldr	r3, [pc, #636]	; (8004240 <HAL_RCC_OscConfig+0x2a4>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	d112      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fcc:	4b9c      	ldr	r3, [pc, #624]	; (8004240 <HAL_RCC_OscConfig+0x2a4>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fd8:	d10b      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fda:	4b99      	ldr	r3, [pc, #612]	; (8004240 <HAL_RCC_OscConfig+0x2a4>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d05b      	beq.n	800409e <HAL_RCC_OscConfig+0x102>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d157      	bne.n	800409e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e20b      	b.n	800440a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ffa:	d106      	bne.n	800400a <HAL_RCC_OscConfig+0x6e>
 8003ffc:	4b90      	ldr	r3, [pc, #576]	; (8004240 <HAL_RCC_OscConfig+0x2a4>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a8f      	ldr	r2, [pc, #572]	; (8004240 <HAL_RCC_OscConfig+0x2a4>)
 8004002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004006:	6013      	str	r3, [r2, #0]
 8004008:	e01d      	b.n	8004046 <HAL_RCC_OscConfig+0xaa>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004012:	d10c      	bne.n	800402e <HAL_RCC_OscConfig+0x92>
 8004014:	4b8a      	ldr	r3, [pc, #552]	; (8004240 <HAL_RCC_OscConfig+0x2a4>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a89      	ldr	r2, [pc, #548]	; (8004240 <HAL_RCC_OscConfig+0x2a4>)
 800401a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	4b87      	ldr	r3, [pc, #540]	; (8004240 <HAL_RCC_OscConfig+0x2a4>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a86      	ldr	r2, [pc, #536]	; (8004240 <HAL_RCC_OscConfig+0x2a4>)
 8004026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800402a:	6013      	str	r3, [r2, #0]
 800402c:	e00b      	b.n	8004046 <HAL_RCC_OscConfig+0xaa>
 800402e:	4b84      	ldr	r3, [pc, #528]	; (8004240 <HAL_RCC_OscConfig+0x2a4>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a83      	ldr	r2, [pc, #524]	; (8004240 <HAL_RCC_OscConfig+0x2a4>)
 8004034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	4b81      	ldr	r3, [pc, #516]	; (8004240 <HAL_RCC_OscConfig+0x2a4>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a80      	ldr	r2, [pc, #512]	; (8004240 <HAL_RCC_OscConfig+0x2a4>)
 8004040:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004044:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d013      	beq.n	8004076 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404e:	f7fd ff6f 	bl	8001f30 <HAL_GetTick>
 8004052:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004054:	e008      	b.n	8004068 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004056:	f7fd ff6b 	bl	8001f30 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b64      	cmp	r3, #100	; 0x64
 8004062:	d901      	bls.n	8004068 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e1d0      	b.n	800440a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004068:	4b75      	ldr	r3, [pc, #468]	; (8004240 <HAL_RCC_OscConfig+0x2a4>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0f0      	beq.n	8004056 <HAL_RCC_OscConfig+0xba>
 8004074:	e014      	b.n	80040a0 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004076:	f7fd ff5b 	bl	8001f30 <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800407c:	e008      	b.n	8004090 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800407e:	f7fd ff57 	bl	8001f30 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b64      	cmp	r3, #100	; 0x64
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e1bc      	b.n	800440a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004090:	4b6b      	ldr	r3, [pc, #428]	; (8004240 <HAL_RCC_OscConfig+0x2a4>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1f0      	bne.n	800407e <HAL_RCC_OscConfig+0xe2>
 800409c:	e000      	b.n	80040a0 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800409e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d063      	beq.n	8004174 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80040ac:	4b64      	ldr	r3, [pc, #400]	; (8004240 <HAL_RCC_OscConfig+0x2a4>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 030c 	and.w	r3, r3, #12
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00b      	beq.n	80040d0 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040b8:	4b61      	ldr	r3, [pc, #388]	; (8004240 <HAL_RCC_OscConfig+0x2a4>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d11c      	bne.n	80040fe <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040c4:	4b5e      	ldr	r3, [pc, #376]	; (8004240 <HAL_RCC_OscConfig+0x2a4>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d116      	bne.n	80040fe <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040d0:	4b5b      	ldr	r3, [pc, #364]	; (8004240 <HAL_RCC_OscConfig+0x2a4>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d005      	beq.n	80040e8 <HAL_RCC_OscConfig+0x14c>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d001      	beq.n	80040e8 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e190      	b.n	800440a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e8:	4b55      	ldr	r3, [pc, #340]	; (8004240 <HAL_RCC_OscConfig+0x2a4>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	4952      	ldr	r1, [pc, #328]	; (8004240 <HAL_RCC_OscConfig+0x2a4>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040fc:	e03a      	b.n	8004174 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d020      	beq.n	8004148 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004106:	4b4f      	ldr	r3, [pc, #316]	; (8004244 <HAL_RCC_OscConfig+0x2a8>)
 8004108:	2201      	movs	r2, #1
 800410a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410c:	f7fd ff10 	bl	8001f30 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004114:	f7fd ff0c 	bl	8001f30 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e171      	b.n	800440a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004126:	4b46      	ldr	r3, [pc, #280]	; (8004240 <HAL_RCC_OscConfig+0x2a4>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0f0      	beq.n	8004114 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004132:	4b43      	ldr	r3, [pc, #268]	; (8004240 <HAL_RCC_OscConfig+0x2a4>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	493f      	ldr	r1, [pc, #252]	; (8004240 <HAL_RCC_OscConfig+0x2a4>)
 8004142:	4313      	orrs	r3, r2
 8004144:	600b      	str	r3, [r1, #0]
 8004146:	e015      	b.n	8004174 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004148:	4b3e      	ldr	r3, [pc, #248]	; (8004244 <HAL_RCC_OscConfig+0x2a8>)
 800414a:	2200      	movs	r2, #0
 800414c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414e:	f7fd feef 	bl	8001f30 <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004154:	e008      	b.n	8004168 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004156:	f7fd feeb 	bl	8001f30 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e150      	b.n	800440a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004168:	4b35      	ldr	r3, [pc, #212]	; (8004240 <HAL_RCC_OscConfig+0x2a4>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1f0      	bne.n	8004156 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0308 	and.w	r3, r3, #8
 800417c:	2b00      	cmp	r3, #0
 800417e:	d030      	beq.n	80041e2 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d016      	beq.n	80041b6 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004188:	4b2f      	ldr	r3, [pc, #188]	; (8004248 <HAL_RCC_OscConfig+0x2ac>)
 800418a:	2201      	movs	r2, #1
 800418c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418e:	f7fd fecf 	bl	8001f30 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004196:	f7fd fecb 	bl	8001f30 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e130      	b.n	800440a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041a8:	4b25      	ldr	r3, [pc, #148]	; (8004240 <HAL_RCC_OscConfig+0x2a4>)
 80041aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d0f0      	beq.n	8004196 <HAL_RCC_OscConfig+0x1fa>
 80041b4:	e015      	b.n	80041e2 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041b6:	4b24      	ldr	r3, [pc, #144]	; (8004248 <HAL_RCC_OscConfig+0x2ac>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041bc:	f7fd feb8 	bl	8001f30 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041c4:	f7fd feb4 	bl	8001f30 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e119      	b.n	800440a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041d6:	4b1a      	ldr	r3, [pc, #104]	; (8004240 <HAL_RCC_OscConfig+0x2a4>)
 80041d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1f0      	bne.n	80041c4 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0304 	and.w	r3, r3, #4
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 809f 	beq.w	800432e <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041f0:	2300      	movs	r3, #0
 80041f2:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041f4:	4b12      	ldr	r3, [pc, #72]	; (8004240 <HAL_RCC_OscConfig+0x2a4>)
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10f      	bne.n	8004220 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004200:	2300      	movs	r3, #0
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	4b0e      	ldr	r3, [pc, #56]	; (8004240 <HAL_RCC_OscConfig+0x2a4>)
 8004206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004208:	4a0d      	ldr	r2, [pc, #52]	; (8004240 <HAL_RCC_OscConfig+0x2a4>)
 800420a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800420e:	6413      	str	r3, [r2, #64]	; 0x40
 8004210:	4b0b      	ldr	r3, [pc, #44]	; (8004240 <HAL_RCC_OscConfig+0x2a4>)
 8004212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800421c:	2301      	movs	r3, #1
 800421e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004220:	4b0a      	ldr	r3, [pc, #40]	; (800424c <HAL_RCC_OscConfig+0x2b0>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004228:	2b00      	cmp	r3, #0
 800422a:	d120      	bne.n	800426e <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800422c:	4b07      	ldr	r3, [pc, #28]	; (800424c <HAL_RCC_OscConfig+0x2b0>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a06      	ldr	r2, [pc, #24]	; (800424c <HAL_RCC_OscConfig+0x2b0>)
 8004232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004236:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004238:	f7fd fe7a 	bl	8001f30 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800423e:	e010      	b.n	8004262 <HAL_RCC_OscConfig+0x2c6>
 8004240:	40023800 	.word	0x40023800
 8004244:	42470000 	.word	0x42470000
 8004248:	42470e80 	.word	0x42470e80
 800424c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004250:	f7fd fe6e 	bl	8001f30 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e0d3      	b.n	800440a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004262:	4b6c      	ldr	r3, [pc, #432]	; (8004414 <HAL_RCC_OscConfig+0x478>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0f0      	beq.n	8004250 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d106      	bne.n	8004284 <HAL_RCC_OscConfig+0x2e8>
 8004276:	4b68      	ldr	r3, [pc, #416]	; (8004418 <HAL_RCC_OscConfig+0x47c>)
 8004278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427a:	4a67      	ldr	r2, [pc, #412]	; (8004418 <HAL_RCC_OscConfig+0x47c>)
 800427c:	f043 0301 	orr.w	r3, r3, #1
 8004280:	6713      	str	r3, [r2, #112]	; 0x70
 8004282:	e01c      	b.n	80042be <HAL_RCC_OscConfig+0x322>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	2b05      	cmp	r3, #5
 800428a:	d10c      	bne.n	80042a6 <HAL_RCC_OscConfig+0x30a>
 800428c:	4b62      	ldr	r3, [pc, #392]	; (8004418 <HAL_RCC_OscConfig+0x47c>)
 800428e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004290:	4a61      	ldr	r2, [pc, #388]	; (8004418 <HAL_RCC_OscConfig+0x47c>)
 8004292:	f043 0304 	orr.w	r3, r3, #4
 8004296:	6713      	str	r3, [r2, #112]	; 0x70
 8004298:	4b5f      	ldr	r3, [pc, #380]	; (8004418 <HAL_RCC_OscConfig+0x47c>)
 800429a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429c:	4a5e      	ldr	r2, [pc, #376]	; (8004418 <HAL_RCC_OscConfig+0x47c>)
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	6713      	str	r3, [r2, #112]	; 0x70
 80042a4:	e00b      	b.n	80042be <HAL_RCC_OscConfig+0x322>
 80042a6:	4b5c      	ldr	r3, [pc, #368]	; (8004418 <HAL_RCC_OscConfig+0x47c>)
 80042a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042aa:	4a5b      	ldr	r2, [pc, #364]	; (8004418 <HAL_RCC_OscConfig+0x47c>)
 80042ac:	f023 0301 	bic.w	r3, r3, #1
 80042b0:	6713      	str	r3, [r2, #112]	; 0x70
 80042b2:	4b59      	ldr	r3, [pc, #356]	; (8004418 <HAL_RCC_OscConfig+0x47c>)
 80042b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b6:	4a58      	ldr	r2, [pc, #352]	; (8004418 <HAL_RCC_OscConfig+0x47c>)
 80042b8:	f023 0304 	bic.w	r3, r3, #4
 80042bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d015      	beq.n	80042f2 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c6:	f7fd fe33 	bl	8001f30 <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042cc:	e00a      	b.n	80042e4 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ce:	f7fd fe2f 	bl	8001f30 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042dc:	4293      	cmp	r3, r2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e092      	b.n	800440a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e4:	4b4c      	ldr	r3, [pc, #304]	; (8004418 <HAL_RCC_OscConfig+0x47c>)
 80042e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d0ee      	beq.n	80042ce <HAL_RCC_OscConfig+0x332>
 80042f0:	e014      	b.n	800431c <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f2:	f7fd fe1d 	bl	8001f30 <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f8:	e00a      	b.n	8004310 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042fa:	f7fd fe19 	bl	8001f30 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	f241 3288 	movw	r2, #5000	; 0x1388
 8004308:	4293      	cmp	r3, r2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e07c      	b.n	800440a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004310:	4b41      	ldr	r3, [pc, #260]	; (8004418 <HAL_RCC_OscConfig+0x47c>)
 8004312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1ee      	bne.n	80042fa <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800431c:	7dfb      	ldrb	r3, [r7, #23]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d105      	bne.n	800432e <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004322:	4b3d      	ldr	r3, [pc, #244]	; (8004418 <HAL_RCC_OscConfig+0x47c>)
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	4a3c      	ldr	r2, [pc, #240]	; (8004418 <HAL_RCC_OscConfig+0x47c>)
 8004328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800432c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d068      	beq.n	8004408 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004336:	4b38      	ldr	r3, [pc, #224]	; (8004418 <HAL_RCC_OscConfig+0x47c>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 030c 	and.w	r3, r3, #12
 800433e:	2b08      	cmp	r3, #8
 8004340:	d060      	beq.n	8004404 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	2b02      	cmp	r3, #2
 8004348:	d145      	bne.n	80043d6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800434a:	4b34      	ldr	r3, [pc, #208]	; (800441c <HAL_RCC_OscConfig+0x480>)
 800434c:	2200      	movs	r2, #0
 800434e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004350:	f7fd fdee 	bl	8001f30 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004358:	f7fd fdea 	bl	8001f30 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e04f      	b.n	800440a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800436a:	4b2b      	ldr	r3, [pc, #172]	; (8004418 <HAL_RCC_OscConfig+0x47c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1f0      	bne.n	8004358 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	69da      	ldr	r2, [r3, #28]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	019b      	lsls	r3, r3, #6
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438c:	085b      	lsrs	r3, r3, #1
 800438e:	3b01      	subs	r3, #1
 8004390:	041b      	lsls	r3, r3, #16
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004398:	061b      	lsls	r3, r3, #24
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a0:	071b      	lsls	r3, r3, #28
 80043a2:	491d      	ldr	r1, [pc, #116]	; (8004418 <HAL_RCC_OscConfig+0x47c>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043a8:	4b1c      	ldr	r3, [pc, #112]	; (800441c <HAL_RCC_OscConfig+0x480>)
 80043aa:	2201      	movs	r2, #1
 80043ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ae:	f7fd fdbf 	bl	8001f30 <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043b4:	e008      	b.n	80043c8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b6:	f7fd fdbb 	bl	8001f30 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e020      	b.n	800440a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043c8:	4b13      	ldr	r3, [pc, #76]	; (8004418 <HAL_RCC_OscConfig+0x47c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0f0      	beq.n	80043b6 <HAL_RCC_OscConfig+0x41a>
 80043d4:	e018      	b.n	8004408 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d6:	4b11      	ldr	r3, [pc, #68]	; (800441c <HAL_RCC_OscConfig+0x480>)
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043dc:	f7fd fda8 	bl	8001f30 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043e4:	f7fd fda4 	bl	8001f30 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e009      	b.n	800440a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f6:	4b08      	ldr	r3, [pc, #32]	; (8004418 <HAL_RCC_OscConfig+0x47c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1f0      	bne.n	80043e4 <HAL_RCC_OscConfig+0x448>
 8004402:	e001      	b.n	8004408 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e000      	b.n	800440a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3718      	adds	r7, #24
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	40007000 	.word	0x40007000
 8004418:	40023800 	.word	0x40023800
 800441c:	42470060 	.word	0x42470060

08004420 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e022      	b.n	8004478 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d105      	bne.n	800444a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7fd fa57 	bl	80018f8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2203      	movs	r2, #3
 800444e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f814 	bl	8004480 <HAL_SD_InitCard>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e00a      	b.n	8004478 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004480:	b5b0      	push	{r4, r5, r7, lr}
 8004482:	b08e      	sub	sp, #56	; 0x38
 8004484:	af04      	add	r7, sp, #16
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004488:	2300      	movs	r3, #0
 800448a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800448c:	2300      	movs	r3, #0
 800448e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004490:	2300      	movs	r3, #0
 8004492:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004494:	2300      	movs	r3, #0
 8004496:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004498:	2300      	movs	r3, #0
 800449a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800449c:	2376      	movs	r3, #118	; 0x76
 800449e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681d      	ldr	r5, [r3, #0]
 80044a4:	466c      	mov	r4, sp
 80044a6:	f107 0314 	add.w	r3, r7, #20
 80044aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80044ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80044b2:	f107 0308 	add.w	r3, r7, #8
 80044b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044b8:	4628      	mov	r0, r5
 80044ba:	f001 fded 	bl	8006098 <SDIO_Init>
 80044be:	4603      	mov	r3, r0
 80044c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80044c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e031      	b.n	8004534 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80044d0:	4b1a      	ldr	r3, [pc, #104]	; (800453c <HAL_SD_InitCard+0xbc>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f001 fe07 	bl	80060ee <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80044e0:	4b16      	ldr	r3, [pc, #88]	; (800453c <HAL_SD_InitCard+0xbc>)
 80044e2:	2201      	movs	r2, #1
 80044e4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fa9c 	bl	8004a24 <SD_PowerON>
 80044ec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80044ee:	6a3b      	ldr	r3, [r7, #32]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00b      	beq.n	800450c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004500:	6a3b      	ldr	r3, [r7, #32]
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e013      	b.n	8004534 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f9bb 	bl	8004888 <SD_InitCard>
 8004512:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00b      	beq.n	8004532 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	431a      	orrs	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e000      	b.n	8004534 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3728      	adds	r7, #40	; 0x28
 8004538:	46bd      	mov	sp, r7
 800453a:	bdb0      	pop	{r4, r5, r7, pc}
 800453c:	422580a0 	.word	0x422580a0

08004540 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800454e:	0f9b      	lsrs	r3, r3, #30
 8004550:	b2da      	uxtb	r2, r3
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800455a:	0e9b      	lsrs	r3, r3, #26
 800455c:	b2db      	uxtb	r3, r3
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	b2da      	uxtb	r2, r3
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800456c:	0e1b      	lsrs	r3, r3, #24
 800456e:	b2db      	uxtb	r3, r3
 8004570:	f003 0303 	and.w	r3, r3, #3
 8004574:	b2da      	uxtb	r2, r3
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800457e:	0c1b      	lsrs	r3, r3, #16
 8004580:	b2da      	uxtb	r2, r3
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800458a:	0a1b      	lsrs	r3, r3, #8
 800458c:	b2da      	uxtb	r2, r3
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004596:	b2da      	uxtb	r2, r3
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045a0:	0d1b      	lsrs	r3, r3, #20
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045ac:	0c1b      	lsrs	r3, r3, #16
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	f003 030f 	and.w	r3, r3, #15
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045be:	0bdb      	lsrs	r3, r3, #15
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045d0:	0b9b      	lsrs	r3, r3, #14
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045e2:	0b5b      	lsrs	r3, r3, #13
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	b2da      	uxtb	r2, r3
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045f4:	0b1b      	lsrs	r3, r3, #12
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2200      	movs	r2, #0
 8004606:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460c:	2b00      	cmp	r3, #0
 800460e:	d163      	bne.n	80046d8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004614:	009a      	lsls	r2, r3, #2
 8004616:	f640 73fc 	movw	r3, #4092	; 0xffc
 800461a:	4013      	ands	r3, r2
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004620:	0f92      	lsrs	r2, r2, #30
 8004622:	431a      	orrs	r2, r3
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800462c:	0edb      	lsrs	r3, r3, #27
 800462e:	b2db      	uxtb	r3, r3
 8004630:	f003 0307 	and.w	r3, r3, #7
 8004634:	b2da      	uxtb	r2, r3
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800463e:	0e1b      	lsrs	r3, r3, #24
 8004640:	b2db      	uxtb	r3, r3
 8004642:	f003 0307 	and.w	r3, r3, #7
 8004646:	b2da      	uxtb	r2, r3
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004650:	0d5b      	lsrs	r3, r3, #21
 8004652:	b2db      	uxtb	r3, r3
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	b2da      	uxtb	r2, r3
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004662:	0c9b      	lsrs	r3, r3, #18
 8004664:	b2db      	uxtb	r3, r3
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	b2da      	uxtb	r2, r3
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004674:	0bdb      	lsrs	r3, r3, #15
 8004676:	b2db      	uxtb	r3, r3
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	b2da      	uxtb	r2, r3
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	1c5a      	adds	r2, r3, #1
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	7e1b      	ldrb	r3, [r3, #24]
 8004690:	b2db      	uxtb	r3, r3
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	3302      	adds	r3, #2
 8004698:	2201      	movs	r2, #1
 800469a:	fa02 f303 	lsl.w	r3, r2, r3
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80046a2:	fb02 f203 	mul.w	r2, r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	7a1b      	ldrb	r3, [r3, #8]
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	f003 030f 	and.w	r3, r3, #15
 80046b4:	2201      	movs	r2, #1
 80046b6:	409a      	lsls	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80046c4:	0a52      	lsrs	r2, r2, #9
 80046c6:	fb02 f203 	mul.w	r2, r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046d4:	661a      	str	r2, [r3, #96]	; 0x60
 80046d6:	e031      	b.n	800473c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d11d      	bne.n	800471c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046e4:	041b      	lsls	r3, r3, #16
 80046e6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046ee:	0c1b      	lsrs	r3, r3, #16
 80046f0:	431a      	orrs	r2, r3
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	3301      	adds	r3, #1
 80046fc:	029a      	lsls	r2, r3, #10
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004710:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	661a      	str	r2, [r3, #96]	; 0x60
 800471a:	e00f      	b.n	800473c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a58      	ldr	r2, [pc, #352]	; (8004884 <HAL_SD_GetCardCSD+0x344>)
 8004722:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004728:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e09d      	b.n	8004878 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004740:	0b9b      	lsrs	r3, r3, #14
 8004742:	b2db      	uxtb	r3, r3
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	b2da      	uxtb	r2, r3
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004752:	09db      	lsrs	r3, r3, #7
 8004754:	b2db      	uxtb	r3, r3
 8004756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800475a:	b2da      	uxtb	r2, r3
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004764:	b2db      	uxtb	r3, r3
 8004766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800476a:	b2da      	uxtb	r2, r3
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004774:	0fdb      	lsrs	r3, r3, #31
 8004776:	b2da      	uxtb	r2, r3
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004780:	0f5b      	lsrs	r3, r3, #29
 8004782:	b2db      	uxtb	r3, r3
 8004784:	f003 0303 	and.w	r3, r3, #3
 8004788:	b2da      	uxtb	r2, r3
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004792:	0e9b      	lsrs	r3, r3, #26
 8004794:	b2db      	uxtb	r3, r3
 8004796:	f003 0307 	and.w	r3, r3, #7
 800479a:	b2da      	uxtb	r2, r3
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a4:	0d9b      	lsrs	r3, r3, #22
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	f003 030f 	and.w	r3, r3, #15
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b6:	0d5b      	lsrs	r3, r3, #21
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	b2da      	uxtb	r2, r3
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d2:	0c1b      	lsrs	r3, r3, #16
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e6:	0bdb      	lsrs	r3, r3, #15
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fa:	0b9b      	lsrs	r3, r3, #14
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	b2da      	uxtb	r2, r3
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480e:	0b5b      	lsrs	r3, r3, #13
 8004810:	b2db      	uxtb	r3, r3
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	b2da      	uxtb	r2, r3
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004822:	0b1b      	lsrs	r3, r3, #12
 8004824:	b2db      	uxtb	r3, r3
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	b2da      	uxtb	r2, r3
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004836:	0a9b      	lsrs	r3, r3, #10
 8004838:	b2db      	uxtb	r3, r3
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	b2da      	uxtb	r2, r3
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484a:	0a1b      	lsrs	r3, r3, #8
 800484c:	b2db      	uxtb	r3, r3
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	b2da      	uxtb	r2, r3
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485e:	085b      	lsrs	r3, r3, #1
 8004860:	b2db      	uxtb	r3, r3
 8004862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004866:	b2da      	uxtb	r2, r3
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	004005ff 	.word	0x004005ff

08004888 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004888:	b5b0      	push	{r4, r5, r7, lr}
 800488a:	b094      	sub	sp, #80	; 0x50
 800488c:	af04      	add	r7, sp, #16
 800488e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004890:	2301      	movs	r3, #1
 8004892:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4618      	mov	r0, r3
 800489a:	f001 fc37 	bl	800610c <SDIO_GetPowerState>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d102      	bne.n	80048aa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80048a4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80048a8:	e0b7      	b.n	8004a1a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ae:	2b03      	cmp	r3, #3
 80048b0:	d02f      	beq.n	8004912 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f001 fd25 	bl	8006306 <SDMMC_CmdSendCID>
 80048bc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80048be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <SD_InitCard+0x40>
    {
      return errorstate;
 80048c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c6:	e0a8      	b.n	8004a1a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2100      	movs	r1, #0
 80048ce:	4618      	mov	r0, r3
 80048d0:	f001 fc61 	bl	8006196 <SDIO_GetResponse>
 80048d4:	4602      	mov	r2, r0
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2104      	movs	r1, #4
 80048e0:	4618      	mov	r0, r3
 80048e2:	f001 fc58 	bl	8006196 <SDIO_GetResponse>
 80048e6:	4602      	mov	r2, r0
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2108      	movs	r1, #8
 80048f2:	4618      	mov	r0, r3
 80048f4:	f001 fc4f 	bl	8006196 <SDIO_GetResponse>
 80048f8:	4602      	mov	r2, r0
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	210c      	movs	r1, #12
 8004904:	4618      	mov	r0, r3
 8004906:	f001 fc46 	bl	8006196 <SDIO_GetResponse>
 800490a:	4602      	mov	r2, r0
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004916:	2b03      	cmp	r3, #3
 8004918:	d00d      	beq.n	8004936 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f107 020e 	add.w	r2, r7, #14
 8004922:	4611      	mov	r1, r2
 8004924:	4618      	mov	r0, r3
 8004926:	f001 fd2b 	bl	8006380 <SDMMC_CmdSetRelAdd>
 800492a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800492c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <SD_InitCard+0xae>
    {
      return errorstate;
 8004932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004934:	e071      	b.n	8004a1a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493a:	2b03      	cmp	r3, #3
 800493c:	d036      	beq.n	80049ac <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800493e:	89fb      	ldrh	r3, [r7, #14]
 8004940:	461a      	mov	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800494e:	041b      	lsls	r3, r3, #16
 8004950:	4619      	mov	r1, r3
 8004952:	4610      	mov	r0, r2
 8004954:	f001 fcf5 	bl	8006342 <SDMMC_CmdSendCSD>
 8004958:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800495a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004962:	e05a      	b.n	8004a1a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2100      	movs	r1, #0
 800496a:	4618      	mov	r0, r3
 800496c:	f001 fc13 	bl	8006196 <SDIO_GetResponse>
 8004970:	4602      	mov	r2, r0
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2104      	movs	r1, #4
 800497c:	4618      	mov	r0, r3
 800497e:	f001 fc0a 	bl	8006196 <SDIO_GetResponse>
 8004982:	4602      	mov	r2, r0
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2108      	movs	r1, #8
 800498e:	4618      	mov	r0, r3
 8004990:	f001 fc01 	bl	8006196 <SDIO_GetResponse>
 8004994:	4602      	mov	r2, r0
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	210c      	movs	r1, #12
 80049a0:	4618      	mov	r0, r3
 80049a2:	f001 fbf8 	bl	8006196 <SDIO_GetResponse>
 80049a6:	4602      	mov	r2, r0
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2104      	movs	r1, #4
 80049b2:	4618      	mov	r0, r3
 80049b4:	f001 fbef 	bl	8006196 <SDIO_GetResponse>
 80049b8:	4603      	mov	r3, r0
 80049ba:	0d1a      	lsrs	r2, r3, #20
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80049c0:	f107 0310 	add.w	r3, r7, #16
 80049c4:	4619      	mov	r1, r3
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7ff fdba 	bl	8004540 <HAL_SD_GetCardCSD>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d002      	beq.n	80049d8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80049d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80049d6:	e020      	b.n	8004a1a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6819      	ldr	r1, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e0:	041b      	lsls	r3, r3, #16
 80049e2:	f04f 0400 	mov.w	r4, #0
 80049e6:	461a      	mov	r2, r3
 80049e8:	4623      	mov	r3, r4
 80049ea:	4608      	mov	r0, r1
 80049ec:	f001 fbe6 	bl	80061bc <SDMMC_CmdSelDesel>
 80049f0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80049f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <SD_InitCard+0x174>
  {
    return errorstate;
 80049f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049fa:	e00e      	b.n	8004a1a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681d      	ldr	r5, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	466c      	mov	r4, sp
 8004a04:	f103 0210 	add.w	r2, r3, #16
 8004a08:	ca07      	ldmia	r2, {r0, r1, r2}
 8004a0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004a0e:	3304      	adds	r3, #4
 8004a10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a12:	4628      	mov	r0, r5
 8004a14:	f001 fb40 	bl	8006098 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3740      	adds	r7, #64	; 0x40
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004a24 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	617b      	str	r3, [r7, #20]
 8004a34:	2300      	movs	r3, #0
 8004a36:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f001 fbe0 	bl	8006202 <SDMMC_CmdGoIdleState>
 8004a42:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <SD_PowerON+0x2a>
  {
    return errorstate;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	e072      	b.n	8004b34 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f001 fbf3 	bl	800623e <SDMMC_CmdOperCond>
 8004a58:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00d      	beq.n	8004a7c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f001 fbc9 	bl	8006202 <SDMMC_CmdGoIdleState>
 8004a70:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d004      	beq.n	8004a82 <SD_PowerON+0x5e>
    {
      return errorstate;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	e05b      	b.n	8004b34 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d137      	bne.n	8004afa <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2100      	movs	r1, #0
 8004a90:	4618      	mov	r0, r3
 8004a92:	f001 fbf3 	bl	800627c <SDMMC_CmdAppCommand>
 8004a96:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d02d      	beq.n	8004afa <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a9e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004aa2:	e047      	b.n	8004b34 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f001 fbe6 	bl	800627c <SDMMC_CmdAppCommand>
 8004ab0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <SD_PowerON+0x98>
    {
      return errorstate;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	e03b      	b.n	8004b34 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	491e      	ldr	r1, [pc, #120]	; (8004b3c <SD_PowerON+0x118>)
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f001 fbfc 	bl	80062c0 <SDMMC_CmdAppOperCommand>
 8004ac8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d002      	beq.n	8004ad6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004ad0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004ad4:	e02e      	b.n	8004b34 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2100      	movs	r1, #0
 8004adc:	4618      	mov	r0, r3
 8004ade:	f001 fb5a 	bl	8006196 <SDIO_GetResponse>
 8004ae2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	0fdb      	lsrs	r3, r3, #31
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d101      	bne.n	8004af0 <SD_PowerON+0xcc>
 8004aec:	2301      	movs	r3, #1
 8004aee:	e000      	b.n	8004af2 <SD_PowerON+0xce>
 8004af0:	2300      	movs	r3, #0
 8004af2:	613b      	str	r3, [r7, #16]

    count++;
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	3301      	adds	r3, #1
 8004af8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d802      	bhi.n	8004b0a <SD_PowerON+0xe6>
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0cc      	beq.n	8004aa4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d902      	bls.n	8004b1a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004b14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b18:	e00c      	b.n	8004b34 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d003      	beq.n	8004b2c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	645a      	str	r2, [r3, #68]	; 0x44
 8004b2a:	e002      	b.n	8004b32 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3718      	adds	r7, #24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	c1100000 	.word	0xc1100000

08004b40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e01d      	b.n	8004b8e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d106      	bne.n	8004b6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7fd f826 	bl	8001bb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2202      	movs	r2, #2
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	4610      	mov	r0, r2
 8004b80:	f000 fa14 	bl	8004fac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b085      	sub	sp, #20
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68da      	ldr	r2, [r3, #12]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f042 0201 	orr.w	r2, r2, #1
 8004bac:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2b06      	cmp	r3, #6
 8004bbe:	d007      	beq.n	8004bd0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 0201 	orr.w	r2, r2, #1
 8004bce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b082      	sub	sp, #8
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d122      	bne.n	8004c3a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d11b      	bne.n	8004c3a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f06f 0202 	mvn.w	r2, #2
 8004c0a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	f003 0303 	and.w	r3, r3, #3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d003      	beq.n	8004c28 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f9a5 	bl	8004f70 <HAL_TIM_IC_CaptureCallback>
 8004c26:	e005      	b.n	8004c34 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 f997 	bl	8004f5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f9a8 	bl	8004f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	f003 0304 	and.w	r3, r3, #4
 8004c44:	2b04      	cmp	r3, #4
 8004c46:	d122      	bne.n	8004c8e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f003 0304 	and.w	r3, r3, #4
 8004c52:	2b04      	cmp	r3, #4
 8004c54:	d11b      	bne.n	8004c8e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f06f 0204 	mvn.w	r2, #4
 8004c5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d003      	beq.n	8004c7c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 f97b 	bl	8004f70 <HAL_TIM_IC_CaptureCallback>
 8004c7a:	e005      	b.n	8004c88 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 f96d 	bl	8004f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f97e 	bl	8004f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	f003 0308 	and.w	r3, r3, #8
 8004c98:	2b08      	cmp	r3, #8
 8004c9a:	d122      	bne.n	8004ce2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	2b08      	cmp	r3, #8
 8004ca8:	d11b      	bne.n	8004ce2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f06f 0208 	mvn.w	r2, #8
 8004cb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2204      	movs	r2, #4
 8004cb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	f003 0303 	and.w	r3, r3, #3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d003      	beq.n	8004cd0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f951 	bl	8004f70 <HAL_TIM_IC_CaptureCallback>
 8004cce:	e005      	b.n	8004cdc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f943 	bl	8004f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f954 	bl	8004f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	f003 0310 	and.w	r3, r3, #16
 8004cec:	2b10      	cmp	r3, #16
 8004cee:	d122      	bne.n	8004d36 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f003 0310 	and.w	r3, r3, #16
 8004cfa:	2b10      	cmp	r3, #16
 8004cfc:	d11b      	bne.n	8004d36 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f06f 0210 	mvn.w	r2, #16
 8004d06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2208      	movs	r2, #8
 8004d0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	69db      	ldr	r3, [r3, #28]
 8004d14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d003      	beq.n	8004d24 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 f927 	bl	8004f70 <HAL_TIM_IC_CaptureCallback>
 8004d22:	e005      	b.n	8004d30 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 f919 	bl	8004f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f92a 	bl	8004f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d10e      	bne.n	8004d62 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d107      	bne.n	8004d62 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f06f 0201 	mvn.w	r2, #1
 8004d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f7fc fd47 	bl	80017f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d6c:	2b80      	cmp	r3, #128	; 0x80
 8004d6e:	d10e      	bne.n	8004d8e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d7a:	2b80      	cmp	r3, #128	; 0x80
 8004d7c:	d107      	bne.n	8004d8e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 facf 	bl	800532c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d98:	2b40      	cmp	r3, #64	; 0x40
 8004d9a:	d10e      	bne.n	8004dba <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da6:	2b40      	cmp	r3, #64	; 0x40
 8004da8:	d107      	bne.n	8004dba <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f8ef 	bl	8004f98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	f003 0320 	and.w	r3, r3, #32
 8004dc4:	2b20      	cmp	r3, #32
 8004dc6:	d10e      	bne.n	8004de6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	f003 0320 	and.w	r3, r3, #32
 8004dd2:	2b20      	cmp	r3, #32
 8004dd4:	d107      	bne.n	8004de6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f06f 0220 	mvn.w	r2, #32
 8004dde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 fa99 	bl	8005318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004de6:	bf00      	nop
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b084      	sub	sp, #16
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
 8004df6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d101      	bne.n	8004e06 <HAL_TIM_ConfigClockSource+0x18>
 8004e02:	2302      	movs	r3, #2
 8004e04:	e0a6      	b.n	8004f54 <HAL_TIM_ConfigClockSource+0x166>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2202      	movs	r2, #2
 8004e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e24:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e2c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b40      	cmp	r3, #64	; 0x40
 8004e3c:	d067      	beq.n	8004f0e <HAL_TIM_ConfigClockSource+0x120>
 8004e3e:	2b40      	cmp	r3, #64	; 0x40
 8004e40:	d80b      	bhi.n	8004e5a <HAL_TIM_ConfigClockSource+0x6c>
 8004e42:	2b10      	cmp	r3, #16
 8004e44:	d073      	beq.n	8004f2e <HAL_TIM_ConfigClockSource+0x140>
 8004e46:	2b10      	cmp	r3, #16
 8004e48:	d802      	bhi.n	8004e50 <HAL_TIM_ConfigClockSource+0x62>
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d06f      	beq.n	8004f2e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004e4e:	e078      	b.n	8004f42 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e50:	2b20      	cmp	r3, #32
 8004e52:	d06c      	beq.n	8004f2e <HAL_TIM_ConfigClockSource+0x140>
 8004e54:	2b30      	cmp	r3, #48	; 0x30
 8004e56:	d06a      	beq.n	8004f2e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004e58:	e073      	b.n	8004f42 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e5a:	2b70      	cmp	r3, #112	; 0x70
 8004e5c:	d00d      	beq.n	8004e7a <HAL_TIM_ConfigClockSource+0x8c>
 8004e5e:	2b70      	cmp	r3, #112	; 0x70
 8004e60:	d804      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x7e>
 8004e62:	2b50      	cmp	r3, #80	; 0x50
 8004e64:	d033      	beq.n	8004ece <HAL_TIM_ConfigClockSource+0xe0>
 8004e66:	2b60      	cmp	r3, #96	; 0x60
 8004e68:	d041      	beq.n	8004eee <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004e6a:	e06a      	b.n	8004f42 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e70:	d066      	beq.n	8004f40 <HAL_TIM_ConfigClockSource+0x152>
 8004e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e76:	d017      	beq.n	8004ea8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004e78:	e063      	b.n	8004f42 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6818      	ldr	r0, [r3, #0]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	6899      	ldr	r1, [r3, #8]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	f000 f9a9 	bl	80051e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e9c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	609a      	str	r2, [r3, #8]
      break;
 8004ea6:	e04c      	b.n	8004f42 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6818      	ldr	r0, [r3, #0]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	6899      	ldr	r1, [r3, #8]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f000 f992 	bl	80051e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689a      	ldr	r2, [r3, #8]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004eca:	609a      	str	r2, [r3, #8]
      break;
 8004ecc:	e039      	b.n	8004f42 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6818      	ldr	r0, [r3, #0]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	6859      	ldr	r1, [r3, #4]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	461a      	mov	r2, r3
 8004edc:	f000 f906 	bl	80050ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2150      	movs	r1, #80	; 0x50
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 f95f 	bl	80051aa <TIM_ITRx_SetConfig>
      break;
 8004eec:	e029      	b.n	8004f42 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6818      	ldr	r0, [r3, #0]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	6859      	ldr	r1, [r3, #4]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	461a      	mov	r2, r3
 8004efc:	f000 f925 	bl	800514a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2160      	movs	r1, #96	; 0x60
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 f94f 	bl	80051aa <TIM_ITRx_SetConfig>
      break;
 8004f0c:	e019      	b.n	8004f42 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6818      	ldr	r0, [r3, #0]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	6859      	ldr	r1, [r3, #4]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	f000 f8e6 	bl	80050ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2140      	movs	r1, #64	; 0x40
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 f93f 	bl	80051aa <TIM_ITRx_SetConfig>
      break;
 8004f2c:	e009      	b.n	8004f42 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4619      	mov	r1, r3
 8004f38:	4610      	mov	r0, r2
 8004f3a:	f000 f936 	bl	80051aa <TIM_ITRx_SetConfig>
      break;
 8004f3e:	e000      	b.n	8004f42 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004f40:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a40      	ldr	r2, [pc, #256]	; (80050c0 <TIM_Base_SetConfig+0x114>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d013      	beq.n	8004fec <TIM_Base_SetConfig+0x40>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fca:	d00f      	beq.n	8004fec <TIM_Base_SetConfig+0x40>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a3d      	ldr	r2, [pc, #244]	; (80050c4 <TIM_Base_SetConfig+0x118>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d00b      	beq.n	8004fec <TIM_Base_SetConfig+0x40>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a3c      	ldr	r2, [pc, #240]	; (80050c8 <TIM_Base_SetConfig+0x11c>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d007      	beq.n	8004fec <TIM_Base_SetConfig+0x40>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a3b      	ldr	r2, [pc, #236]	; (80050cc <TIM_Base_SetConfig+0x120>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d003      	beq.n	8004fec <TIM_Base_SetConfig+0x40>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a3a      	ldr	r2, [pc, #232]	; (80050d0 <TIM_Base_SetConfig+0x124>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d108      	bne.n	8004ffe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a2f      	ldr	r2, [pc, #188]	; (80050c0 <TIM_Base_SetConfig+0x114>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d02b      	beq.n	800505e <TIM_Base_SetConfig+0xb2>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500c:	d027      	beq.n	800505e <TIM_Base_SetConfig+0xb2>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a2c      	ldr	r2, [pc, #176]	; (80050c4 <TIM_Base_SetConfig+0x118>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d023      	beq.n	800505e <TIM_Base_SetConfig+0xb2>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a2b      	ldr	r2, [pc, #172]	; (80050c8 <TIM_Base_SetConfig+0x11c>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d01f      	beq.n	800505e <TIM_Base_SetConfig+0xb2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a2a      	ldr	r2, [pc, #168]	; (80050cc <TIM_Base_SetConfig+0x120>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d01b      	beq.n	800505e <TIM_Base_SetConfig+0xb2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a29      	ldr	r2, [pc, #164]	; (80050d0 <TIM_Base_SetConfig+0x124>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d017      	beq.n	800505e <TIM_Base_SetConfig+0xb2>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a28      	ldr	r2, [pc, #160]	; (80050d4 <TIM_Base_SetConfig+0x128>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d013      	beq.n	800505e <TIM_Base_SetConfig+0xb2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a27      	ldr	r2, [pc, #156]	; (80050d8 <TIM_Base_SetConfig+0x12c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d00f      	beq.n	800505e <TIM_Base_SetConfig+0xb2>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a26      	ldr	r2, [pc, #152]	; (80050dc <TIM_Base_SetConfig+0x130>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d00b      	beq.n	800505e <TIM_Base_SetConfig+0xb2>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a25      	ldr	r2, [pc, #148]	; (80050e0 <TIM_Base_SetConfig+0x134>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d007      	beq.n	800505e <TIM_Base_SetConfig+0xb2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a24      	ldr	r2, [pc, #144]	; (80050e4 <TIM_Base_SetConfig+0x138>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d003      	beq.n	800505e <TIM_Base_SetConfig+0xb2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a23      	ldr	r2, [pc, #140]	; (80050e8 <TIM_Base_SetConfig+0x13c>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d108      	bne.n	8005070 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	4313      	orrs	r3, r2
 800506e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	4313      	orrs	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a0a      	ldr	r2, [pc, #40]	; (80050c0 <TIM_Base_SetConfig+0x114>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d003      	beq.n	80050a4 <TIM_Base_SetConfig+0xf8>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a0c      	ldr	r2, [pc, #48]	; (80050d0 <TIM_Base_SetConfig+0x124>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d103      	bne.n	80050ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	691a      	ldr	r2, [r3, #16]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	615a      	str	r2, [r3, #20]
}
 80050b2:	bf00      	nop
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	40010000 	.word	0x40010000
 80050c4:	40000400 	.word	0x40000400
 80050c8:	40000800 	.word	0x40000800
 80050cc:	40000c00 	.word	0x40000c00
 80050d0:	40010400 	.word	0x40010400
 80050d4:	40014000 	.word	0x40014000
 80050d8:	40014400 	.word	0x40014400
 80050dc:	40014800 	.word	0x40014800
 80050e0:	40001800 	.word	0x40001800
 80050e4:	40001c00 	.word	0x40001c00
 80050e8:	40002000 	.word	0x40002000

080050ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b087      	sub	sp, #28
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6a1b      	ldr	r3, [r3, #32]
 80050fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	f023 0201 	bic.w	r2, r3, #1
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005116:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	011b      	lsls	r3, r3, #4
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	4313      	orrs	r3, r2
 8005120:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f023 030a 	bic.w	r3, r3, #10
 8005128:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	4313      	orrs	r3, r2
 8005130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	621a      	str	r2, [r3, #32]
}
 800513e:	bf00      	nop
 8005140:	371c      	adds	r7, #28
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800514a:	b480      	push	{r7}
 800514c:	b087      	sub	sp, #28
 800514e:	af00      	add	r7, sp, #0
 8005150:	60f8      	str	r0, [r7, #12]
 8005152:	60b9      	str	r1, [r7, #8]
 8005154:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	f023 0210 	bic.w	r2, r3, #16
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005174:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	031b      	lsls	r3, r3, #12
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	4313      	orrs	r3, r2
 800517e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005186:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	011b      	lsls	r3, r3, #4
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	4313      	orrs	r3, r2
 8005190:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	621a      	str	r2, [r3, #32]
}
 800519e:	bf00      	nop
 80051a0:	371c      	adds	r7, #28
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b085      	sub	sp, #20
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
 80051b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	f043 0307 	orr.w	r3, r3, #7
 80051cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	609a      	str	r2, [r3, #8]
}
 80051d4:	bf00      	nop
 80051d6:	3714      	adds	r7, #20
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b087      	sub	sp, #28
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
 80051ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	021a      	lsls	r2, r3, #8
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	431a      	orrs	r2, r3
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	4313      	orrs	r3, r2
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	4313      	orrs	r3, r2
 800520c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	609a      	str	r2, [r3, #8]
}
 8005214:	bf00      	nop
 8005216:	371c      	adds	r7, #28
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005230:	2b01      	cmp	r3, #1
 8005232:	d101      	bne.n	8005238 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005234:	2302      	movs	r3, #2
 8005236:	e05a      	b.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2202      	movs	r2, #2
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800525e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	4313      	orrs	r3, r2
 8005268:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a21      	ldr	r2, [pc, #132]	; (80052fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d022      	beq.n	80052c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005284:	d01d      	beq.n	80052c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a1d      	ldr	r2, [pc, #116]	; (8005300 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d018      	beq.n	80052c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a1b      	ldr	r2, [pc, #108]	; (8005304 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d013      	beq.n	80052c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a1a      	ldr	r2, [pc, #104]	; (8005308 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d00e      	beq.n	80052c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a18      	ldr	r2, [pc, #96]	; (800530c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d009      	beq.n	80052c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a17      	ldr	r2, [pc, #92]	; (8005310 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d004      	beq.n	80052c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a15      	ldr	r2, [pc, #84]	; (8005314 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d10c      	bne.n	80052dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3714      	adds	r7, #20
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	40010000 	.word	0x40010000
 8005300:	40000400 	.word	0x40000400
 8005304:	40000800 	.word	0x40000800
 8005308:	40000c00 	.word	0x40000c00
 800530c:	40010400 	.word	0x40010400
 8005310:	40014000 	.word	0x40014000
 8005314:	40001800 	.word	0x40001800

08005318 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e03f      	b.n	80053d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d106      	bne.n	800536c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7fc fc78 	bl	8001c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2224      	movs	r2, #36	; 0x24
 8005370:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68da      	ldr	r2, [r3, #12]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005382:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 faef 	bl	8005968 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	691a      	ldr	r2, [r3, #16]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005398:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	695a      	ldr	r2, [r3, #20]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68da      	ldr	r2, [r3, #12]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2220      	movs	r2, #32
 80053c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2220      	movs	r2, #32
 80053cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053da:	b480      	push	{r7}
 80053dc:	b085      	sub	sp, #20
 80053de:	af00      	add	r7, sp, #0
 80053e0:	60f8      	str	r0, [r7, #12]
 80053e2:	60b9      	str	r1, [r7, #8]
 80053e4:	4613      	mov	r3, r2
 80053e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b20      	cmp	r3, #32
 80053f2:	d130      	bne.n	8005456 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <HAL_UART_Transmit_IT+0x26>
 80053fa:	88fb      	ldrh	r3, [r7, #6]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e029      	b.n	8005458 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800540a:	2b01      	cmp	r3, #1
 800540c:	d101      	bne.n	8005412 <HAL_UART_Transmit_IT+0x38>
 800540e:	2302      	movs	r3, #2
 8005410:	e022      	b.n	8005458 <HAL_UART_Transmit_IT+0x7e>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	88fa      	ldrh	r2, [r7, #6]
 8005424:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	88fa      	ldrh	r2, [r7, #6]
 800542a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2221      	movs	r2, #33	; 0x21
 8005436:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68da      	ldr	r2, [r3, #12]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005450:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005452:	2300      	movs	r3, #0
 8005454:	e000      	b.n	8005458 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005456:	2302      	movs	r3, #2
  }
}
 8005458:	4618      	mov	r0, r3
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	4613      	mov	r3, r2
 8005470:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b20      	cmp	r3, #32
 800547c:	d140      	bne.n	8005500 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d002      	beq.n	800548a <HAL_UART_Receive_IT+0x26>
 8005484:	88fb      	ldrh	r3, [r7, #6]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e039      	b.n	8005502 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005494:	2b01      	cmp	r3, #1
 8005496:	d101      	bne.n	800549c <HAL_UART_Receive_IT+0x38>
 8005498:	2302      	movs	r3, #2
 800549a:	e032      	b.n	8005502 <HAL_UART_Receive_IT+0x9e>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	88fa      	ldrh	r2, [r7, #6]
 80054ae:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	88fa      	ldrh	r2, [r7, #6]
 80054b4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2222      	movs	r2, #34	; 0x22
 80054c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054da:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	695a      	ldr	r2, [r3, #20]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f042 0201 	orr.w	r2, r2, #1
 80054ea:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f042 0220 	orr.w	r2, r2, #32
 80054fa:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80054fc:	2300      	movs	r3, #0
 80054fe:	e000      	b.n	8005502 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005500:	2302      	movs	r3, #2
  }
}
 8005502:	4618      	mov	r0, r3
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
	...

08005510 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b088      	sub	sp, #32
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005530:	2300      	movs	r3, #0
 8005532:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005534:	2300      	movs	r3, #0
 8005536:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10d      	bne.n	8005562 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	f003 0320 	and.w	r3, r3, #32
 800554c:	2b00      	cmp	r3, #0
 800554e:	d008      	beq.n	8005562 <HAL_UART_IRQHandler+0x52>
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f982 	bl	8005864 <UART_Receive_IT>
      return;
 8005560:	e0d1      	b.n	8005706 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	2b00      	cmp	r3, #0
 8005566:	f000 80b0 	beq.w	80056ca <HAL_UART_IRQHandler+0x1ba>
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	2b00      	cmp	r3, #0
 8005572:	d105      	bne.n	8005580 <HAL_UART_IRQHandler+0x70>
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 80a5 	beq.w	80056ca <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00a      	beq.n	80055a0 <HAL_UART_IRQHandler+0x90>
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005590:	2b00      	cmp	r3, #0
 8005592:	d005      	beq.n	80055a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005598:	f043 0201 	orr.w	r2, r3, #1
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	f003 0304 	and.w	r3, r3, #4
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00a      	beq.n	80055c0 <HAL_UART_IRQHandler+0xb0>
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d005      	beq.n	80055c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b8:	f043 0202 	orr.w	r2, r3, #2
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <HAL_UART_IRQHandler+0xd0>
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d005      	beq.n	80055e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d8:	f043 0204 	orr.w	r2, r3, #4
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	f003 0308 	and.w	r3, r3, #8
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00f      	beq.n	800560a <HAL_UART_IRQHandler+0xfa>
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	f003 0320 	and.w	r3, r3, #32
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d104      	bne.n	80055fe <HAL_UART_IRQHandler+0xee>
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d005      	beq.n	800560a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005602:	f043 0208 	orr.w	r2, r3, #8
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800560e:	2b00      	cmp	r3, #0
 8005610:	d078      	beq.n	8005704 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	f003 0320 	and.w	r3, r3, #32
 8005618:	2b00      	cmp	r3, #0
 800561a:	d007      	beq.n	800562c <HAL_UART_IRQHandler+0x11c>
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	f003 0320 	and.w	r3, r3, #32
 8005622:	2b00      	cmp	r3, #0
 8005624:	d002      	beq.n	800562c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f91c 	bl	8005864 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005636:	2b40      	cmp	r3, #64	; 0x40
 8005638:	bf0c      	ite	eq
 800563a:	2301      	moveq	r3, #1
 800563c:	2300      	movne	r3, #0
 800563e:	b2db      	uxtb	r3, r3
 8005640:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005646:	f003 0308 	and.w	r3, r3, #8
 800564a:	2b00      	cmp	r3, #0
 800564c:	d102      	bne.n	8005654 <HAL_UART_IRQHandler+0x144>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d031      	beq.n	80056b8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 f865 	bl	8005724 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005664:	2b40      	cmp	r3, #64	; 0x40
 8005666:	d123      	bne.n	80056b0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	695a      	ldr	r2, [r3, #20]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005676:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567c:	2b00      	cmp	r3, #0
 800567e:	d013      	beq.n	80056a8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005684:	4a21      	ldr	r2, [pc, #132]	; (800570c <HAL_UART_IRQHandler+0x1fc>)
 8005686:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800568c:	4618      	mov	r0, r3
 800568e:	f7fd fa71 	bl	8002b74 <HAL_DMA_Abort_IT>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d016      	beq.n	80056c6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800569c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80056a2:	4610      	mov	r0, r2
 80056a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a6:	e00e      	b.n	80056c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 f831 	bl	8005710 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056ae:	e00a      	b.n	80056c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f82d 	bl	8005710 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056b6:	e006      	b.n	80056c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f829 	bl	8005710 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80056c4:	e01e      	b.n	8005704 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056c6:	bf00      	nop
    return;
 80056c8:	e01c      	b.n	8005704 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d008      	beq.n	80056e6 <HAL_UART_IRQHandler+0x1d6>
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f852 	bl	8005788 <UART_Transmit_IT>
    return;
 80056e4:	e00f      	b.n	8005706 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00a      	beq.n	8005706 <HAL_UART_IRQHandler+0x1f6>
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d005      	beq.n	8005706 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f89a 	bl	8005834 <UART_EndTransmit_IT>
    return;
 8005700:	bf00      	nop
 8005702:	e000      	b.n	8005706 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005704:	bf00      	nop
  }
}
 8005706:	3720      	adds	r7, #32
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	08005761 	.word	0x08005761

08005710 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68da      	ldr	r2, [r3, #12]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800573a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	695a      	ldr	r2, [r3, #20]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f022 0201 	bic.w	r2, r2, #1
 800574a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2220      	movs	r2, #32
 8005750:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f7ff ffc8 	bl	8005710 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005780:	bf00      	nop
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b21      	cmp	r3, #33	; 0x21
 800579a:	d144      	bne.n	8005826 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057a4:	d11a      	bne.n	80057dc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	881b      	ldrh	r3, [r3, #0]
 80057b0:	461a      	mov	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057ba:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d105      	bne.n	80057d0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a1b      	ldr	r3, [r3, #32]
 80057c8:	1c9a      	adds	r2, r3, #2
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	621a      	str	r2, [r3, #32]
 80057ce:	e00e      	b.n	80057ee <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a1b      	ldr	r3, [r3, #32]
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	621a      	str	r2, [r3, #32]
 80057da:	e008      	b.n	80057ee <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a1b      	ldr	r3, [r3, #32]
 80057e0:	1c59      	adds	r1, r3, #1
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	6211      	str	r1, [r2, #32]
 80057e6:	781a      	ldrb	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	3b01      	subs	r3, #1
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	4619      	mov	r1, r3
 80057fc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10f      	bne.n	8005822 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68da      	ldr	r2, [r3, #12]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005810:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68da      	ldr	r2, [r3, #12]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005820:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005822:	2300      	movs	r3, #0
 8005824:	e000      	b.n	8005828 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005826:	2302      	movs	r3, #2
  }
}
 8005828:	4618      	mov	r0, r3
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68da      	ldr	r2, [r3, #12]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800584a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2220      	movs	r2, #32
 8005850:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f7fb fe81 	bl	800155c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b22      	cmp	r3, #34	; 0x22
 8005876:	d171      	bne.n	800595c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005880:	d123      	bne.n	80058ca <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005886:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10e      	bne.n	80058ae <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	b29b      	uxth	r3, r3
 8005898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800589c:	b29a      	uxth	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a6:	1c9a      	adds	r2, r3, #2
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	629a      	str	r2, [r3, #40]	; 0x28
 80058ac:	e029      	b.n	8005902 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c2:	1c5a      	adds	r2, r3, #1
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	629a      	str	r2, [r3, #40]	; 0x28
 80058c8:	e01b      	b.n	8005902 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10a      	bne.n	80058e8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6858      	ldr	r0, [r3, #4]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058dc:	1c59      	adds	r1, r3, #1
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	6291      	str	r1, [r2, #40]	; 0x28
 80058e2:	b2c2      	uxtb	r2, r0
 80058e4:	701a      	strb	r2, [r3, #0]
 80058e6:	e00c      	b.n	8005902 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	b2da      	uxtb	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f4:	1c58      	adds	r0, r3, #1
 80058f6:	6879      	ldr	r1, [r7, #4]
 80058f8:	6288      	str	r0, [r1, #40]	; 0x28
 80058fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80058fe:	b2d2      	uxtb	r2, r2
 8005900:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005906:	b29b      	uxth	r3, r3
 8005908:	3b01      	subs	r3, #1
 800590a:	b29b      	uxth	r3, r3
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	4619      	mov	r1, r3
 8005910:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005912:	2b00      	cmp	r3, #0
 8005914:	d120      	bne.n	8005958 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0220 	bic.w	r2, r2, #32
 8005924:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68da      	ldr	r2, [r3, #12]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005934:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	695a      	ldr	r2, [r3, #20]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f022 0201 	bic.w	r2, r2, #1
 8005944:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2220      	movs	r2, #32
 800594a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f7fb ff64 	bl	800181c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005954:	2300      	movs	r3, #0
 8005956:	e002      	b.n	800595e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005958:	2300      	movs	r3, #0
 800595a:	e000      	b.n	800595e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800595c:	2302      	movs	r3, #2
  }
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
	...

08005968 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800596c:	b085      	sub	sp, #20
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68da      	ldr	r2, [r3, #12]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	430a      	orrs	r2, r1
 8005986:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689a      	ldr	r2, [r3, #8]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	431a      	orrs	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	431a      	orrs	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	69db      	ldr	r3, [r3, #28]
 800599c:	4313      	orrs	r3, r2
 800599e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80059aa:	f023 030c 	bic.w	r3, r3, #12
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	6812      	ldr	r2, [r2, #0]
 80059b2:	68f9      	ldr	r1, [r7, #12]
 80059b4:	430b      	orrs	r3, r1
 80059b6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	699a      	ldr	r2, [r3, #24]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059d6:	f040 8199 	bne.w	8005d0c <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4ac6      	ldr	r2, [pc, #792]	; (8005cf8 <UART_SetConfig+0x390>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d00f      	beq.n	8005a04 <UART_SetConfig+0x9c>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4ac4      	ldr	r2, [pc, #784]	; (8005cfc <UART_SetConfig+0x394>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d00a      	beq.n	8005a04 <UART_SetConfig+0x9c>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4ac3      	ldr	r2, [pc, #780]	; (8005d00 <UART_SetConfig+0x398>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d005      	beq.n	8005a04 <UART_SetConfig+0x9c>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4ac1      	ldr	r2, [pc, #772]	; (8005d04 <UART_SetConfig+0x39c>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	f040 80bd 	bne.w	8005b7e <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a04:	f7fe f82a 	bl	8003a5c <HAL_RCC_GetPCLK2Freq>
 8005a08:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	461d      	mov	r5, r3
 8005a0e:	f04f 0600 	mov.w	r6, #0
 8005a12:	46a8      	mov	r8, r5
 8005a14:	46b1      	mov	r9, r6
 8005a16:	eb18 0308 	adds.w	r3, r8, r8
 8005a1a:	eb49 0409 	adc.w	r4, r9, r9
 8005a1e:	4698      	mov	r8, r3
 8005a20:	46a1      	mov	r9, r4
 8005a22:	eb18 0805 	adds.w	r8, r8, r5
 8005a26:	eb49 0906 	adc.w	r9, r9, r6
 8005a2a:	f04f 0100 	mov.w	r1, #0
 8005a2e:	f04f 0200 	mov.w	r2, #0
 8005a32:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005a36:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005a3a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005a3e:	4688      	mov	r8, r1
 8005a40:	4691      	mov	r9, r2
 8005a42:	eb18 0005 	adds.w	r0, r8, r5
 8005a46:	eb49 0106 	adc.w	r1, r9, r6
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	461d      	mov	r5, r3
 8005a50:	f04f 0600 	mov.w	r6, #0
 8005a54:	196b      	adds	r3, r5, r5
 8005a56:	eb46 0406 	adc.w	r4, r6, r6
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	4623      	mov	r3, r4
 8005a5e:	f7fb f819 	bl	8000a94 <__aeabi_uldivmod>
 8005a62:	4603      	mov	r3, r0
 8005a64:	460c      	mov	r4, r1
 8005a66:	461a      	mov	r2, r3
 8005a68:	4ba7      	ldr	r3, [pc, #668]	; (8005d08 <UART_SetConfig+0x3a0>)
 8005a6a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a6e:	095b      	lsrs	r3, r3, #5
 8005a70:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	461d      	mov	r5, r3
 8005a78:	f04f 0600 	mov.w	r6, #0
 8005a7c:	46a9      	mov	r9, r5
 8005a7e:	46b2      	mov	sl, r6
 8005a80:	eb19 0309 	adds.w	r3, r9, r9
 8005a84:	eb4a 040a 	adc.w	r4, sl, sl
 8005a88:	4699      	mov	r9, r3
 8005a8a:	46a2      	mov	sl, r4
 8005a8c:	eb19 0905 	adds.w	r9, r9, r5
 8005a90:	eb4a 0a06 	adc.w	sl, sl, r6
 8005a94:	f04f 0100 	mov.w	r1, #0
 8005a98:	f04f 0200 	mov.w	r2, #0
 8005a9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005aa0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005aa4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005aa8:	4689      	mov	r9, r1
 8005aaa:	4692      	mov	sl, r2
 8005aac:	eb19 0005 	adds.w	r0, r9, r5
 8005ab0:	eb4a 0106 	adc.w	r1, sl, r6
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	461d      	mov	r5, r3
 8005aba:	f04f 0600 	mov.w	r6, #0
 8005abe:	196b      	adds	r3, r5, r5
 8005ac0:	eb46 0406 	adc.w	r4, r6, r6
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	4623      	mov	r3, r4
 8005ac8:	f7fa ffe4 	bl	8000a94 <__aeabi_uldivmod>
 8005acc:	4603      	mov	r3, r0
 8005ace:	460c      	mov	r4, r1
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	4b8d      	ldr	r3, [pc, #564]	; (8005d08 <UART_SetConfig+0x3a0>)
 8005ad4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ad8:	095b      	lsrs	r3, r3, #5
 8005ada:	2164      	movs	r1, #100	; 0x64
 8005adc:	fb01 f303 	mul.w	r3, r1, r3
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	00db      	lsls	r3, r3, #3
 8005ae4:	3332      	adds	r3, #50	; 0x32
 8005ae6:	4a88      	ldr	r2, [pc, #544]	; (8005d08 <UART_SetConfig+0x3a0>)
 8005ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8005aec:	095b      	lsrs	r3, r3, #5
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005af4:	4498      	add	r8, r3
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	461d      	mov	r5, r3
 8005afa:	f04f 0600 	mov.w	r6, #0
 8005afe:	46a9      	mov	r9, r5
 8005b00:	46b2      	mov	sl, r6
 8005b02:	eb19 0309 	adds.w	r3, r9, r9
 8005b06:	eb4a 040a 	adc.w	r4, sl, sl
 8005b0a:	4699      	mov	r9, r3
 8005b0c:	46a2      	mov	sl, r4
 8005b0e:	eb19 0905 	adds.w	r9, r9, r5
 8005b12:	eb4a 0a06 	adc.w	sl, sl, r6
 8005b16:	f04f 0100 	mov.w	r1, #0
 8005b1a:	f04f 0200 	mov.w	r2, #0
 8005b1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b2a:	4689      	mov	r9, r1
 8005b2c:	4692      	mov	sl, r2
 8005b2e:	eb19 0005 	adds.w	r0, r9, r5
 8005b32:	eb4a 0106 	adc.w	r1, sl, r6
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	461d      	mov	r5, r3
 8005b3c:	f04f 0600 	mov.w	r6, #0
 8005b40:	196b      	adds	r3, r5, r5
 8005b42:	eb46 0406 	adc.w	r4, r6, r6
 8005b46:	461a      	mov	r2, r3
 8005b48:	4623      	mov	r3, r4
 8005b4a:	f7fa ffa3 	bl	8000a94 <__aeabi_uldivmod>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	460c      	mov	r4, r1
 8005b52:	461a      	mov	r2, r3
 8005b54:	4b6c      	ldr	r3, [pc, #432]	; (8005d08 <UART_SetConfig+0x3a0>)
 8005b56:	fba3 1302 	umull	r1, r3, r3, r2
 8005b5a:	095b      	lsrs	r3, r3, #5
 8005b5c:	2164      	movs	r1, #100	; 0x64
 8005b5e:	fb01 f303 	mul.w	r3, r1, r3
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	00db      	lsls	r3, r3, #3
 8005b66:	3332      	adds	r3, #50	; 0x32
 8005b68:	4a67      	ldr	r2, [pc, #412]	; (8005d08 <UART_SetConfig+0x3a0>)
 8005b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b6e:	095b      	lsrs	r3, r3, #5
 8005b70:	f003 0207 	and.w	r2, r3, #7
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4442      	add	r2, r8
 8005b7a:	609a      	str	r2, [r3, #8]
 8005b7c:	e27d      	b.n	800607a <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b7e:	f7fd ff59 	bl	8003a34 <HAL_RCC_GetPCLK1Freq>
 8005b82:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	461d      	mov	r5, r3
 8005b88:	f04f 0600 	mov.w	r6, #0
 8005b8c:	46a8      	mov	r8, r5
 8005b8e:	46b1      	mov	r9, r6
 8005b90:	eb18 0308 	adds.w	r3, r8, r8
 8005b94:	eb49 0409 	adc.w	r4, r9, r9
 8005b98:	4698      	mov	r8, r3
 8005b9a:	46a1      	mov	r9, r4
 8005b9c:	eb18 0805 	adds.w	r8, r8, r5
 8005ba0:	eb49 0906 	adc.w	r9, r9, r6
 8005ba4:	f04f 0100 	mov.w	r1, #0
 8005ba8:	f04f 0200 	mov.w	r2, #0
 8005bac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005bb0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005bb4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005bb8:	4688      	mov	r8, r1
 8005bba:	4691      	mov	r9, r2
 8005bbc:	eb18 0005 	adds.w	r0, r8, r5
 8005bc0:	eb49 0106 	adc.w	r1, r9, r6
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	461d      	mov	r5, r3
 8005bca:	f04f 0600 	mov.w	r6, #0
 8005bce:	196b      	adds	r3, r5, r5
 8005bd0:	eb46 0406 	adc.w	r4, r6, r6
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	4623      	mov	r3, r4
 8005bd8:	f7fa ff5c 	bl	8000a94 <__aeabi_uldivmod>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	460c      	mov	r4, r1
 8005be0:	461a      	mov	r2, r3
 8005be2:	4b49      	ldr	r3, [pc, #292]	; (8005d08 <UART_SetConfig+0x3a0>)
 8005be4:	fba3 2302 	umull	r2, r3, r3, r2
 8005be8:	095b      	lsrs	r3, r3, #5
 8005bea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	461d      	mov	r5, r3
 8005bf2:	f04f 0600 	mov.w	r6, #0
 8005bf6:	46a9      	mov	r9, r5
 8005bf8:	46b2      	mov	sl, r6
 8005bfa:	eb19 0309 	adds.w	r3, r9, r9
 8005bfe:	eb4a 040a 	adc.w	r4, sl, sl
 8005c02:	4699      	mov	r9, r3
 8005c04:	46a2      	mov	sl, r4
 8005c06:	eb19 0905 	adds.w	r9, r9, r5
 8005c0a:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c0e:	f04f 0100 	mov.w	r1, #0
 8005c12:	f04f 0200 	mov.w	r2, #0
 8005c16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c1a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c1e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c22:	4689      	mov	r9, r1
 8005c24:	4692      	mov	sl, r2
 8005c26:	eb19 0005 	adds.w	r0, r9, r5
 8005c2a:	eb4a 0106 	adc.w	r1, sl, r6
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	461d      	mov	r5, r3
 8005c34:	f04f 0600 	mov.w	r6, #0
 8005c38:	196b      	adds	r3, r5, r5
 8005c3a:	eb46 0406 	adc.w	r4, r6, r6
 8005c3e:	461a      	mov	r2, r3
 8005c40:	4623      	mov	r3, r4
 8005c42:	f7fa ff27 	bl	8000a94 <__aeabi_uldivmod>
 8005c46:	4603      	mov	r3, r0
 8005c48:	460c      	mov	r4, r1
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	4b2e      	ldr	r3, [pc, #184]	; (8005d08 <UART_SetConfig+0x3a0>)
 8005c4e:	fba3 1302 	umull	r1, r3, r3, r2
 8005c52:	095b      	lsrs	r3, r3, #5
 8005c54:	2164      	movs	r1, #100	; 0x64
 8005c56:	fb01 f303 	mul.w	r3, r1, r3
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	00db      	lsls	r3, r3, #3
 8005c5e:	3332      	adds	r3, #50	; 0x32
 8005c60:	4a29      	ldr	r2, [pc, #164]	; (8005d08 <UART_SetConfig+0x3a0>)
 8005c62:	fba2 2303 	umull	r2, r3, r2, r3
 8005c66:	095b      	lsrs	r3, r3, #5
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c6e:	4498      	add	r8, r3
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	461d      	mov	r5, r3
 8005c74:	f04f 0600 	mov.w	r6, #0
 8005c78:	46a9      	mov	r9, r5
 8005c7a:	46b2      	mov	sl, r6
 8005c7c:	eb19 0309 	adds.w	r3, r9, r9
 8005c80:	eb4a 040a 	adc.w	r4, sl, sl
 8005c84:	4699      	mov	r9, r3
 8005c86:	46a2      	mov	sl, r4
 8005c88:	eb19 0905 	adds.w	r9, r9, r5
 8005c8c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c90:	f04f 0100 	mov.w	r1, #0
 8005c94:	f04f 0200 	mov.w	r2, #0
 8005c98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ca0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ca4:	4689      	mov	r9, r1
 8005ca6:	4692      	mov	sl, r2
 8005ca8:	eb19 0005 	adds.w	r0, r9, r5
 8005cac:	eb4a 0106 	adc.w	r1, sl, r6
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	461d      	mov	r5, r3
 8005cb6:	f04f 0600 	mov.w	r6, #0
 8005cba:	196b      	adds	r3, r5, r5
 8005cbc:	eb46 0406 	adc.w	r4, r6, r6
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	4623      	mov	r3, r4
 8005cc4:	f7fa fee6 	bl	8000a94 <__aeabi_uldivmod>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	460c      	mov	r4, r1
 8005ccc:	461a      	mov	r2, r3
 8005cce:	4b0e      	ldr	r3, [pc, #56]	; (8005d08 <UART_SetConfig+0x3a0>)
 8005cd0:	fba3 1302 	umull	r1, r3, r3, r2
 8005cd4:	095b      	lsrs	r3, r3, #5
 8005cd6:	2164      	movs	r1, #100	; 0x64
 8005cd8:	fb01 f303 	mul.w	r3, r1, r3
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	00db      	lsls	r3, r3, #3
 8005ce0:	3332      	adds	r3, #50	; 0x32
 8005ce2:	4a09      	ldr	r2, [pc, #36]	; (8005d08 <UART_SetConfig+0x3a0>)
 8005ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce8:	095b      	lsrs	r3, r3, #5
 8005cea:	f003 0207 	and.w	r2, r3, #7
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4442      	add	r2, r8
 8005cf4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005cf6:	e1c0      	b.n	800607a <UART_SetConfig+0x712>
 8005cf8:	40011000 	.word	0x40011000
 8005cfc:	40011400 	.word	0x40011400
 8005d00:	40011800 	.word	0x40011800
 8005d04:	40011c00 	.word	0x40011c00
 8005d08:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4adc      	ldr	r2, [pc, #880]	; (8006084 <UART_SetConfig+0x71c>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d00f      	beq.n	8005d36 <UART_SetConfig+0x3ce>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4adb      	ldr	r2, [pc, #876]	; (8006088 <UART_SetConfig+0x720>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d00a      	beq.n	8005d36 <UART_SetConfig+0x3ce>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4ad9      	ldr	r2, [pc, #868]	; (800608c <UART_SetConfig+0x724>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d005      	beq.n	8005d36 <UART_SetConfig+0x3ce>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4ad8      	ldr	r2, [pc, #864]	; (8006090 <UART_SetConfig+0x728>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	f040 80d1 	bne.w	8005ed8 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d36:	f7fd fe91 	bl	8003a5c <HAL_RCC_GetPCLK2Freq>
 8005d3a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	469a      	mov	sl, r3
 8005d40:	f04f 0b00 	mov.w	fp, #0
 8005d44:	46d0      	mov	r8, sl
 8005d46:	46d9      	mov	r9, fp
 8005d48:	eb18 0308 	adds.w	r3, r8, r8
 8005d4c:	eb49 0409 	adc.w	r4, r9, r9
 8005d50:	4698      	mov	r8, r3
 8005d52:	46a1      	mov	r9, r4
 8005d54:	eb18 080a 	adds.w	r8, r8, sl
 8005d58:	eb49 090b 	adc.w	r9, r9, fp
 8005d5c:	f04f 0100 	mov.w	r1, #0
 8005d60:	f04f 0200 	mov.w	r2, #0
 8005d64:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d68:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d6c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d70:	4688      	mov	r8, r1
 8005d72:	4691      	mov	r9, r2
 8005d74:	eb1a 0508 	adds.w	r5, sl, r8
 8005d78:	eb4b 0609 	adc.w	r6, fp, r9
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	4619      	mov	r1, r3
 8005d82:	f04f 0200 	mov.w	r2, #0
 8005d86:	f04f 0300 	mov.w	r3, #0
 8005d8a:	f04f 0400 	mov.w	r4, #0
 8005d8e:	0094      	lsls	r4, r2, #2
 8005d90:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d94:	008b      	lsls	r3, r1, #2
 8005d96:	461a      	mov	r2, r3
 8005d98:	4623      	mov	r3, r4
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	4631      	mov	r1, r6
 8005d9e:	f7fa fe79 	bl	8000a94 <__aeabi_uldivmod>
 8005da2:	4603      	mov	r3, r0
 8005da4:	460c      	mov	r4, r1
 8005da6:	461a      	mov	r2, r3
 8005da8:	4bba      	ldr	r3, [pc, #744]	; (8006094 <UART_SetConfig+0x72c>)
 8005daa:	fba3 2302 	umull	r2, r3, r3, r2
 8005dae:	095b      	lsrs	r3, r3, #5
 8005db0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	469b      	mov	fp, r3
 8005db8:	f04f 0c00 	mov.w	ip, #0
 8005dbc:	46d9      	mov	r9, fp
 8005dbe:	46e2      	mov	sl, ip
 8005dc0:	eb19 0309 	adds.w	r3, r9, r9
 8005dc4:	eb4a 040a 	adc.w	r4, sl, sl
 8005dc8:	4699      	mov	r9, r3
 8005dca:	46a2      	mov	sl, r4
 8005dcc:	eb19 090b 	adds.w	r9, r9, fp
 8005dd0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005dd4:	f04f 0100 	mov.w	r1, #0
 8005dd8:	f04f 0200 	mov.w	r2, #0
 8005ddc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005de0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005de4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005de8:	4689      	mov	r9, r1
 8005dea:	4692      	mov	sl, r2
 8005dec:	eb1b 0509 	adds.w	r5, fp, r9
 8005df0:	eb4c 060a 	adc.w	r6, ip, sl
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	4619      	mov	r1, r3
 8005dfa:	f04f 0200 	mov.w	r2, #0
 8005dfe:	f04f 0300 	mov.w	r3, #0
 8005e02:	f04f 0400 	mov.w	r4, #0
 8005e06:	0094      	lsls	r4, r2, #2
 8005e08:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e0c:	008b      	lsls	r3, r1, #2
 8005e0e:	461a      	mov	r2, r3
 8005e10:	4623      	mov	r3, r4
 8005e12:	4628      	mov	r0, r5
 8005e14:	4631      	mov	r1, r6
 8005e16:	f7fa fe3d 	bl	8000a94 <__aeabi_uldivmod>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	460c      	mov	r4, r1
 8005e1e:	461a      	mov	r2, r3
 8005e20:	4b9c      	ldr	r3, [pc, #624]	; (8006094 <UART_SetConfig+0x72c>)
 8005e22:	fba3 1302 	umull	r1, r3, r3, r2
 8005e26:	095b      	lsrs	r3, r3, #5
 8005e28:	2164      	movs	r1, #100	; 0x64
 8005e2a:	fb01 f303 	mul.w	r3, r1, r3
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	011b      	lsls	r3, r3, #4
 8005e32:	3332      	adds	r3, #50	; 0x32
 8005e34:	4a97      	ldr	r2, [pc, #604]	; (8006094 <UART_SetConfig+0x72c>)
 8005e36:	fba2 2303 	umull	r2, r3, r2, r3
 8005e3a:	095b      	lsrs	r3, r3, #5
 8005e3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e40:	4498      	add	r8, r3
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	469b      	mov	fp, r3
 8005e46:	f04f 0c00 	mov.w	ip, #0
 8005e4a:	46d9      	mov	r9, fp
 8005e4c:	46e2      	mov	sl, ip
 8005e4e:	eb19 0309 	adds.w	r3, r9, r9
 8005e52:	eb4a 040a 	adc.w	r4, sl, sl
 8005e56:	4699      	mov	r9, r3
 8005e58:	46a2      	mov	sl, r4
 8005e5a:	eb19 090b 	adds.w	r9, r9, fp
 8005e5e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005e62:	f04f 0100 	mov.w	r1, #0
 8005e66:	f04f 0200 	mov.w	r2, #0
 8005e6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e6e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e72:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e76:	4689      	mov	r9, r1
 8005e78:	4692      	mov	sl, r2
 8005e7a:	eb1b 0509 	adds.w	r5, fp, r9
 8005e7e:	eb4c 060a 	adc.w	r6, ip, sl
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	4619      	mov	r1, r3
 8005e88:	f04f 0200 	mov.w	r2, #0
 8005e8c:	f04f 0300 	mov.w	r3, #0
 8005e90:	f04f 0400 	mov.w	r4, #0
 8005e94:	0094      	lsls	r4, r2, #2
 8005e96:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e9a:	008b      	lsls	r3, r1, #2
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	4623      	mov	r3, r4
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	4631      	mov	r1, r6
 8005ea4:	f7fa fdf6 	bl	8000a94 <__aeabi_uldivmod>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	460c      	mov	r4, r1
 8005eac:	461a      	mov	r2, r3
 8005eae:	4b79      	ldr	r3, [pc, #484]	; (8006094 <UART_SetConfig+0x72c>)
 8005eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8005eb4:	095b      	lsrs	r3, r3, #5
 8005eb6:	2164      	movs	r1, #100	; 0x64
 8005eb8:	fb01 f303 	mul.w	r3, r1, r3
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	011b      	lsls	r3, r3, #4
 8005ec0:	3332      	adds	r3, #50	; 0x32
 8005ec2:	4a74      	ldr	r2, [pc, #464]	; (8006094 <UART_SetConfig+0x72c>)
 8005ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec8:	095b      	lsrs	r3, r3, #5
 8005eca:	f003 020f 	and.w	r2, r3, #15
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4442      	add	r2, r8
 8005ed4:	609a      	str	r2, [r3, #8]
 8005ed6:	e0d0      	b.n	800607a <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ed8:	f7fd fdac 	bl	8003a34 <HAL_RCC_GetPCLK1Freq>
 8005edc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	469a      	mov	sl, r3
 8005ee2:	f04f 0b00 	mov.w	fp, #0
 8005ee6:	46d0      	mov	r8, sl
 8005ee8:	46d9      	mov	r9, fp
 8005eea:	eb18 0308 	adds.w	r3, r8, r8
 8005eee:	eb49 0409 	adc.w	r4, r9, r9
 8005ef2:	4698      	mov	r8, r3
 8005ef4:	46a1      	mov	r9, r4
 8005ef6:	eb18 080a 	adds.w	r8, r8, sl
 8005efa:	eb49 090b 	adc.w	r9, r9, fp
 8005efe:	f04f 0100 	mov.w	r1, #0
 8005f02:	f04f 0200 	mov.w	r2, #0
 8005f06:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f0a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f0e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f12:	4688      	mov	r8, r1
 8005f14:	4691      	mov	r9, r2
 8005f16:	eb1a 0508 	adds.w	r5, sl, r8
 8005f1a:	eb4b 0609 	adc.w	r6, fp, r9
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	4619      	mov	r1, r3
 8005f24:	f04f 0200 	mov.w	r2, #0
 8005f28:	f04f 0300 	mov.w	r3, #0
 8005f2c:	f04f 0400 	mov.w	r4, #0
 8005f30:	0094      	lsls	r4, r2, #2
 8005f32:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f36:	008b      	lsls	r3, r1, #2
 8005f38:	461a      	mov	r2, r3
 8005f3a:	4623      	mov	r3, r4
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	4631      	mov	r1, r6
 8005f40:	f7fa fda8 	bl	8000a94 <__aeabi_uldivmod>
 8005f44:	4603      	mov	r3, r0
 8005f46:	460c      	mov	r4, r1
 8005f48:	461a      	mov	r2, r3
 8005f4a:	4b52      	ldr	r3, [pc, #328]	; (8006094 <UART_SetConfig+0x72c>)
 8005f4c:	fba3 2302 	umull	r2, r3, r3, r2
 8005f50:	095b      	lsrs	r3, r3, #5
 8005f52:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	469b      	mov	fp, r3
 8005f5a:	f04f 0c00 	mov.w	ip, #0
 8005f5e:	46d9      	mov	r9, fp
 8005f60:	46e2      	mov	sl, ip
 8005f62:	eb19 0309 	adds.w	r3, r9, r9
 8005f66:	eb4a 040a 	adc.w	r4, sl, sl
 8005f6a:	4699      	mov	r9, r3
 8005f6c:	46a2      	mov	sl, r4
 8005f6e:	eb19 090b 	adds.w	r9, r9, fp
 8005f72:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f76:	f04f 0100 	mov.w	r1, #0
 8005f7a:	f04f 0200 	mov.w	r2, #0
 8005f7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f8a:	4689      	mov	r9, r1
 8005f8c:	4692      	mov	sl, r2
 8005f8e:	eb1b 0509 	adds.w	r5, fp, r9
 8005f92:	eb4c 060a 	adc.w	r6, ip, sl
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	f04f 0200 	mov.w	r2, #0
 8005fa0:	f04f 0300 	mov.w	r3, #0
 8005fa4:	f04f 0400 	mov.w	r4, #0
 8005fa8:	0094      	lsls	r4, r2, #2
 8005faa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005fae:	008b      	lsls	r3, r1, #2
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	4623      	mov	r3, r4
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	4631      	mov	r1, r6
 8005fb8:	f7fa fd6c 	bl	8000a94 <__aeabi_uldivmod>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	460c      	mov	r4, r1
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	4b34      	ldr	r3, [pc, #208]	; (8006094 <UART_SetConfig+0x72c>)
 8005fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8005fc8:	095b      	lsrs	r3, r3, #5
 8005fca:	2164      	movs	r1, #100	; 0x64
 8005fcc:	fb01 f303 	mul.w	r3, r1, r3
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	011b      	lsls	r3, r3, #4
 8005fd4:	3332      	adds	r3, #50	; 0x32
 8005fd6:	4a2f      	ldr	r2, [pc, #188]	; (8006094 <UART_SetConfig+0x72c>)
 8005fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fdc:	095b      	lsrs	r3, r3, #5
 8005fde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fe2:	4498      	add	r8, r3
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	469b      	mov	fp, r3
 8005fe8:	f04f 0c00 	mov.w	ip, #0
 8005fec:	46d9      	mov	r9, fp
 8005fee:	46e2      	mov	sl, ip
 8005ff0:	eb19 0309 	adds.w	r3, r9, r9
 8005ff4:	eb4a 040a 	adc.w	r4, sl, sl
 8005ff8:	4699      	mov	r9, r3
 8005ffa:	46a2      	mov	sl, r4
 8005ffc:	eb19 090b 	adds.w	r9, r9, fp
 8006000:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006004:	f04f 0100 	mov.w	r1, #0
 8006008:	f04f 0200 	mov.w	r2, #0
 800600c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006010:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006014:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006018:	4689      	mov	r9, r1
 800601a:	4692      	mov	sl, r2
 800601c:	eb1b 0509 	adds.w	r5, fp, r9
 8006020:	eb4c 060a 	adc.w	r6, ip, sl
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	4619      	mov	r1, r3
 800602a:	f04f 0200 	mov.w	r2, #0
 800602e:	f04f 0300 	mov.w	r3, #0
 8006032:	f04f 0400 	mov.w	r4, #0
 8006036:	0094      	lsls	r4, r2, #2
 8006038:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800603c:	008b      	lsls	r3, r1, #2
 800603e:	461a      	mov	r2, r3
 8006040:	4623      	mov	r3, r4
 8006042:	4628      	mov	r0, r5
 8006044:	4631      	mov	r1, r6
 8006046:	f7fa fd25 	bl	8000a94 <__aeabi_uldivmod>
 800604a:	4603      	mov	r3, r0
 800604c:	460c      	mov	r4, r1
 800604e:	461a      	mov	r2, r3
 8006050:	4b10      	ldr	r3, [pc, #64]	; (8006094 <UART_SetConfig+0x72c>)
 8006052:	fba3 1302 	umull	r1, r3, r3, r2
 8006056:	095b      	lsrs	r3, r3, #5
 8006058:	2164      	movs	r1, #100	; 0x64
 800605a:	fb01 f303 	mul.w	r3, r1, r3
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	011b      	lsls	r3, r3, #4
 8006062:	3332      	adds	r3, #50	; 0x32
 8006064:	4a0b      	ldr	r2, [pc, #44]	; (8006094 <UART_SetConfig+0x72c>)
 8006066:	fba2 2303 	umull	r2, r3, r2, r3
 800606a:	095b      	lsrs	r3, r3, #5
 800606c:	f003 020f 	and.w	r2, r3, #15
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4442      	add	r2, r8
 8006076:	609a      	str	r2, [r3, #8]
}
 8006078:	e7ff      	b.n	800607a <UART_SetConfig+0x712>
 800607a:	bf00      	nop
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006084:	40011000 	.word	0x40011000
 8006088:	40011400 	.word	0x40011400
 800608c:	40011800 	.word	0x40011800
 8006090:	40011c00 	.word	0x40011c00
 8006094:	51eb851f 	.word	0x51eb851f

08006098 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006098:	b084      	sub	sp, #16
 800609a:	b480      	push	{r7}
 800609c:	b085      	sub	sp, #20
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
 80060a2:	f107 001c 	add.w	r0, r7, #28
 80060a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80060aa:	2300      	movs	r3, #0
 80060ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80060ae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80060b0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80060b2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80060b6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80060b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80060ba:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80060bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80060be:	431a      	orrs	r2, r3
             Init.ClockDiv
 80060c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80060c2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80060d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	431a      	orrs	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3714      	adds	r7, #20
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	b004      	add	sp, #16
 80060ec:	4770      	bx	lr

080060ee <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b082      	sub	sp, #8
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2203      	movs	r2, #3
 80060fa:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80060fc:	2002      	movs	r0, #2
 80060fe:	f7fb ff23 	bl	8001f48 <HAL_Delay>
  
  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3708      	adds	r7, #8
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0303 	and.w	r3, r3, #3
}
 800611c:	4618      	mov	r0, r3
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006132:	2300      	movs	r3, #0
 8006134:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006146:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800614c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006152:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	4313      	orrs	r3, r2
 8006158:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006162:	f023 030f 	bic.w	r3, r3, #15
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	431a      	orrs	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	b2db      	uxtb	r3, r3
}
 800618a:	4618      	mov	r0, r3
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006196:	b480      	push	{r7}
 8006198:	b085      	sub	sp, #20
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
 800619e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	3314      	adds	r3, #20
 80061a4:	461a      	mov	r2, r3
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	4413      	add	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
}  
 80061b0:	4618      	mov	r0, r3
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b08a      	sub	sp, #40	; 0x28
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80061cc:	2307      	movs	r3, #7
 80061ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80061d0:	2340      	movs	r3, #64	; 0x40
 80061d2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061d4:	2300      	movs	r3, #0
 80061d6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061dc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061de:	f107 0310 	add.w	r3, r7, #16
 80061e2:	4619      	mov	r1, r3
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f7ff ff9f 	bl	8006128 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80061ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80061ee:	2107      	movs	r1, #7
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f000 f90f 	bl	8006414 <SDMMC_GetCmdResp1>
 80061f6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3728      	adds	r7, #40	; 0x28
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b088      	sub	sp, #32
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800620a:	2300      	movs	r3, #0
 800620c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800620e:	2300      	movs	r3, #0
 8006210:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006212:	2300      	movs	r3, #0
 8006214:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006216:	2300      	movs	r3, #0
 8006218:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800621a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800621e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006220:	f107 0308 	add.w	r3, r7, #8
 8006224:	4619      	mov	r1, r3
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f7ff ff7e 	bl	8006128 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f8c9 	bl	80063c4 <SDMMC_GetCmdError>
 8006232:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006234:	69fb      	ldr	r3, [r7, #28]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3720      	adds	r7, #32
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b088      	sub	sp, #32
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006246:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800624a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800624c:	2308      	movs	r3, #8
 800624e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006250:	2340      	movs	r3, #64	; 0x40
 8006252:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006254:	2300      	movs	r3, #0
 8006256:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800625c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800625e:	f107 0308 	add.w	r3, r7, #8
 8006262:	4619      	mov	r1, r3
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f7ff ff5f 	bl	8006128 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fab2 	bl	80067d4 <SDMMC_GetCmdResp7>
 8006270:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006272:	69fb      	ldr	r3, [r7, #28]
}
 8006274:	4618      	mov	r0, r3
 8006276:	3720      	adds	r7, #32
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b088      	sub	sp, #32
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800628a:	2337      	movs	r3, #55	; 0x37
 800628c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800628e:	2340      	movs	r3, #64	; 0x40
 8006290:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006292:	2300      	movs	r3, #0
 8006294:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800629a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800629c:	f107 0308 	add.w	r3, r7, #8
 80062a0:	4619      	mov	r1, r3
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f7ff ff40 	bl	8006128 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80062a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ac:	2137      	movs	r1, #55	; 0x37
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f8b0 	bl	8006414 <SDMMC_GetCmdResp1>
 80062b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062b6:	69fb      	ldr	r3, [r7, #28]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3720      	adds	r7, #32
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b088      	sub	sp, #32
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80062d6:	2329      	movs	r3, #41	; 0x29
 80062d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80062da:	2340      	movs	r3, #64	; 0x40
 80062dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80062de:	2300      	movs	r3, #0
 80062e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80062e8:	f107 0308 	add.w	r3, r7, #8
 80062ec:	4619      	mov	r1, r3
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7ff ff1a 	bl	8006128 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f9bf 	bl	8006678 <SDMMC_GetCmdResp3>
 80062fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062fc:	69fb      	ldr	r3, [r7, #28]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3720      	adds	r7, #32
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b088      	sub	sp, #32
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800630e:	2300      	movs	r3, #0
 8006310:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006312:	2302      	movs	r3, #2
 8006314:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006316:	23c0      	movs	r3, #192	; 0xc0
 8006318:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800631a:	2300      	movs	r3, #0
 800631c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800631e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006322:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006324:	f107 0308 	add.w	r3, r7, #8
 8006328:	4619      	mov	r1, r3
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f7ff fefc 	bl	8006128 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 f95b 	bl	80065ec <SDMMC_GetCmdResp2>
 8006336:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006338:	69fb      	ldr	r3, [r7, #28]
}
 800633a:	4618      	mov	r0, r3
 800633c:	3720      	adds	r7, #32
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b088      	sub	sp, #32
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006350:	2309      	movs	r3, #9
 8006352:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006354:	23c0      	movs	r3, #192	; 0xc0
 8006356:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006358:	2300      	movs	r3, #0
 800635a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800635c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006360:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006362:	f107 0308 	add.w	r3, r7, #8
 8006366:	4619      	mov	r1, r3
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f7ff fedd 	bl	8006128 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f93c 	bl	80065ec <SDMMC_GetCmdResp2>
 8006374:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006376:	69fb      	ldr	r3, [r7, #28]
}
 8006378:	4618      	mov	r0, r3
 800637a:	3720      	adds	r7, #32
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b088      	sub	sp, #32
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800638e:	2303      	movs	r3, #3
 8006390:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006392:	2340      	movs	r3, #64	; 0x40
 8006394:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006396:	2300      	movs	r3, #0
 8006398:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800639a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800639e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80063a0:	f107 0308 	add.w	r3, r7, #8
 80063a4:	4619      	mov	r1, r3
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f7ff febe 	bl	8006128 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80063ac:	683a      	ldr	r2, [r7, #0]
 80063ae:	2103      	movs	r1, #3
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 f99b 	bl	80066ec <SDMMC_GetCmdResp6>
 80063b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063b8:	69fb      	ldr	r3, [r7, #28]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3720      	adds	r7, #32
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
	...

080063c4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80063c4:	b490      	push	{r4, r7}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80063cc:	4b0f      	ldr	r3, [pc, #60]	; (800640c <SDMMC_GetCmdError+0x48>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a0f      	ldr	r2, [pc, #60]	; (8006410 <SDMMC_GetCmdError+0x4c>)
 80063d2:	fba2 2303 	umull	r2, r3, r2, r3
 80063d6:	0a5b      	lsrs	r3, r3, #9
 80063d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80063dc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80063e0:	4623      	mov	r3, r4
 80063e2:	1e5c      	subs	r4, r3, #1
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d102      	bne.n	80063ee <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80063e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80063ec:	e009      	b.n	8006402 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d0f2      	beq.n	80063e0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	22c5      	movs	r2, #197	; 0xc5
 80063fe:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3708      	adds	r7, #8
 8006406:	46bd      	mov	sp, r7
 8006408:	bc90      	pop	{r4, r7}
 800640a:	4770      	bx	lr
 800640c:	20000020 	.word	0x20000020
 8006410:	10624dd3 	.word	0x10624dd3

08006414 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006414:	b590      	push	{r4, r7, lr}
 8006416:	b087      	sub	sp, #28
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	460b      	mov	r3, r1
 800641e:	607a      	str	r2, [r7, #4]
 8006420:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006422:	4b6f      	ldr	r3, [pc, #444]	; (80065e0 <SDMMC_GetCmdResp1+0x1cc>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a6f      	ldr	r2, [pc, #444]	; (80065e4 <SDMMC_GetCmdResp1+0x1d0>)
 8006428:	fba2 2303 	umull	r2, r3, r2, r3
 800642c:	0a5b      	lsrs	r3, r3, #9
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006434:	4623      	mov	r3, r4
 8006436:	1e5c      	subs	r4, r3, #1
 8006438:	2b00      	cmp	r3, #0
 800643a:	d102      	bne.n	8006442 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800643c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006440:	e0c9      	b.n	80065d6 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006446:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800644e:	2b00      	cmp	r3, #0
 8006450:	d0f0      	beq.n	8006434 <SDMMC_GetCmdResp1+0x20>
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1eb      	bne.n	8006434 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006460:	f003 0304 	and.w	r3, r3, #4
 8006464:	2b00      	cmp	r3, #0
 8006466:	d004      	beq.n	8006472 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2204      	movs	r2, #4
 800646c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800646e:	2304      	movs	r3, #4
 8006470:	e0b1      	b.n	80065d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b00      	cmp	r3, #0
 800647c:	d004      	beq.n	8006488 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2201      	movs	r2, #1
 8006482:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006484:	2301      	movs	r3, #1
 8006486:	e0a6      	b.n	80065d6 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	22c5      	movs	r2, #197	; 0xc5
 800648c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f7ff fe74 	bl	800617c <SDIO_GetCommandResponse>
 8006494:	4603      	mov	r3, r0
 8006496:	461a      	mov	r2, r3
 8006498:	7afb      	ldrb	r3, [r7, #11]
 800649a:	4293      	cmp	r3, r2
 800649c:	d001      	beq.n	80064a2 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800649e:	2301      	movs	r3, #1
 80064a0:	e099      	b.n	80065d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80064a2:	2100      	movs	r1, #0
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f7ff fe76 	bl	8006196 <SDIO_GetResponse>
 80064aa:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	4b4e      	ldr	r3, [pc, #312]	; (80065e8 <SDMMC_GetCmdResp1+0x1d4>)
 80064b0:	4013      	ands	r3, r2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d101      	bne.n	80064ba <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80064b6:	2300      	movs	r3, #0
 80064b8:	e08d      	b.n	80065d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	da02      	bge.n	80064c6 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80064c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064c4:	e087      	b.n	80065d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d001      	beq.n	80064d4 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80064d0:	2340      	movs	r3, #64	; 0x40
 80064d2:	e080      	b.n	80065d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80064de:	2380      	movs	r3, #128	; 0x80
 80064e0:	e079      	b.n	80065d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80064ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064f0:	e071      	b.n	80065d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80064fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006500:	e069      	b.n	80065d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006508:	2b00      	cmp	r3, #0
 800650a:	d002      	beq.n	8006512 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800650c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006510:	e061      	b.n	80065d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d002      	beq.n	8006522 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800651c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006520:	e059      	b.n	80065d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006528:	2b00      	cmp	r3, #0
 800652a:	d002      	beq.n	8006532 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800652c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006530:	e051      	b.n	80065d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d002      	beq.n	8006542 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800653c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006540:	e049      	b.n	80065d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d002      	beq.n	8006552 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800654c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006550:	e041      	b.n	80065d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d002      	beq.n	8006562 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800655c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006560:	e039      	b.n	80065d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d002      	beq.n	8006572 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800656c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006570:	e031      	b.n	80065d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006578:	2b00      	cmp	r3, #0
 800657a:	d002      	beq.n	8006582 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800657c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006580:	e029      	b.n	80065d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d002      	beq.n	8006592 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800658c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006590:	e021      	b.n	80065d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d002      	beq.n	80065a2 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800659c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80065a0:	e019      	b.n	80065d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d002      	beq.n	80065b2 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80065ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80065b0:	e011      	b.n	80065d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d002      	beq.n	80065c2 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80065bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80065c0:	e009      	b.n	80065d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	f003 0308 	and.w	r3, r3, #8
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d002      	beq.n	80065d2 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80065cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80065d0:	e001      	b.n	80065d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80065d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	371c      	adds	r7, #28
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd90      	pop	{r4, r7, pc}
 80065de:	bf00      	nop
 80065e0:	20000020 	.word	0x20000020
 80065e4:	10624dd3 	.word	0x10624dd3
 80065e8:	fdffe008 	.word	0xfdffe008

080065ec <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80065ec:	b490      	push	{r4, r7}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80065f4:	4b1e      	ldr	r3, [pc, #120]	; (8006670 <SDMMC_GetCmdResp2+0x84>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a1e      	ldr	r2, [pc, #120]	; (8006674 <SDMMC_GetCmdResp2+0x88>)
 80065fa:	fba2 2303 	umull	r2, r3, r2, r3
 80065fe:	0a5b      	lsrs	r3, r3, #9
 8006600:	f241 3288 	movw	r2, #5000	; 0x1388
 8006604:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006608:	4623      	mov	r3, r4
 800660a:	1e5c      	subs	r4, r3, #1
 800660c:	2b00      	cmp	r3, #0
 800660e:	d102      	bne.n	8006616 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006610:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006614:	e026      	b.n	8006664 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800661a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006622:	2b00      	cmp	r3, #0
 8006624:	d0f0      	beq.n	8006608 <SDMMC_GetCmdResp2+0x1c>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1eb      	bne.n	8006608 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006634:	f003 0304 	and.w	r3, r3, #4
 8006638:	2b00      	cmp	r3, #0
 800663a:	d004      	beq.n	8006646 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2204      	movs	r2, #4
 8006640:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006642:	2304      	movs	r3, #4
 8006644:	e00e      	b.n	8006664 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800664a:	f003 0301 	and.w	r3, r3, #1
 800664e:	2b00      	cmp	r3, #0
 8006650:	d004      	beq.n	800665c <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2201      	movs	r2, #1
 8006656:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006658:	2301      	movs	r3, #1
 800665a:	e003      	b.n	8006664 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	22c5      	movs	r2, #197	; 0xc5
 8006660:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bc90      	pop	{r4, r7}
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	20000020 	.word	0x20000020
 8006674:	10624dd3 	.word	0x10624dd3

08006678 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006678:	b490      	push	{r4, r7}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006680:	4b18      	ldr	r3, [pc, #96]	; (80066e4 <SDMMC_GetCmdResp3+0x6c>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a18      	ldr	r2, [pc, #96]	; (80066e8 <SDMMC_GetCmdResp3+0x70>)
 8006686:	fba2 2303 	umull	r2, r3, r2, r3
 800668a:	0a5b      	lsrs	r3, r3, #9
 800668c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006690:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006694:	4623      	mov	r3, r4
 8006696:	1e5c      	subs	r4, r3, #1
 8006698:	2b00      	cmp	r3, #0
 800669a:	d102      	bne.n	80066a2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800669c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80066a0:	e01b      	b.n	80066da <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d0f0      	beq.n	8006694 <SDMMC_GetCmdResp3+0x1c>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1eb      	bne.n	8006694 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c0:	f003 0304 	and.w	r3, r3, #4
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d004      	beq.n	80066d2 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2204      	movs	r2, #4
 80066cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80066ce:	2304      	movs	r3, #4
 80066d0:	e003      	b.n	80066da <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	22c5      	movs	r2, #197	; 0xc5
 80066d6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bc90      	pop	{r4, r7}
 80066e2:	4770      	bx	lr
 80066e4:	20000020 	.word	0x20000020
 80066e8:	10624dd3 	.word	0x10624dd3

080066ec <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80066ec:	b590      	push	{r4, r7, lr}
 80066ee:	b087      	sub	sp, #28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	460b      	mov	r3, r1
 80066f6:	607a      	str	r2, [r7, #4]
 80066f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80066fa:	4b34      	ldr	r3, [pc, #208]	; (80067cc <SDMMC_GetCmdResp6+0xe0>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a34      	ldr	r2, [pc, #208]	; (80067d0 <SDMMC_GetCmdResp6+0xe4>)
 8006700:	fba2 2303 	umull	r2, r3, r2, r3
 8006704:	0a5b      	lsrs	r3, r3, #9
 8006706:	f241 3288 	movw	r2, #5000	; 0x1388
 800670a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800670e:	4623      	mov	r3, r4
 8006710:	1e5c      	subs	r4, r3, #1
 8006712:	2b00      	cmp	r3, #0
 8006714:	d102      	bne.n	800671c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006716:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800671a:	e052      	b.n	80067c2 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006720:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006728:	2b00      	cmp	r3, #0
 800672a:	d0f0      	beq.n	800670e <SDMMC_GetCmdResp6+0x22>
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1eb      	bne.n	800670e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800673a:	f003 0304 	and.w	r3, r3, #4
 800673e:	2b00      	cmp	r3, #0
 8006740:	d004      	beq.n	800674c <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2204      	movs	r2, #4
 8006746:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006748:	2304      	movs	r3, #4
 800674a:	e03a      	b.n	80067c2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006750:	f003 0301 	and.w	r3, r3, #1
 8006754:	2b00      	cmp	r3, #0
 8006756:	d004      	beq.n	8006762 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2201      	movs	r2, #1
 800675c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800675e:	2301      	movs	r3, #1
 8006760:	e02f      	b.n	80067c2 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f7ff fd0a 	bl	800617c <SDIO_GetCommandResponse>
 8006768:	4603      	mov	r3, r0
 800676a:	461a      	mov	r2, r3
 800676c:	7afb      	ldrb	r3, [r7, #11]
 800676e:	4293      	cmp	r3, r2
 8006770:	d001      	beq.n	8006776 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006772:	2301      	movs	r3, #1
 8006774:	e025      	b.n	80067c2 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	22c5      	movs	r2, #197	; 0xc5
 800677a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800677c:	2100      	movs	r1, #0
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f7ff fd09 	bl	8006196 <SDIO_GetResponse>
 8006784:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d106      	bne.n	800679e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	0c1b      	lsrs	r3, r3, #16
 8006794:	b29a      	uxth	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800679a:	2300      	movs	r3, #0
 800679c:	e011      	b.n	80067c2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d002      	beq.n	80067ae <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80067a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80067ac:	e009      	b.n	80067c2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d002      	beq.n	80067be <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80067b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067bc:	e001      	b.n	80067c2 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80067be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	371c      	adds	r7, #28
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd90      	pop	{r4, r7, pc}
 80067ca:	bf00      	nop
 80067cc:	20000020 	.word	0x20000020
 80067d0:	10624dd3 	.word	0x10624dd3

080067d4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80067d4:	b490      	push	{r4, r7}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80067dc:	4b21      	ldr	r3, [pc, #132]	; (8006864 <SDMMC_GetCmdResp7+0x90>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a21      	ldr	r2, [pc, #132]	; (8006868 <SDMMC_GetCmdResp7+0x94>)
 80067e2:	fba2 2303 	umull	r2, r3, r2, r3
 80067e6:	0a5b      	lsrs	r3, r3, #9
 80067e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80067f0:	4623      	mov	r3, r4
 80067f2:	1e5c      	subs	r4, r3, #1
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d102      	bne.n	80067fe <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80067f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80067fc:	e02c      	b.n	8006858 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006802:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800680a:	2b00      	cmp	r3, #0
 800680c:	d0f0      	beq.n	80067f0 <SDMMC_GetCmdResp7+0x1c>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1eb      	bne.n	80067f0 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800681c:	f003 0304 	and.w	r3, r3, #4
 8006820:	2b00      	cmp	r3, #0
 8006822:	d004      	beq.n	800682e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2204      	movs	r2, #4
 8006828:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800682a:	2304      	movs	r3, #4
 800682c:	e014      	b.n	8006858 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b00      	cmp	r3, #0
 8006838:	d004      	beq.n	8006844 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2201      	movs	r2, #1
 800683e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006840:	2301      	movs	r3, #1
 8006842:	e009      	b.n	8006858 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800684c:	2b00      	cmp	r3, #0
 800684e:	d002      	beq.n	8006856 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2240      	movs	r2, #64	; 0x40
 8006854:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006856:	2300      	movs	r3, #0
  
}
 8006858:	4618      	mov	r0, r3
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bc90      	pop	{r4, r7}
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	20000020 	.word	0x20000020
 8006868:	10624dd3 	.word	0x10624dd3

0800686c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800686c:	b084      	sub	sp, #16
 800686e:	b580      	push	{r7, lr}
 8006870:	b084      	sub	sp, #16
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
 8006876:	f107 001c 	add.w	r0, r7, #28
 800687a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800687e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006880:	2b01      	cmp	r3, #1
 8006882:	d122      	bne.n	80068ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006888:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006898:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80068ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d105      	bne.n	80068be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 fa48 	bl	8006d54 <USB_CoreReset>
 80068c4:	4603      	mov	r3, r0
 80068c6:	73fb      	strb	r3, [r7, #15]
 80068c8:	e01a      	b.n	8006900 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fa3c 	bl	8006d54 <USB_CoreReset>
 80068dc:	4603      	mov	r3, r0
 80068de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80068e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d106      	bne.n	80068f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	639a      	str	r2, [r3, #56]	; 0x38
 80068f2:	e005      	b.n	8006900 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006902:	2b01      	cmp	r3, #1
 8006904:	d10b      	bne.n	800691e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f043 0206 	orr.w	r2, r3, #6
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f043 0220 	orr.w	r2, r3, #32
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800691e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800692a:	b004      	add	sp, #16
 800692c:	4770      	bx	lr

0800692e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800692e:	b480      	push	{r7}
 8006930:	b083      	sub	sp, #12
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f023 0201 	bic.w	r2, r3, #1
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	460b      	mov	r3, r1
 800695a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006968:	78fb      	ldrb	r3, [r7, #3]
 800696a:	2b01      	cmp	r3, #1
 800696c:	d106      	bne.n	800697c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	60da      	str	r2, [r3, #12]
 800697a:	e00b      	b.n	8006994 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800697c:	78fb      	ldrb	r3, [r7, #3]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d106      	bne.n	8006990 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	60da      	str	r2, [r3, #12]
 800698e:	e001      	b.n	8006994 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e003      	b.n	800699c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006994:	2032      	movs	r0, #50	; 0x32
 8006996:	f7fb fad7 	bl	8001f48 <HAL_Delay>

  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3708      	adds	r7, #8
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069a4:	b084      	sub	sp, #16
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b086      	sub	sp, #24
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
 80069ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80069b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80069b6:	2300      	movs	r3, #0
 80069b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80069be:	2300      	movs	r3, #0
 80069c0:	613b      	str	r3, [r7, #16]
 80069c2:	e009      	b.n	80069d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	3340      	adds	r3, #64	; 0x40
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	4413      	add	r3, r2
 80069ce:	2200      	movs	r2, #0
 80069d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	3301      	adds	r3, #1
 80069d6:	613b      	str	r3, [r7, #16]
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	2b0e      	cmp	r3, #14
 80069dc:	d9f2      	bls.n	80069c4 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80069de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d11c      	bne.n	8006a1e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069f2:	f043 0302 	orr.w	r3, r3, #2
 80069f6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	601a      	str	r2, [r3, #0]
 8006a1c:	e005      	b.n	8006a2a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a30:	461a      	mov	r2, r3
 8006a32:	2300      	movs	r3, #0
 8006a34:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a44:	461a      	mov	r2, r3
 8006a46:	680b      	ldr	r3, [r1, #0]
 8006a48:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d10c      	bne.n	8006a6a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d104      	bne.n	8006a60 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006a56:	2100      	movs	r1, #0
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 f949 	bl	8006cf0 <USB_SetDevSpeed>
 8006a5e:	e008      	b.n	8006a72 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006a60:	2101      	movs	r1, #1
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f944 	bl	8006cf0 <USB_SetDevSpeed>
 8006a68:	e003      	b.n	8006a72 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006a6a:	2103      	movs	r1, #3
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 f93f 	bl	8006cf0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006a72:	2110      	movs	r1, #16
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 f8f3 	bl	8006c60 <USB_FlushTxFifo>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d001      	beq.n	8006a84 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f911 	bl	8006cac <USB_FlushRxFifo>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d001      	beq.n	8006a94 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ab8:	2300      	movs	r3, #0
 8006aba:	613b      	str	r3, [r7, #16]
 8006abc:	e043      	b.n	8006b46 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	015a      	lsls	r2, r3, #5
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ad0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ad4:	d118      	bne.n	8006b08 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10a      	bne.n	8006af2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	015a      	lsls	r2, r3, #5
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae8:	461a      	mov	r2, r3
 8006aea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006aee:	6013      	str	r3, [r2, #0]
 8006af0:	e013      	b.n	8006b1a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	015a      	lsls	r2, r3, #5
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	4413      	add	r3, r2
 8006afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006afe:	461a      	mov	r2, r3
 8006b00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006b04:	6013      	str	r3, [r2, #0]
 8006b06:	e008      	b.n	8006b1a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b14:	461a      	mov	r2, r3
 8006b16:	2300      	movs	r3, #0
 8006b18:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	015a      	lsls	r2, r3, #5
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	4413      	add	r3, r2
 8006b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b26:	461a      	mov	r2, r3
 8006b28:	2300      	movs	r3, #0
 8006b2a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	015a      	lsls	r2, r3, #5
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	4413      	add	r3, r2
 8006b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b38:	461a      	mov	r2, r3
 8006b3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b3e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	3301      	adds	r3, #1
 8006b44:	613b      	str	r3, [r7, #16]
 8006b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d3b7      	bcc.n	8006abe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b4e:	2300      	movs	r3, #0
 8006b50:	613b      	str	r3, [r7, #16]
 8006b52:	e043      	b.n	8006bdc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	015a      	lsls	r2, r3, #5
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b6a:	d118      	bne.n	8006b9e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10a      	bne.n	8006b88 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	015a      	lsls	r2, r3, #5
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b7e:	461a      	mov	r2, r3
 8006b80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b84:	6013      	str	r3, [r2, #0]
 8006b86:	e013      	b.n	8006bb0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b94:	461a      	mov	r2, r3
 8006b96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006b9a:	6013      	str	r3, [r2, #0]
 8006b9c:	e008      	b.n	8006bb0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	015a      	lsls	r2, r3, #5
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006baa:	461a      	mov	r2, r3
 8006bac:	2300      	movs	r3, #0
 8006bae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	015a      	lsls	r2, r3, #5
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	015a      	lsls	r2, r3, #5
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	4413      	add	r3, r2
 8006bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bce:	461a      	mov	r2, r3
 8006bd0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006bd4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	613b      	str	r3, [r7, #16]
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bde:	693a      	ldr	r2, [r7, #16]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d3b7      	bcc.n	8006b54 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bf2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bf6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006c04:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d105      	bne.n	8006c18 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	f043 0210 	orr.w	r2, r3, #16
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	699a      	ldr	r2, [r3, #24]
 8006c1c:	4b0f      	ldr	r3, [pc, #60]	; (8006c5c <USB_DevInit+0x2b8>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d005      	beq.n	8006c36 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	f043 0208 	orr.w	r2, r3, #8
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d107      	bne.n	8006c4c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c44:	f043 0304 	orr.w	r3, r3, #4
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3718      	adds	r7, #24
 8006c52:	46bd      	mov	sp, r7
 8006c54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c58:	b004      	add	sp, #16
 8006c5a:	4770      	bx	lr
 8006c5c:	803c3800 	.word	0x803c3800

08006c60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	019b      	lsls	r3, r3, #6
 8006c72:	f043 0220 	orr.w	r2, r3, #32
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	60fb      	str	r3, [r7, #12]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4a09      	ldr	r2, [pc, #36]	; (8006ca8 <USB_FlushTxFifo+0x48>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d901      	bls.n	8006c8c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e006      	b.n	8006c9a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	f003 0320 	and.w	r3, r3, #32
 8006c94:	2b20      	cmp	r3, #32
 8006c96:	d0f0      	beq.n	8006c7a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	00030d40 	.word	0x00030d40

08006cac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2210      	movs	r2, #16
 8006cbc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	4a09      	ldr	r2, [pc, #36]	; (8006cec <USB_FlushRxFifo+0x40>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d901      	bls.n	8006cd0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e006      	b.n	8006cde <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	f003 0310 	and.w	r3, r3, #16
 8006cd8:	2b10      	cmp	r3, #16
 8006cda:	d0f0      	beq.n	8006cbe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3714      	adds	r7, #20
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	00030d40 	.word	0x00030d40

08006cf0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	78fb      	ldrb	r3, [r7, #3]
 8006d0a:	68f9      	ldr	r1, [r7, #12]
 8006d0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d10:	4313      	orrs	r3, r2
 8006d12:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3714      	adds	r7, #20
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b084      	sub	sp, #16
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d3c:	f043 0302 	orr.w	r3, r3, #2
 8006d40:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006d42:	2003      	movs	r0, #3
 8006d44:	f7fb f900 	bl	8001f48 <HAL_Delay>

  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
	...

08006d54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	3301      	adds	r3, #1
 8006d64:	60fb      	str	r3, [r7, #12]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	4a13      	ldr	r2, [pc, #76]	; (8006db8 <USB_CoreReset+0x64>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d901      	bls.n	8006d72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e01b      	b.n	8006daa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	daf2      	bge.n	8006d60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	f043 0201 	orr.w	r2, r3, #1
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	60fb      	str	r3, [r7, #12]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	4a09      	ldr	r2, [pc, #36]	; (8006db8 <USB_CoreReset+0x64>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d901      	bls.n	8006d9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e006      	b.n	8006daa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	f003 0301 	and.w	r3, r3, #1
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d0f0      	beq.n	8006d8a <USB_CoreReset+0x36>

  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3714      	adds	r7, #20
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	00030d40 	.word	0x00030d40

08006dbc <__libc_init_array>:
 8006dbc:	b570      	push	{r4, r5, r6, lr}
 8006dbe:	4e0d      	ldr	r6, [pc, #52]	; (8006df4 <__libc_init_array+0x38>)
 8006dc0:	4c0d      	ldr	r4, [pc, #52]	; (8006df8 <__libc_init_array+0x3c>)
 8006dc2:	1ba4      	subs	r4, r4, r6
 8006dc4:	10a4      	asrs	r4, r4, #2
 8006dc6:	2500      	movs	r5, #0
 8006dc8:	42a5      	cmp	r5, r4
 8006dca:	d109      	bne.n	8006de0 <__libc_init_array+0x24>
 8006dcc:	4e0b      	ldr	r6, [pc, #44]	; (8006dfc <__libc_init_array+0x40>)
 8006dce:	4c0c      	ldr	r4, [pc, #48]	; (8006e00 <__libc_init_array+0x44>)
 8006dd0:	f000 f820 	bl	8006e14 <_init>
 8006dd4:	1ba4      	subs	r4, r4, r6
 8006dd6:	10a4      	asrs	r4, r4, #2
 8006dd8:	2500      	movs	r5, #0
 8006dda:	42a5      	cmp	r5, r4
 8006ddc:	d105      	bne.n	8006dea <__libc_init_array+0x2e>
 8006dde:	bd70      	pop	{r4, r5, r6, pc}
 8006de0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006de4:	4798      	blx	r3
 8006de6:	3501      	adds	r5, #1
 8006de8:	e7ee      	b.n	8006dc8 <__libc_init_array+0xc>
 8006dea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006dee:	4798      	blx	r3
 8006df0:	3501      	adds	r5, #1
 8006df2:	e7f2      	b.n	8006dda <__libc_init_array+0x1e>
 8006df4:	08006e54 	.word	0x08006e54
 8006df8:	08006e54 	.word	0x08006e54
 8006dfc:	08006e54 	.word	0x08006e54
 8006e00:	08006e58 	.word	0x08006e58

08006e04 <memset>:
 8006e04:	4402      	add	r2, r0
 8006e06:	4603      	mov	r3, r0
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d100      	bne.n	8006e0e <memset+0xa>
 8006e0c:	4770      	bx	lr
 8006e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e12:	e7f9      	b.n	8006e08 <memset+0x4>

08006e14 <_init>:
 8006e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e16:	bf00      	nop
 8006e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e1a:	bc08      	pop	{r3}
 8006e1c:	469e      	mov	lr, r3
 8006e1e:	4770      	bx	lr

08006e20 <_fini>:
 8006e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e22:	bf00      	nop
 8006e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e26:	bc08      	pop	{r3}
 8006e28:	469e      	mov	lr, r3
 8006e2a:	4770      	bx	lr
